grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

Model:
	greetings+=translation_unit;
	
translation_unit:
	external_declaration=external_declaration translation_unit_linha=translation_unit_linha
	;

external_declaration
	: function_definitio=function_definition
	| declaration=declaration
	;

declaration_specifiers
	: storage_class_specifier=storage_class_specifier declaration_specifiers+=declaration_specifiers
	| storage_class_specifier=storage_class_specifier
	| type_specifier=type_specifier declaration_specifiers+=declaration_specifiers
	| type_specifier=type_specifier
	| type_qualifier=type_qualifier declaration_specifiers+=declaration_specifiers
	| type_qualifier=type_qualifier
	| function_specifier=function_specifier declaration_specifiers+=declaration_specifiers
	| function_specifier=function_specifier
	| alignment_specifier=alignment_specifier declaration_specifiers+=declaration_specifiers
	| alignment_specifier=alignment_specifier
	;
	
function_specifier
	: 'inline'
	| '_Noreturn'
;

alignment_specifier
	: '_Alignas' '(' type_name=type_name ')'
	| '_Alignas' '(' constant_expression=constant_expression ')'
;

type_qualifier
	: namez='const'
	| namez='restrict'
	| namez='volatile'
	| namez='_Atomic'
;

type_specifier
	: type_name_str='void'
	| type_name_str='char'
	| type_name_str='short'
	| type_name_str='int'
	| type_name_str='long'
	| type_name_str='float'
	| type_name_str='double'
	| type_name_str='signed'
	| type_name_str='unsigned'
	| type_name_str='bool'
	| type_name_str='_Complex'
	| type_name_str='_Imaginary'	  	/* non-mandated extension */
	| atomic_type_specifier=atomic_type_specifier
	| struct_or_union_specifier=struct_or_union_specifier
	| enum_specifier=enum_specifier
	| type_name_str='typedef'		/* after it has been defined as such */
	;

enum_specifier
	: 'enum' '{' enumerator_list=enumerator_list '}'
	| 'enum' '{' enumerator_list=enumerator_list ',' '}'
	| 'enum' identifier=IDz '{' enumerator_list=enumerator_list '}'
	| 'enum' identifier=IDz '{' enumerator_list=enumerator_list ',' '}'
	| 'enum' identifier=IDz
	;

enumerator_list
	: enumarator=enumerator enumerator_list_linha=enumerator_list_linha
;

enumerator_list_linha
	: {EnumeratorListLinhaAction}(',' enumerator=enumerator enumerator_list_linha=enumerator_list_linha)?
;

enumerator	/* identifiers must be flagged as ENUMERATION_CONSTANT */
	: enumeration_constant=enumeration_constant '=' conditional_expression=constant_expression
	| enumeration_constant=enumeration_constant
;

atomic_type_specifier
	: '_Atomic' '(' type_name=type_name ')'
;


struct_or_union_specifier
	: struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}'
	| struct_or_union=struct_or_union identifier=IDz struct_or_union_specifier_complement=struct_or_union_specifier_complement
	;

struct_or_union
	: 'struct'
	| 'union'
	;


struct_or_union_specifier_complement:
	{StructOrUnionSpecifierComplementAction}('{' struct_declaration_list=struct_declaration_list '}')?
;

struct_declaration_list
	: struct_declaration=struct_declaration struct_declaration_list_linha=struct_declaration_list_linha
	;

struct_declaration_list_linha:
	{StructDeclarationListLinhaAction}(struct_declaration=struct_declaration struct_declaration_list_linha=struct_declaration_list_linha)?
;

struct_declaration
	: specifier_qualifier_list=specifier_qualifier_list ';'	/* for anonymous struct/union */
	| specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';'
	| static_assert_declaration=static_assert_declaration
	;

struct_declarator_list
	: struct_declarator=struct_declarator struct_declarator_list_linha=struct_declarator_list_linha
	;
struct_declarator_list_linha:
	{StructDeclaratorListLinhaAction}(',' struct_declarator=struct_declarator struct_declarator_list_linha=struct_declarator_list_linha)?
;
struct_declarator
	: ':' constant_expression=constant_expression
	| declarator=declarator ':' constant_expression=constant_expression
	| declarator=declarator
	;

specifier_qualifier_list
	: type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list
	| type_specifier=type_specifier
	| type_qualifier=type_qualifier specifier_qualifier_list=specifier_qualifier_list
	| type_qualifier=type_qualifier
	;

storage_class_specifier
	: 'typedef'	/* identifiers must be flagged as TYPEDEF_NAME */
	| 'extern'
	| 'static'
	| '_Thread_local'
	| 'auto'
	| 'register'
	;

declaration
	: declaration_specifiers+=declaration_specifiers ';'
	| declaration_specifiers+=declaration_specifiers init_declarator_list+=init_declarator_list ';'
	| static_assert_declaration=static_assert_declaration
	;

function_definition
	: declaration_specifiers+=declaration_specifiers declarator=declarator declaration_list+=declaration_list compound_statement=compound_statement
	| declaration_specifiers+=declaration_specifiers declarator=declarator compound_statement=compound_statement
	;


declaration_list
	: declaration=declaration declaration_list_linha=declaration_list_linha
	;
	
declaration_list_linha
:
	{DeclarationListLinhaAction}(declaration=declaration declaration_list_linha=declaration_list_linha)?
;

declarator
	: pointer=pointer direct_declarator=direct_declarator
	| direct_declarator=direct_declarator
;

pointer
	: '*' type_qualifier_list=type_qualifier_list pointer=pointer
	| '*' type_qualifier_list=type_qualifier_list
	| '*' pointer=pointer
	| '*'
;

type_qualifier_list
	: type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha
;

type_qualifier_list_linha
	:{TypeQualifierListLinhaAtion}(type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha)?
;

direct_declarator
	: identifier=IDz (direct_declarator_linha=direct_declarator_linha)?
	| '(' declarator=declarator ')' (direct_declarator_linha=direct_declarator_linha)?
;

direct_declarator_linha
	:direct_declarator_complemento=direct_declarator_complemento (direct_declarator_linha=direct_declarator_linha)?
;

direct_declarator_complemento
	: '[' ']'
	| '[' '*' ']'
	| '[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	| '[' 'static' assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list '*' ']'
	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list ']'
	| '[' assignment_expression=assignment_expression ']'
	| '(' parameter_type_list=parameter_type_list ')'
	| '(' ')'
	| '(' identifier_list=identifier_list ')'
;

parameter_type_list
	: parameter_lista=parameter_lista ',' '...'
	| parameter_lista=parameter_lista
	;

parameter_lista
	: parameter_declarations+=parameter_declaration (',' parameter_declarations+=parameter_declaration)*;

parameter_list_linha
	: (',' parameter_declaration=parameter_declaration parameter_list_linha+=parameter_list_linha)?
;


parameter_declaration
	: declaration_specifiers=declaration_specifiers declarator=declarator
	| declaration_specifiers=declaration_specifiers abstract_declarator=abstract_declarator
	| declaration_specifiers=declaration_specifiers
;

abstract_declarator
	: pointer=pointer direct_abstract_declarator=direct_abstract_declarator
	| pointer=pointer
	| direct_abstract_declarator=direct_abstract_declarator
	;

direct_abstract_declarator
	: ('(' abstract_declarator=abstract_declarator ')'
	| '[' ']'
	| '[' '*' ']'
	| '[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	| '[' 'static' assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list ']'
	| '[' assignment_expression=assignment_expression ']'
	| '(' ')'
	| '(' parameter_type_list=parameter_type_list ')') direct_abstract_declarator_linha=direct_abstract_declarator_linha
	;


initializer
	: '{' init_declarator_list=initializer_list '}'
	| '{' init_declarator_list=initializer_list ',' '}'
	| assignment_expression=assignment_expression
	;

direct_abstract_declarator_linha:
	{DirectAbstractDeclarratorLinhaAction}(direct_abstract_declarator_complement=direct_abstract_declarator_complement direct_abstract_declarator_linha=direct_abstract_declarator_linha)?
;

direct_abstract_declarator_complement:
	'[' ']'
	| '[' '*' ']'
	| '[' 'static' type_qualifier_list assignment_expression=assignment_expression ']'
	| '[' 'static' assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
	| '[' type_qualifier_list=type_qualifier_list ']'
	| '[' assignment_expression=assignment_expression ']'
	| '(' ')'
	| '(' parameter_type_list=parameter_type_list ')'
;

identifier_list
	: identifier=IDz identifier_list_linha=identifier_list_linha 
	;
	
identifier_list_linha
	: {IdentifierListLinhaAction}(',' identifier=IDz identifier_list_linha=identifier_list_linha)?
;

translation_unit_linha:
	{TranlationUnitLinhaAction}(external_declaration=external_declaration translation_unit_linha=translation_unit_linha)?
	;

primary_expression:
	identifier=IDz
	| constant=constant
	| '(' expression=expression ')'
	| generic_selection=generic_selection;

//TODO NINGUEM CHAMA
enumeration_constant		/* before it has been defined as such */
	: identifier=IDz
		
	;



generic_selection
	: _generic='_Generic' '(' assignment_expression=assignment_expression ',' generic_assoc_list+=generic_assoc_list ')'
	;

generic_assoc_list
	: generic_association=generic_association generic_assoc_list_linha=generic_assoc_list_linha
	;

generic_assoc_list_linha
:
	{GenericAssocListLinhaAction}(',' generic_association=generic_association generic_assoc_list_linha=generic_assoc_list_linha)?
;

generic_association
	: type_name=type_name ':' assignment_expression=assignment_expression
	| default='default' ':' assignment_expression=assignment_expression
	;

postfix_expression
	: primary_expression=primary_expression postfix_expression_linha=postfix_expression_linha
	| '(' type_name ')' '{' initializer_list=initializer_list '}' postfix_expression_linha=postfix_expression_linha
	| '(' type_name ')' '{' initializer_list=initializer_list ',' '}' postfix_expression_linha=postfix_expression_linha
	;

postfix_expression_linha:
	{PostfixExpressionLinhaAction}(postfix_expression_complement=postfix_expression_complement postfix_expression_linha=postfix_expression_linha)?
;

initializer_list
	: designation=designation initializer=initializer init_declarator_list_linha=init_declarator_list_linha
	| initializer=initializer init_declarator_list_linha=init_declarator_list_linha
;

initializer_list_linha
	: {InitializerListLinhaAction}(initializer_list_complement=initializer_list_complement init_declarator_list_linha=init_declarator_list_linha)?
;



initializer_list_complement
	: ',' designation=designation initializer=initializer
	| ',' initializer=initializer
;

designation
	: designator_list=designator_list '='
	;

designator_list
	: designator=designator designator_list_linha=designator_list_linha
;

designator_list_linha
	: {DesignatorListLinhaAction}(designator=designator designator_list_linha=declaration_list_linha)?
;


designator
	: '[' constant_expression=conditional_expression ']'
	| '.' identifier=IDz
;

static_assert_declaration
	: '_Static_assert' '(' constant_expression=constant_expression ',' STRING_LITERAL ')' ';'
;


postfix_expression_complement:
	'[' expression=expression ']'
	|{PostFixEmpryParams}'(' ')'
	|'(' argument_expression_list=argument_expression_list ')'
	|'.' identifier=IDz
	|'->' identifier=IDz
	|'++'
	|'--'
;

argument_expression_list
	: assignment_expressions+=assignment_expression (',' assignment_expressions+=assignment_expression)*
	;


argument_expression_list_linha:
	{ArgumentExpressionListLinhaAction}(',' assignment_expression=assignment_expression argument_expression_list_linha=argument_expression_list_linha)?
;

unary_expression
	: postfix_expression=postfix_expression
	| {PlusPlus} plus='++' unary_expression=unary_expression
	| '--' unary_expression=unary_expression
	| unary_operator=unary_operator cast_expression=cast_expression
	| 'sizeof' unary_expression=unary_expression
	| 'sizeof' '(' type_name=type_name ')'
	| '_Alignof' '(' type_name=type_name ')'
	;

cast_expression
	: unary_expression=unary_expression
	| '(' type_name=type_name ')' cast_expression=cast_expression
	;

multiplicative_expression
	: cast_expression=cast_expression multiplicative_expression_linha=multiplicative_expression_linha
	;
	
multiplicative_expression_linha:
	(multiplicative_expression_complement=multiplicative_expression_complement multiplicative_expression_linha=multiplicative_expression_linha)?
;	

multiplicative_expression_complement
	:multiplica='*' cast_expression=cast_expression
	|divide='/' cast_expression=cast_expression
	|modulo='%' cast_expression=cast_expression
;

additive_expression
	: multiplicative_expression=multiplicative_expression additive_expression_linha=additive_expression_linha
	;

additive_expression_linha
	:(additive_expression_complement=additive_expression_complement additive_expression_linha=additive_expression_linha)?;

additive_expression_complement:
	mais='+' multiplicative_expression=multiplicative_expression
	|menos='-' multiplicative_expression=multiplicative_expression
;

shift_expression
	: additive_expression=additive_expression shift_expression_linha=shift_expression_linha
	;

shift_expression_linha:
	(shift_expression_complement=shift_expression_complement shift_expression_linha=shift_expression_linha)?
;

shift_expression_complement
	: sleft='<<' additive_expression=additive_expression
	| sright='>>' additive_expression=additive_expression
;

relational_expression
	: shift_expression=shift_expression relational_expression_linha=relational_expression_linha
;

relational_expression_linha
	:(shift_expression_complement=shift_expression_complement relational_expression_linha=relational_expression_linha)?
;

relational_expression_complement
	: menor='<' shift_expression=shift_expression
	| maior='>' shift_expression=shift_expression
	| menor_igual='<=' shift_expression=shift_expression
	| maior_igual='>=' shift_expression=shift_expression
;

equality_expression
	: relational_expression=relational_expression equality_expression_linha=equality_expression_linha	
;

equality_expression_linha
	:(equality_expression_complement=equality_expression_complement equality_expression_linha=equality_expression_linha)?
;

equality_expression_complement
	: igual='==' relational_expression=relational_expression
	|menor='<' relational_expression=relational_expression
	| maior='>' relational_expression=relational_expression
	| menor_igual='<=' relational_expression=relational_expression
	| maior_igual='>=' relational_expression=relational_expression
	| n_igual='!=' relational_expression=relational_expression	
;

statement
	: labeled_statement=labeled_statement
	| compound_statement=compound_statement
	| expression_statement=expression_statement
	| selection_statement=selection_statement
	| iteration_statement=iteration_statement
	| jump_statement=jump_statement
	;


jump_statement
	: 'goto' identifier=IDz ';'
	| 'continue' ';'
	| break='break' ';'
	| return_vazio='return' ';'
	| return='return' expression=expression ';'
;



iteration_statement
	: 'while' '(' expression=expression ')' statement=statement
	| 'do' statement=statement 'while' '(' expression=expression ')' ';'
	| 'for' '(' expression_statement=expression_statement expression_statement2=expression_statement ')' statement=statement
	| 'for' '(' expression_statement=expression_statement expression_statement2=expression_statement expression=expression ')' statement=statement
	| 'for' '(' declaration=declaration expression_statement=expression_statement ')' statement=statement
	| 'for' '(' declaration=declaration expression_statement=expression_statement expression=expression ')' statement=statement
;

selection_statement
	: 'if' '(' expression=expression ')' statement=statement 'else' statement2=statement
	| 'if' '(' expression=expression ')' statement=statement
	| 'switch' '(' expression=expression ')' statement=statement
;



labeled_statement
	: identifier=IDz ':' statement=statement
	| 'case' conditional_expression=conditional_expression ':' statement=statement
	| 'default' ':' statement=statement
;

compound_statement
	: '{' '}'
	| '{'  block_item_list+=block_item_list '}'
;

block_item_list
	: block_item=block_item (block_item_list_linha+=block_item_list_linha)?
;

block_item_list_linha
	: block_item=block_item (block_item_list_linha+=block_item_list_linha)?
;

block_item
	: declaration=declaration
	| statement=statement
;

expression_statement
	: ';'
	| expression=expression ';'
;


and_expression
	: equality_expression=equality_expression and_expression_linha=and_expression_linha
;

and_expression_linha
	: ('&' equality_expression=equality_expression and_expression_linha=and_expression_linha)?
;

exclusive_or_expression
	: and_expression=and_expression exclusive_or_expression_linha=exclusive_or_expression_linha
;

exclusive_or_expression_linha
	: ('^' and_expression=and_expression exclusive_or_expression_linha=exclusive_or_expression_linha)?
;

inclusive_or_expression
	: exclusive_or_expression=exclusive_or_expression inclusive_or_expression_linha=inclusive_or_expression_linha
;

inclusive_or_expression_linha
	: ('|' exclusive_or_expression=exclusive_or_expression inclusive_or_expression_linha=inclusive_or_expression_linha)?
;

logical_and_expression
	: inclusive_or_expression=inclusive_or_expression logical_and_expression_linha=logical_and_expression_linha
;

logical_and_expression_linha
	:('and' inclusive_or_expression=inclusive_or_expression logical_and_expression_linha=logical_and_expression_linha)?
;

logical_or_expression
	: logical_and_expression=logical_and_expression logical_or_expression_linha=logical_or_expression_linha
;
	
logical_or_expression_linha
	: ('or' logical_and_expression=logical_and_expression logical_or_expression_linha=logical_or_expression_linha)?	
;

conditional_expression
	: logical_or_expression=logical_or_expression conditional_expression_linha=conditional_expression_linha
;

conditional_expression_linha
	:('?' expression=expression ':' conditional_expression=conditional_expression conditional_expression_linha=conditional_expression_linha)?
;

assignment_expression
	: conditional_expression=conditional_expression
	| unary_expression=unary_expression assignment_operator=assignment_operator assignment_expression=assignment_expression
;

assignment_operator
	: '='
	| '*='
	| '/='
	| '%='
	| '+='
	| '-='
	| '<<='
	| '>>='
	| '&='
	| '^='
	| '|='
;




unary_operator
	: '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'
	;

type_name
	: specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator
	| specifier_qualifier_list=specifier_qualifier_list
	;
	

expression
	: assignment_expression=assignment_expression expression_linha=expression_linha
;
expression_linha:
	(',' assignment_expression=assignment_expression expression_linha=expression_linha)?
;

constant_expression
	: conditional_expression=conditional_expression	/* with constraints */
;


init_declarator_list
	: init_declarator=init_declarator init_declarator_list_linha=init_declarator_list_linha
	;

init_declarator_list_linha:
	{InitDecclaratorListLinhaAction}(',' init_declarator=init_declarator init_declarator_list_linha=init_declarator_list_linha)?
;

init_declarator
	: declarator=declarator '=' initializer=initializer
	| declarator=declarator
	;

string_ufcg
	: string_literal=STRING_LITERAL
	| __func__='__func__';


constant
	: i_constant=INT	/* includes character_constant */
	| f_constant=FLOAT
	| char=CHAR
	| enumz='enum'	/* after it has been defined as such */
	;

terminal IDz : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'1'..'9')* ;
terminal CHAR: '\''.'\'';

terminal FLOAT:
	('0'..'9')+ '.' ('0'..'9')*
;

terminal O:
	('0'..'7');

terminal D:
	('0'..'9');

terminal NZ:
	('1'..'9');

//terminal L:
//	('a'..'z' | 'A'..'Z' | '_');

terminal A:
	('a'..'z' | 'A'..'Z' | '_' | '0' '..' '9');

terminal H:
	('a'..'f' | 'A'..'F' | '0' '..' '9');

terminal HP:
	('0' ('x' | 'X'));

terminal E:
	('E' | 'e') ('+' | '-')? D '+';

terminal P:
	('P' | 'p') ('+' | '-')? '{' D '}' '+';

terminal FS:
	'f' | 'F' | 'l' | 'L';

terminal ES:
	A; //TODO
terminal IS:
	((('u' | 'U') ('l' | 'L' | 'l' 'l' | 'L' 'L')?) | (('l' | 'L' | 'l' 'l' | 'L' 'L') ('u' | 'U')?));

terminal CP:
	('u' | 'U' | 'L');

terminal SP:
	('u' '8' | 'u' | 'U' | 'L');
	//Algum mito faz esse ES??
terminal WS:
	(' ' | '\t' | '\r' | '\n' | '\f')+;

terminal I_CONSTANT:
	HP H '+' IS? |
	NZ D '*' IS? |
	"0" O '*' IS? |
	CP? "'" (('^' | '\'' | '\\' | '\n') | ES)+ "'";

terminal F_CONSTANT:
	D '+' E FS? |
	D '*' "." D '+' E? FS? |
	D '+' "." E? FS? |
	HP H '+' P FS?
	HP H '*' "." H '+' P FS? |
	HP H '+' "." P FS?;

terminal STRING_LITERAL:
	(SP? '"' (('^' | '\'' | '\\' | '\n') | ES)* '"' WS*)+;