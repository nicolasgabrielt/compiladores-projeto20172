/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.conditional_expression;
import org.xtext.example.mydsl.myDsl.conditional_expression_linha;
import org.xtext.example.mydsl.myDsl.logical_or_expression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>conditional expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.conditional_expressionImpl#getLogical_or_expression <em>Logical or expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.conditional_expressionImpl#getConditional_expression_linha <em>Conditional expression linha</em>}</li>
 * </ul>
 *
 * @generated
 */
public class conditional_expressionImpl extends MinimalEObjectImpl.Container implements conditional_expression
{
  /**
   * The cached value of the '{@link #getLogical_or_expression() <em>Logical or expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogical_or_expression()
   * @generated
   * @ordered
   */
  protected logical_or_expression logical_or_expression;

  /**
   * The cached value of the '{@link #getConditional_expression_linha() <em>Conditional expression linha</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditional_expression_linha()
   * @generated
   * @ordered
   */
  protected conditional_expression_linha conditional_expression_linha;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected conditional_expressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.CONDITIONAL_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public logical_or_expression getLogical_or_expression()
  {
    return logical_or_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLogical_or_expression(logical_or_expression newLogical_or_expression, NotificationChain msgs)
  {
    logical_or_expression oldLogical_or_expression = logical_or_expression;
    logical_or_expression = newLogical_or_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION, oldLogical_or_expression, newLogical_or_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLogical_or_expression(logical_or_expression newLogical_or_expression)
  {
    if (newLogical_or_expression != logical_or_expression)
    {
      NotificationChain msgs = null;
      if (logical_or_expression != null)
        msgs = ((InternalEObject)logical_or_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION, null, msgs);
      if (newLogical_or_expression != null)
        msgs = ((InternalEObject)newLogical_or_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION, null, msgs);
      msgs = basicSetLogical_or_expression(newLogical_or_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION, newLogical_or_expression, newLogical_or_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public conditional_expression_linha getConditional_expression_linha()
  {
    return conditional_expression_linha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditional_expression_linha(conditional_expression_linha newConditional_expression_linha, NotificationChain msgs)
  {
    conditional_expression_linha oldConditional_expression_linha = conditional_expression_linha;
    conditional_expression_linha = newConditional_expression_linha;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA, oldConditional_expression_linha, newConditional_expression_linha);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConditional_expression_linha(conditional_expression_linha newConditional_expression_linha)
  {
    if (newConditional_expression_linha != conditional_expression_linha)
    {
      NotificationChain msgs = null;
      if (conditional_expression_linha != null)
        msgs = ((InternalEObject)conditional_expression_linha).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA, null, msgs);
      if (newConditional_expression_linha != null)
        msgs = ((InternalEObject)newConditional_expression_linha).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA, null, msgs);
      msgs = basicSetConditional_expression_linha(newConditional_expression_linha, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA, newConditional_expression_linha, newConditional_expression_linha));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION:
        return basicSetLogical_or_expression(null, msgs);
      case MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA:
        return basicSetConditional_expression_linha(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION:
        return getLogical_or_expression();
      case MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA:
        return getConditional_expression_linha();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION:
        setLogical_or_expression((logical_or_expression)newValue);
        return;
      case MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA:
        setConditional_expression_linha((conditional_expression_linha)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION:
        setLogical_or_expression((logical_or_expression)null);
        return;
      case MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA:
        setConditional_expression_linha((conditional_expression_linha)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CONDITIONAL_EXPRESSION__LOGICAL_OR_EXPRESSION:
        return logical_or_expression != null;
      case MyDslPackage.CONDITIONAL_EXPRESSION__CONDITIONAL_EXPRESSION_LINHA:
        return conditional_expression_linha != null;
    }
    return super.eIsSet(featureID);
  }

} //conditional_expressionImpl
