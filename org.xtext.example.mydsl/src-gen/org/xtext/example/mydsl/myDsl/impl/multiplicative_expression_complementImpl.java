/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.cast_expression;
import org.xtext.example.mydsl.myDsl.multiplicative_expression_complement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>multiplicative expression complement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.multiplicative_expression_complementImpl#getMultiplica <em>Multiplica</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.multiplicative_expression_complementImpl#getCast_expression <em>Cast expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.multiplicative_expression_complementImpl#getDivide <em>Divide</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.multiplicative_expression_complementImpl#getModulo <em>Modulo</em>}</li>
 * </ul>
 *
 * @generated
 */
public class multiplicative_expression_complementImpl extends MinimalEObjectImpl.Container implements multiplicative_expression_complement
{
  /**
   * The default value of the '{@link #getMultiplica() <em>Multiplica</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplica()
   * @generated
   * @ordered
   */
  protected static final String MULTIPLICA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMultiplica() <em>Multiplica</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplica()
   * @generated
   * @ordered
   */
  protected String multiplica = MULTIPLICA_EDEFAULT;

  /**
   * The cached value of the '{@link #getCast_expression() <em>Cast expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCast_expression()
   * @generated
   * @ordered
   */
  protected cast_expression cast_expression;

  /**
   * The default value of the '{@link #getDivide() <em>Divide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDivide()
   * @generated
   * @ordered
   */
  protected static final String DIVIDE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDivide() <em>Divide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDivide()
   * @generated
   * @ordered
   */
  protected String divide = DIVIDE_EDEFAULT;

  /**
   * The default value of the '{@link #getModulo() <em>Modulo</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModulo()
   * @generated
   * @ordered
   */
  protected static final String MODULO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getModulo() <em>Modulo</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModulo()
   * @generated
   * @ordered
   */
  protected String modulo = MODULO_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected multiplicative_expression_complementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.MULTIPLICATIVE_EXPRESSION_COMPLEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMultiplica()
  {
    return multiplica;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMultiplica(String newMultiplica)
  {
    String oldMultiplica = multiplica;
    multiplica = newMultiplica;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MULTIPLICA, oldMultiplica, multiplica));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cast_expression getCast_expression()
  {
    return cast_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCast_expression(cast_expression newCast_expression, NotificationChain msgs)
  {
    cast_expression oldCast_expression = cast_expression;
    cast_expression = newCast_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION, oldCast_expression, newCast_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCast_expression(cast_expression newCast_expression)
  {
    if (newCast_expression != cast_expression)
    {
      NotificationChain msgs = null;
      if (cast_expression != null)
        msgs = ((InternalEObject)cast_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION, null, msgs);
      if (newCast_expression != null)
        msgs = ((InternalEObject)newCast_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION, null, msgs);
      msgs = basicSetCast_expression(newCast_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION, newCast_expression, newCast_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDivide()
  {
    return divide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDivide(String newDivide)
  {
    String oldDivide = divide;
    divide = newDivide;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__DIVIDE, oldDivide, divide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getModulo()
  {
    return modulo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setModulo(String newModulo)
  {
    String oldModulo = modulo;
    modulo = newModulo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MODULO, oldModulo, modulo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION:
        return basicSetCast_expression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MULTIPLICA:
        return getMultiplica();
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION:
        return getCast_expression();
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__DIVIDE:
        return getDivide();
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MODULO:
        return getModulo();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MULTIPLICA:
        setMultiplica((String)newValue);
        return;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION:
        setCast_expression((cast_expression)newValue);
        return;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__DIVIDE:
        setDivide((String)newValue);
        return;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MODULO:
        setModulo((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MULTIPLICA:
        setMultiplica(MULTIPLICA_EDEFAULT);
        return;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION:
        setCast_expression((cast_expression)null);
        return;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__DIVIDE:
        setDivide(DIVIDE_EDEFAULT);
        return;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MODULO:
        setModulo(MODULO_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MULTIPLICA:
        return MULTIPLICA_EDEFAULT == null ? multiplica != null : !MULTIPLICA_EDEFAULT.equals(multiplica);
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__CAST_EXPRESSION:
        return cast_expression != null;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__DIVIDE:
        return DIVIDE_EDEFAULT == null ? divide != null : !DIVIDE_EDEFAULT.equals(divide);
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION_COMPLEMENT__MODULO:
        return MODULO_EDEFAULT == null ? modulo != null : !MODULO_EDEFAULT.equals(modulo);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (multiplica: ");
    result.append(multiplica);
    result.append(", divide: ");
    result.append(divide);
    result.append(", modulo: ");
    result.append(modulo);
    result.append(')');
    return result.toString();
  }

} //multiplicative_expression_complementImpl
