/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.cast_expression;
import org.xtext.example.mydsl.myDsl.multiplicative_expression;
import org.xtext.example.mydsl.myDsl.multiplicative_expression_linha;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>multiplicative expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.multiplicative_expressionImpl#getCast_expression <em>Cast expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.multiplicative_expressionImpl#getMultiplicative_expression_linha <em>Multiplicative expression linha</em>}</li>
 * </ul>
 *
 * @generated
 */
public class multiplicative_expressionImpl extends MinimalEObjectImpl.Container implements multiplicative_expression
{
  /**
   * The cached value of the '{@link #getCast_expression() <em>Cast expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCast_expression()
   * @generated
   * @ordered
   */
  protected cast_expression cast_expression;

  /**
   * The cached value of the '{@link #getMultiplicative_expression_linha() <em>Multiplicative expression linha</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplicative_expression_linha()
   * @generated
   * @ordered
   */
  protected multiplicative_expression_linha multiplicative_expression_linha;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected multiplicative_expressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.MULTIPLICATIVE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cast_expression getCast_expression()
  {
    return cast_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCast_expression(cast_expression newCast_expression, NotificationChain msgs)
  {
    cast_expression oldCast_expression = cast_expression;
    cast_expression = newCast_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION, oldCast_expression, newCast_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCast_expression(cast_expression newCast_expression)
  {
    if (newCast_expression != cast_expression)
    {
      NotificationChain msgs = null;
      if (cast_expression != null)
        msgs = ((InternalEObject)cast_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION, null, msgs);
      if (newCast_expression != null)
        msgs = ((InternalEObject)newCast_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION, null, msgs);
      msgs = basicSetCast_expression(newCast_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION, newCast_expression, newCast_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public multiplicative_expression_linha getMultiplicative_expression_linha()
  {
    return multiplicative_expression_linha;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMultiplicative_expression_linha(multiplicative_expression_linha newMultiplicative_expression_linha, NotificationChain msgs)
  {
    multiplicative_expression_linha oldMultiplicative_expression_linha = multiplicative_expression_linha;
    multiplicative_expression_linha = newMultiplicative_expression_linha;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA, oldMultiplicative_expression_linha, newMultiplicative_expression_linha);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMultiplicative_expression_linha(multiplicative_expression_linha newMultiplicative_expression_linha)
  {
    if (newMultiplicative_expression_linha != multiplicative_expression_linha)
    {
      NotificationChain msgs = null;
      if (multiplicative_expression_linha != null)
        msgs = ((InternalEObject)multiplicative_expression_linha).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA, null, msgs);
      if (newMultiplicative_expression_linha != null)
        msgs = ((InternalEObject)newMultiplicative_expression_linha).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA, null, msgs);
      msgs = basicSetMultiplicative_expression_linha(newMultiplicative_expression_linha, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA, newMultiplicative_expression_linha, newMultiplicative_expression_linha));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION:
        return basicSetCast_expression(null, msgs);
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA:
        return basicSetMultiplicative_expression_linha(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION:
        return getCast_expression();
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA:
        return getMultiplicative_expression_linha();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION:
        setCast_expression((cast_expression)newValue);
        return;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA:
        setMultiplicative_expression_linha((multiplicative_expression_linha)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION:
        setCast_expression((cast_expression)null);
        return;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA:
        setMultiplicative_expression_linha((multiplicative_expression_linha)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__CAST_EXPRESSION:
        return cast_expression != null;
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION__MULTIPLICATIVE_EXPRESSION_LINHA:
        return multiplicative_expression_linha != null;
    }
    return super.eIsSet(featureID);
  }

} //multiplicative_expressionImpl
