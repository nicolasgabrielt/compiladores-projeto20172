/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.atomic_type_specifier;
import org.xtext.example.mydsl.myDsl.type_name;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>atomic type specifier</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.atomic_type_specifierImpl#getType_name <em>Type name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class atomic_type_specifierImpl extends MinimalEObjectImpl.Container implements atomic_type_specifier
{
  /**
   * The cached value of the '{@link #getType_name() <em>Type name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType_name()
   * @generated
   * @ordered
   */
  protected type_name type_name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected atomic_type_specifierImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.ATOMIC_TYPE_SPECIFIER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public type_name getType_name()
  {
    return type_name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType_name(type_name newType_name, NotificationChain msgs)
  {
    type_name oldType_name = type_name;
    type_name = newType_name;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME, oldType_name, newType_name);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType_name(type_name newType_name)
  {
    if (newType_name != type_name)
    {
      NotificationChain msgs = null;
      if (type_name != null)
        msgs = ((InternalEObject)type_name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME, null, msgs);
      if (newType_name != null)
        msgs = ((InternalEObject)newType_name).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME, null, msgs);
      msgs = basicSetType_name(newType_name, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME, newType_name, newType_name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME:
        return basicSetType_name(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME:
        return getType_name();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME:
        setType_name((type_name)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME:
        setType_name((type_name)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ATOMIC_TYPE_SPECIFIER__TYPE_NAME:
        return type_name != null;
    }
    return super.eIsSet(featureID);
  }

} //atomic_type_specifierImpl
