/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.additive_expression;
import org.xtext.example.mydsl.myDsl.shift_expression_complement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>shift expression complement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.shift_expression_complementImpl#getSleft <em>Sleft</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.shift_expression_complementImpl#getAdditive_expression <em>Additive expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.shift_expression_complementImpl#getSright <em>Sright</em>}</li>
 * </ul>
 *
 * @generated
 */
public class shift_expression_complementImpl extends MinimalEObjectImpl.Container implements shift_expression_complement
{
  /**
   * The default value of the '{@link #getSleft() <em>Sleft</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSleft()
   * @generated
   * @ordered
   */
  protected static final String SLEFT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSleft() <em>Sleft</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSleft()
   * @generated
   * @ordered
   */
  protected String sleft = SLEFT_EDEFAULT;

  /**
   * The cached value of the '{@link #getAdditive_expression() <em>Additive expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdditive_expression()
   * @generated
   * @ordered
   */
  protected additive_expression additive_expression;

  /**
   * The default value of the '{@link #getSright() <em>Sright</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSright()
   * @generated
   * @ordered
   */
  protected static final String SRIGHT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSright() <em>Sright</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSright()
   * @generated
   * @ordered
   */
  protected String sright = SRIGHT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected shift_expression_complementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SHIFT_EXPRESSION_COMPLEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSleft()
  {
    return sleft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSleft(String newSleft)
  {
    String oldSleft = sleft;
    sleft = newSleft;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SLEFT, oldSleft, sleft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public additive_expression getAdditive_expression()
  {
    return additive_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAdditive_expression(additive_expression newAdditive_expression, NotificationChain msgs)
  {
    additive_expression oldAdditive_expression = additive_expression;
    additive_expression = newAdditive_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION, oldAdditive_expression, newAdditive_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAdditive_expression(additive_expression newAdditive_expression)
  {
    if (newAdditive_expression != additive_expression)
    {
      NotificationChain msgs = null;
      if (additive_expression != null)
        msgs = ((InternalEObject)additive_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION, null, msgs);
      if (newAdditive_expression != null)
        msgs = ((InternalEObject)newAdditive_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION, null, msgs);
      msgs = basicSetAdditive_expression(newAdditive_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION, newAdditive_expression, newAdditive_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSright()
  {
    return sright;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSright(String newSright)
  {
    String oldSright = sright;
    sright = newSright;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SRIGHT, oldSright, sright));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION:
        return basicSetAdditive_expression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SLEFT:
        return getSleft();
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION:
        return getAdditive_expression();
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SRIGHT:
        return getSright();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SLEFT:
        setSleft((String)newValue);
        return;
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION:
        setAdditive_expression((additive_expression)newValue);
        return;
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SRIGHT:
        setSright((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SLEFT:
        setSleft(SLEFT_EDEFAULT);
        return;
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION:
        setAdditive_expression((additive_expression)null);
        return;
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SRIGHT:
        setSright(SRIGHT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SLEFT:
        return SLEFT_EDEFAULT == null ? sleft != null : !SLEFT_EDEFAULT.equals(sleft);
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__ADDITIVE_EXPRESSION:
        return additive_expression != null;
      case MyDslPackage.SHIFT_EXPRESSION_COMPLEMENT__SRIGHT:
        return SRIGHT_EDEFAULT == null ? sright != null : !SRIGHT_EDEFAULT.equals(sright);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (sleft: ");
    result.append(sleft);
    result.append(", sright: ");
    result.append(sright);
    result.append(')');
    return result.toString();
  }

} //shift_expression_complementImpl
