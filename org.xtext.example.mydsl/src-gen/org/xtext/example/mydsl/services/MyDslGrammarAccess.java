/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsTranslation_unitParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=translation_unit;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=translation_unit
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//translation_unit
		public RuleCall getGreetingsTranslation_unitParserRuleCall_0() { return cGreetingsTranslation_unitParserRuleCall_0; }
	}
	public class Translation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.translation_unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternal_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExternal_declarationExternal_declarationParserRuleCall_0_0 = (RuleCall)cExternal_declarationAssignment_0.eContents().get(0);
		private final Assignment cTranslation_unit_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTranslation_unit_linhaTranslation_unit_linhaParserRuleCall_1_0 = (RuleCall)cTranslation_unit_linhaAssignment_1.eContents().get(0);
		
		//translation_unit:
		//	external_declaration=external_declaration translation_unit_linha=translation_unit_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//external_declaration=external_declaration translation_unit_linha=translation_unit_linha
		public Group getGroup() { return cGroup; }
		
		//external_declaration=external_declaration
		public Assignment getExternal_declarationAssignment_0() { return cExternal_declarationAssignment_0; }
		
		//external_declaration
		public RuleCall getExternal_declarationExternal_declarationParserRuleCall_0_0() { return cExternal_declarationExternal_declarationParserRuleCall_0_0; }
		
		//translation_unit_linha=translation_unit_linha
		public Assignment getTranslation_unit_linhaAssignment_1() { return cTranslation_unit_linhaAssignment_1; }
		
		//translation_unit_linha
		public RuleCall getTranslation_unit_linhaTranslation_unit_linhaParserRuleCall_1_0() { return cTranslation_unit_linhaTranslation_unit_linhaParserRuleCall_1_0; }
	}
	public class External_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.external_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunction_definitioAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunction_definitioFunction_definitionParserRuleCall_0_0 = (RuleCall)cFunction_definitioAssignment_0.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationAssignment_1.eContents().get(0);
		
		//external_declaration:
		//	function_definitio=function_definition
		//	| declaration=declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//function_definitio=function_definition | declaration=declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function_definitio=function_definition
		public Assignment getFunction_definitioAssignment_0() { return cFunction_definitioAssignment_0; }
		
		//function_definition
		public RuleCall getFunction_definitioFunction_definitionParserRuleCall_0_0() { return cFunction_definitioFunction_definitionParserRuleCall_0_0; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0() { return cDeclarationDeclarationParserRuleCall_1_0; }
	}
	public class Declaration_specifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_specifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStorage_class_specifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0 = (RuleCall)cStorage_class_specifierAssignment_0_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_1_0 = (RuleCall)cDeclaration_specifiersAssignment_0_1.eContents().get(0);
		private final Assignment cStorage_class_specifierAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStorage_class_specifierStorage_class_specifierParserRuleCall_1_0 = (RuleCall)cStorage_class_specifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cType_specifierAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cType_specifierType_specifierParserRuleCall_2_0_0 = (RuleCall)cType_specifierAssignment_2_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_1_0 = (RuleCall)cDeclaration_specifiersAssignment_2_1.eContents().get(0);
		private final Assignment cType_specifierAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cType_specifierType_specifierParserRuleCall_3_0 = (RuleCall)cType_specifierAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cType_qualifierAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_4_0_0 = (RuleCall)cType_qualifierAssignment_4_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_4_1_0 = (RuleCall)cDeclaration_specifiersAssignment_4_1.eContents().get(0);
		private final Assignment cType_qualifierAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_5_0 = (RuleCall)cType_qualifierAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cFunction_specifierAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cFunction_specifierFunction_specifierParserRuleCall_6_0_0 = (RuleCall)cFunction_specifierAssignment_6_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_6_1_0 = (RuleCall)cDeclaration_specifiersAssignment_6_1.eContents().get(0);
		private final Assignment cFunction_specifierAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cFunction_specifierFunction_specifierParserRuleCall_7_0 = (RuleCall)cFunction_specifierAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cAlignment_specifierAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cAlignment_specifierAlignment_specifierParserRuleCall_8_0_0 = (RuleCall)cAlignment_specifierAssignment_8_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_8_1_0 = (RuleCall)cDeclaration_specifiersAssignment_8_1.eContents().get(0);
		private final Assignment cAlignment_specifierAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cAlignment_specifierAlignment_specifierParserRuleCall_9_0 = (RuleCall)cAlignment_specifierAssignment_9.eContents().get(0);
		
		//declaration_specifiers:
		//	storage_class_specifier=storage_class_specifier declaration_specifiers+=declaration_specifiers
		//	| storage_class_specifier=storage_class_specifier
		//	| type_specifier=type_specifier declaration_specifiers+=declaration_specifiers
		//	| type_specifier=type_specifier
		//	| type_qualifier=type_qualifier declaration_specifiers+=declaration_specifiers
		//	| type_qualifier=type_qualifier
		//	| function_specifier=function_specifier declaration_specifiers+=declaration_specifiers
		//	| function_specifier=function_specifier
		//	| alignment_specifier=alignment_specifier declaration_specifiers+=declaration_specifiers
		//	| alignment_specifier=alignment_specifier;
		@Override public ParserRule getRule() { return rule; }
		
		//storage_class_specifier=storage_class_specifier declaration_specifiers+=declaration_specifiers |
		//storage_class_specifier=storage_class_specifier | type_specifier=type_specifier
		//declaration_specifiers+=declaration_specifiers | type_specifier=type_specifier | type_qualifier=type_qualifier
		//declaration_specifiers+=declaration_specifiers | type_qualifier=type_qualifier | function_specifier=function_specifier
		//declaration_specifiers+=declaration_specifiers | function_specifier=function_specifier |
		//alignment_specifier=alignment_specifier declaration_specifiers+=declaration_specifiers |
		//alignment_specifier=alignment_specifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//storage_class_specifier=storage_class_specifier declaration_specifiers+=declaration_specifiers
		public Group getGroup_0() { return cGroup_0; }
		
		//storage_class_specifier=storage_class_specifier
		public Assignment getStorage_class_specifierAssignment_0_0() { return cStorage_class_specifierAssignment_0_0; }
		
		//storage_class_specifier
		public RuleCall getStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0() { return cStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_1() { return cDeclaration_specifiersAssignment_0_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_1_0; }
		
		//storage_class_specifier=storage_class_specifier
		public Assignment getStorage_class_specifierAssignment_1() { return cStorage_class_specifierAssignment_1; }
		
		//storage_class_specifier
		public RuleCall getStorage_class_specifierStorage_class_specifierParserRuleCall_1_0() { return cStorage_class_specifierStorage_class_specifierParserRuleCall_1_0; }
		
		//type_specifier=type_specifier declaration_specifiers+=declaration_specifiers
		public Group getGroup_2() { return cGroup_2; }
		
		//type_specifier=type_specifier
		public Assignment getType_specifierAssignment_2_0() { return cType_specifierAssignment_2_0; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_2_0_0() { return cType_specifierType_specifierParserRuleCall_2_0_0; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_2_1() { return cDeclaration_specifiersAssignment_2_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_1_0; }
		
		//type_specifier=type_specifier
		public Assignment getType_specifierAssignment_3() { return cType_specifierAssignment_3; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_3_0() { return cType_specifierType_specifierParserRuleCall_3_0; }
		
		//type_qualifier=type_qualifier declaration_specifiers+=declaration_specifiers
		public Group getGroup_4() { return cGroup_4; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_4_0() { return cType_qualifierAssignment_4_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_4_0_0() { return cType_qualifierType_qualifierParserRuleCall_4_0_0; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_4_1() { return cDeclaration_specifiersAssignment_4_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_4_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_4_1_0; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_5() { return cType_qualifierAssignment_5; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_5_0() { return cType_qualifierType_qualifierParserRuleCall_5_0; }
		
		//function_specifier=function_specifier declaration_specifiers+=declaration_specifiers
		public Group getGroup_6() { return cGroup_6; }
		
		//function_specifier=function_specifier
		public Assignment getFunction_specifierAssignment_6_0() { return cFunction_specifierAssignment_6_0; }
		
		//function_specifier
		public RuleCall getFunction_specifierFunction_specifierParserRuleCall_6_0_0() { return cFunction_specifierFunction_specifierParserRuleCall_6_0_0; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_6_1() { return cDeclaration_specifiersAssignment_6_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_6_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_6_1_0; }
		
		//function_specifier=function_specifier
		public Assignment getFunction_specifierAssignment_7() { return cFunction_specifierAssignment_7; }
		
		//function_specifier
		public RuleCall getFunction_specifierFunction_specifierParserRuleCall_7_0() { return cFunction_specifierFunction_specifierParserRuleCall_7_0; }
		
		//alignment_specifier=alignment_specifier declaration_specifiers+=declaration_specifiers
		public Group getGroup_8() { return cGroup_8; }
		
		//alignment_specifier=alignment_specifier
		public Assignment getAlignment_specifierAssignment_8_0() { return cAlignment_specifierAssignment_8_0; }
		
		//alignment_specifier
		public RuleCall getAlignment_specifierAlignment_specifierParserRuleCall_8_0_0() { return cAlignment_specifierAlignment_specifierParserRuleCall_8_0_0; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_8_1() { return cDeclaration_specifiersAssignment_8_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_8_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_8_1_0; }
		
		//alignment_specifier=alignment_specifier
		public Assignment getAlignment_specifierAssignment_9() { return cAlignment_specifierAssignment_9; }
		
		//alignment_specifier
		public RuleCall getAlignment_specifierAlignment_specifierParserRuleCall_9_0() { return cAlignment_specifierAlignment_specifierParserRuleCall_9_0; }
	}
	public class Function_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.function_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cInlineKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword c_NoreturnKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//function_specifier:
		//	'inline'
		//	| '_Noreturn';
		@Override public ParserRule getRule() { return rule; }
		
		//'inline' | '_Noreturn'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'inline'
		public Keyword getInlineKeyword_0() { return cInlineKeyword_0; }
		
		//'_Noreturn'
		public Keyword get_NoreturnKeyword_1() { return c_NoreturnKeyword_1; }
	}
	public class Alignment_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.alignment_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword c_AlignasKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cType_nameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cType_nameType_nameParserRuleCall_0_2_0 = (RuleCall)cType_nameAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword c_AlignasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstant_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_1_2_0 = (RuleCall)cConstant_expressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//alignment_specifier:
		//	'_Alignas' '(' type_name=type_name ')'
		//	| '_Alignas' '(' constant_expression=constant_expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'_Alignas' '(' type_name=type_name ')' | '_Alignas' '(' constant_expression=constant_expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'_Alignas' '(' type_name=type_name ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'_Alignas'
		public Keyword get_AlignasKeyword_0_0() { return c_AlignasKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_0_2() { return cType_nameAssignment_0_2; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_0_2_0() { return cType_nameType_nameParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'_Alignas' '(' constant_expression=constant_expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'_Alignas'
		public Keyword get_AlignasKeyword_1_0() { return c_AlignasKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_1_2() { return cConstant_expressionAssignment_1_2; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_1_2_0() { return cConstant_expressionConstant_expressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class Type_qualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNamezAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNamezConstKeyword_0_0 = (Keyword)cNamezAssignment_0.eContents().get(0);
		private final Assignment cNamezAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNamezRestrictKeyword_1_0 = (Keyword)cNamezAssignment_1.eContents().get(0);
		private final Assignment cNamezAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNamezVolatileKeyword_2_0 = (Keyword)cNamezAssignment_2.eContents().get(0);
		private final Assignment cNamezAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cNamez_AtomicKeyword_3_0 = (Keyword)cNamezAssignment_3.eContents().get(0);
		
		//type_qualifier:
		//	namez='const'
		//	| namez='restrict'
		//	| namez='volatile'
		//	| namez='_Atomic';
		@Override public ParserRule getRule() { return rule; }
		
		//namez='const' | namez='restrict' | namez='volatile' | namez='_Atomic'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//namez='const'
		public Assignment getNamezAssignment_0() { return cNamezAssignment_0; }
		
		//'const'
		public Keyword getNamezConstKeyword_0_0() { return cNamezConstKeyword_0_0; }
		
		//namez='restrict'
		public Assignment getNamezAssignment_1() { return cNamezAssignment_1; }
		
		//'restrict'
		public Keyword getNamezRestrictKeyword_1_0() { return cNamezRestrictKeyword_1_0; }
		
		//namez='volatile'
		public Assignment getNamezAssignment_2() { return cNamezAssignment_2; }
		
		//'volatile'
		public Keyword getNamezVolatileKeyword_2_0() { return cNamezVolatileKeyword_2_0; }
		
		//namez='_Atomic'
		public Assignment getNamezAssignment_3() { return cNamezAssignment_3; }
		
		//'_Atomic'
		public Keyword getNamez_AtomicKeyword_3_0() { return cNamez_AtomicKeyword_3_0; }
	}
	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cType_name_strAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cType_name_strVoidKeyword_0_0 = (Keyword)cType_name_strAssignment_0.eContents().get(0);
		private final Assignment cType_name_strAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cType_name_strCharKeyword_1_0 = (Keyword)cType_name_strAssignment_1.eContents().get(0);
		private final Assignment cType_name_strAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cType_name_strShortKeyword_2_0 = (Keyword)cType_name_strAssignment_2.eContents().get(0);
		private final Assignment cType_name_strAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cType_name_strIntKeyword_3_0 = (Keyword)cType_name_strAssignment_3.eContents().get(0);
		private final Assignment cType_name_strAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cType_name_strLongKeyword_4_0 = (Keyword)cType_name_strAssignment_4.eContents().get(0);
		private final Assignment cType_name_strAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cType_name_strFloatKeyword_5_0 = (Keyword)cType_name_strAssignment_5.eContents().get(0);
		private final Assignment cType_name_strAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cType_name_strDoubleKeyword_6_0 = (Keyword)cType_name_strAssignment_6.eContents().get(0);
		private final Assignment cType_name_strAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cType_name_strSignedKeyword_7_0 = (Keyword)cType_name_strAssignment_7.eContents().get(0);
		private final Assignment cType_name_strAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cType_name_strUnsignedKeyword_8_0 = (Keyword)cType_name_strAssignment_8.eContents().get(0);
		private final Assignment cType_name_strAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cType_name_strBoolKeyword_9_0 = (Keyword)cType_name_strAssignment_9.eContents().get(0);
		private final Assignment cType_name_strAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cType_name_str_ComplexKeyword_10_0 = (Keyword)cType_name_strAssignment_10.eContents().get(0);
		private final Assignment cType_name_strAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cType_name_str_ImaginaryKeyword_11_0 = (Keyword)cType_name_strAssignment_11.eContents().get(0);
		private final Assignment cAtomic_type_specifierAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cAtomic_type_specifierAtomic_type_specifierParserRuleCall_12_0 = (RuleCall)cAtomic_type_specifierAssignment_12.eContents().get(0);
		private final Assignment cStruct_or_union_specifierAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cStruct_or_union_specifierStruct_or_union_specifierParserRuleCall_13_0 = (RuleCall)cStruct_or_union_specifierAssignment_13.eContents().get(0);
		private final Assignment cEnum_specifierAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cEnum_specifierEnum_specifierParserRuleCall_14_0 = (RuleCall)cEnum_specifierAssignment_14.eContents().get(0);
		private final Assignment cType_name_strAssignment_15 = (Assignment)cAlternatives.eContents().get(15);
		private final Keyword cType_name_strTypedefKeyword_15_0 = (Keyword)cType_name_strAssignment_15.eContents().get(0);
		
		//type_specifier:
		//	type_name_str='void'
		//	| type_name_str='char'
		//	| type_name_str='short'
		//	| type_name_str='int'
		//	| type_name_str='long'
		//	| type_name_str='float'
		//	| type_name_str='double'
		//	| type_name_str='signed'
		//	| type_name_str='unsigned'
		//	| type_name_str='bool'
		//	| type_name_str='_Complex'
		//	| type_name_str='_Imaginary' /* non-mandated extension */
		//	| atomic_type_specifier=atomic_type_specifier
		//	| struct_or_union_specifier=struct_or_union_specifier
		//	| enum_specifier=enum_specifier
		//	| type_name_str='typedef' /* after it has been defined as such */;
		@Override public ParserRule getRule() { return rule; }
		
		//type_name_str='void' | type_name_str='char' | type_name_str='short' | type_name_str='int' | type_name_str='long' |
		//type_name_str='float' | type_name_str='double' | type_name_str='signed' | type_name_str='unsigned' |
		//type_name_str='bool' | type_name_str='_Complex' | type_name_str='_Imaginary' /* non-mandated extension */ |
		//atomic_type_specifier=atomic_type_specifier | struct_or_union_specifier=struct_or_union_specifier |
		//enum_specifier=enum_specifier | type_name_str='typedef'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type_name_str='void'
		public Assignment getType_name_strAssignment_0() { return cType_name_strAssignment_0; }
		
		//'void'
		public Keyword getType_name_strVoidKeyword_0_0() { return cType_name_strVoidKeyword_0_0; }
		
		//type_name_str='char'
		public Assignment getType_name_strAssignment_1() { return cType_name_strAssignment_1; }
		
		//'char'
		public Keyword getType_name_strCharKeyword_1_0() { return cType_name_strCharKeyword_1_0; }
		
		//type_name_str='short'
		public Assignment getType_name_strAssignment_2() { return cType_name_strAssignment_2; }
		
		//'short'
		public Keyword getType_name_strShortKeyword_2_0() { return cType_name_strShortKeyword_2_0; }
		
		//type_name_str='int'
		public Assignment getType_name_strAssignment_3() { return cType_name_strAssignment_3; }
		
		//'int'
		public Keyword getType_name_strIntKeyword_3_0() { return cType_name_strIntKeyword_3_0; }
		
		//type_name_str='long'
		public Assignment getType_name_strAssignment_4() { return cType_name_strAssignment_4; }
		
		//'long'
		public Keyword getType_name_strLongKeyword_4_0() { return cType_name_strLongKeyword_4_0; }
		
		//type_name_str='float'
		public Assignment getType_name_strAssignment_5() { return cType_name_strAssignment_5; }
		
		//'float'
		public Keyword getType_name_strFloatKeyword_5_0() { return cType_name_strFloatKeyword_5_0; }
		
		//type_name_str='double'
		public Assignment getType_name_strAssignment_6() { return cType_name_strAssignment_6; }
		
		//'double'
		public Keyword getType_name_strDoubleKeyword_6_0() { return cType_name_strDoubleKeyword_6_0; }
		
		//type_name_str='signed'
		public Assignment getType_name_strAssignment_7() { return cType_name_strAssignment_7; }
		
		//'signed'
		public Keyword getType_name_strSignedKeyword_7_0() { return cType_name_strSignedKeyword_7_0; }
		
		//type_name_str='unsigned'
		public Assignment getType_name_strAssignment_8() { return cType_name_strAssignment_8; }
		
		//'unsigned'
		public Keyword getType_name_strUnsignedKeyword_8_0() { return cType_name_strUnsignedKeyword_8_0; }
		
		//type_name_str='bool'
		public Assignment getType_name_strAssignment_9() { return cType_name_strAssignment_9; }
		
		//'bool'
		public Keyword getType_name_strBoolKeyword_9_0() { return cType_name_strBoolKeyword_9_0; }
		
		//type_name_str='_Complex'
		public Assignment getType_name_strAssignment_10() { return cType_name_strAssignment_10; }
		
		//'_Complex'
		public Keyword getType_name_str_ComplexKeyword_10_0() { return cType_name_str_ComplexKeyword_10_0; }
		
		//type_name_str='_Imaginary'
		public Assignment getType_name_strAssignment_11() { return cType_name_strAssignment_11; }
		
		//'_Imaginary'
		public Keyword getType_name_str_ImaginaryKeyword_11_0() { return cType_name_str_ImaginaryKeyword_11_0; }
		
		//atomic_type_specifier=atomic_type_specifier
		public Assignment getAtomic_type_specifierAssignment_12() { return cAtomic_type_specifierAssignment_12; }
		
		//atomic_type_specifier
		public RuleCall getAtomic_type_specifierAtomic_type_specifierParserRuleCall_12_0() { return cAtomic_type_specifierAtomic_type_specifierParserRuleCall_12_0; }
		
		//struct_or_union_specifier=struct_or_union_specifier
		public Assignment getStruct_or_union_specifierAssignment_13() { return cStruct_or_union_specifierAssignment_13; }
		
		//struct_or_union_specifier
		public RuleCall getStruct_or_union_specifierStruct_or_union_specifierParserRuleCall_13_0() { return cStruct_or_union_specifierStruct_or_union_specifierParserRuleCall_13_0; }
		
		//enum_specifier=enum_specifier
		public Assignment getEnum_specifierAssignment_14() { return cEnum_specifierAssignment_14; }
		
		//enum_specifier
		public RuleCall getEnum_specifierEnum_specifierParserRuleCall_14_0() { return cEnum_specifierEnum_specifierParserRuleCall_14_0; }
		
		//type_name_str='typedef'
		public Assignment getType_name_strAssignment_15() { return cType_name_strAssignment_15; }
		
		//'typedef'
		public Keyword getType_name_strTypedefKeyword_15_0() { return cType_name_strTypedefKeyword_15_0; }
	}
	public class Enum_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enum_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEnumKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEnumerator_listAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEnumerator_listEnumerator_listParserRuleCall_0_2_0 = (RuleCall)cEnumerator_listAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEnumKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEnumerator_listAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEnumerator_listEnumerator_listParserRuleCall_1_2_0 = (RuleCall)cEnumerator_listAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cEnumKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_2_1_0 = (RuleCall)cIdentifierAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cEnumerator_listAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cEnumerator_listEnumerator_listParserRuleCall_2_3_0 = (RuleCall)cEnumerator_listAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cEnumKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdentifierAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_3_1_0 = (RuleCall)cIdentifierAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cEnumerator_listAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cEnumerator_listEnumerator_listParserRuleCall_3_3_0 = (RuleCall)cEnumerator_listAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cEnumKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIdentifierAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_4_1_0 = (RuleCall)cIdentifierAssignment_4_1.eContents().get(0);
		
		//enum_specifier:
		//	'enum' '{' enumerator_list=enumerator_list '}'
		//	| 'enum' '{' enumerator_list=enumerator_list ',' '}'
		//	| 'enum' identifier=IDz '{' enumerator_list=enumerator_list '}'
		//	| 'enum' identifier=IDz '{' enumerator_list=enumerator_list ',' '}'
		//	| 'enum' identifier=IDz;
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' '{' enumerator_list=enumerator_list '}' | 'enum' '{' enumerator_list=enumerator_list ',' '}' | 'enum'
		//identifier=IDz '{' enumerator_list=enumerator_list '}' | 'enum' identifier=IDz '{' enumerator_list=enumerator_list ','
		//'}' | 'enum' identifier=IDz
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'enum' '{' enumerator_list=enumerator_list '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'enum'
		public Keyword getEnumKeyword_0_0() { return cEnumKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//enumerator_list=enumerator_list
		public Assignment getEnumerator_listAssignment_0_2() { return cEnumerator_listAssignment_0_2; }
		
		//enumerator_list
		public RuleCall getEnumerator_listEnumerator_listParserRuleCall_0_2_0() { return cEnumerator_listEnumerator_listParserRuleCall_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//'enum' '{' enumerator_list=enumerator_list ',' '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'enum'
		public Keyword getEnumKeyword_1_0() { return cEnumKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//enumerator_list=enumerator_list
		public Assignment getEnumerator_listAssignment_1_2() { return cEnumerator_listAssignment_1_2; }
		
		//enumerator_list
		public RuleCall getEnumerator_listEnumerator_listParserRuleCall_1_2_0() { return cEnumerator_listEnumerator_listParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
		
		//'enum' identifier=IDz '{' enumerator_list=enumerator_list '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//'enum'
		public Keyword getEnumKeyword_2_0() { return cEnumKeyword_2_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_2_1() { return cIdentifierAssignment_2_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_2_1_0() { return cIdentifierIDzTerminalRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2() { return cLeftCurlyBracketKeyword_2_2; }
		
		//enumerator_list=enumerator_list
		public Assignment getEnumerator_listAssignment_2_3() { return cEnumerator_listAssignment_2_3; }
		
		//enumerator_list
		public RuleCall getEnumerator_listEnumerator_listParserRuleCall_2_3_0() { return cEnumerator_listEnumerator_listParserRuleCall_2_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'enum' identifier=IDz '{' enumerator_list=enumerator_list ',' '}'
		public Group getGroup_3() { return cGroup_3; }
		
		//'enum'
		public Keyword getEnumKeyword_3_0() { return cEnumKeyword_3_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_3_1() { return cIdentifierAssignment_3_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_3_1_0() { return cIdentifierIDzTerminalRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_2() { return cLeftCurlyBracketKeyword_3_2; }
		
		//enumerator_list=enumerator_list
		public Assignment getEnumerator_listAssignment_3_3() { return cEnumerator_listAssignment_3_3; }
		
		//enumerator_list
		public RuleCall getEnumerator_listEnumerator_listParserRuleCall_3_3_0() { return cEnumerator_listEnumerator_listParserRuleCall_3_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_5() { return cRightCurlyBracketKeyword_3_5; }
		
		//'enum' identifier=IDz
		public Group getGroup_4() { return cGroup_4; }
		
		//'enum'
		public Keyword getEnumKeyword_4_0() { return cEnumKeyword_4_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_4_1() { return cIdentifierAssignment_4_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_4_1_0() { return cIdentifierIDzTerminalRuleCall_4_1_0; }
	}
	public class Enumerator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enumerator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumaratorEnumeratorParserRuleCall_0_0 = (RuleCall)cEnumaratorAssignment_0.eContents().get(0);
		private final Assignment cEnumerator_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumerator_list_linhaEnumerator_list_linhaParserRuleCall_1_0 = (RuleCall)cEnumerator_list_linhaAssignment_1.eContents().get(0);
		
		//enumerator_list:
		//	enumarator=enumerator enumerator_list_linha=enumerator_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//enumarator=enumerator enumerator_list_linha=enumerator_list_linha
		public Group getGroup() { return cGroup; }
		
		//enumarator=enumerator
		public Assignment getEnumaratorAssignment_0() { return cEnumaratorAssignment_0; }
		
		//enumerator
		public RuleCall getEnumaratorEnumeratorParserRuleCall_0_0() { return cEnumaratorEnumeratorParserRuleCall_0_0; }
		
		//enumerator_list_linha=enumerator_list_linha
		public Assignment getEnumerator_list_linhaAssignment_1() { return cEnumerator_list_linhaAssignment_1; }
		
		//enumerator_list_linha
		public RuleCall getEnumerator_list_linhaEnumerator_list_linhaParserRuleCall_1_0() { return cEnumerator_list_linhaEnumerator_list_linhaParserRuleCall_1_0; }
	}
	public class Enumerator_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enumerator_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumeratorListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEnumeratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnumeratorEnumeratorParserRuleCall_1_1_0 = (RuleCall)cEnumeratorAssignment_1_1.eContents().get(0);
		private final Assignment cEnumerator_list_linhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEnumerator_list_linhaEnumerator_list_linhaParserRuleCall_1_2_0 = (RuleCall)cEnumerator_list_linhaAssignment_1_2.eContents().get(0);
		
		//enumerator_list_linha:
		//	{EnumeratorListLinhaAction} (',' enumerator=enumerator enumerator_list_linha=enumerator_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumeratorListLinhaAction} (',' enumerator=enumerator enumerator_list_linha=enumerator_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{EnumeratorListLinhaAction}
		public Action getEnumeratorListLinhaActionAction_0() { return cEnumeratorListLinhaActionAction_0; }
		
		//(',' enumerator=enumerator enumerator_list_linha=enumerator_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//enumerator=enumerator
		public Assignment getEnumeratorAssignment_1_1() { return cEnumeratorAssignment_1_1; }
		
		//enumerator
		public RuleCall getEnumeratorEnumeratorParserRuleCall_1_1_0() { return cEnumeratorEnumeratorParserRuleCall_1_1_0; }
		
		//enumerator_list_linha=enumerator_list_linha
		public Assignment getEnumerator_list_linhaAssignment_1_2() { return cEnumerator_list_linhaAssignment_1_2; }
		
		//enumerator_list_linha
		public RuleCall getEnumerator_list_linhaEnumerator_list_linhaParserRuleCall_1_2_0() { return cEnumerator_list_linhaEnumerator_list_linhaParserRuleCall_1_2_0; }
	}
	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enumerator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEnumeration_constantAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cEnumeration_constantEnumeration_constantParserRuleCall_0_0_0 = (RuleCall)cEnumeration_constantAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConditional_expressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConditional_expressionConstant_expressionParserRuleCall_0_2_0 = (RuleCall)cConditional_expressionAssignment_0_2.eContents().get(0);
		private final Assignment cEnumeration_constantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEnumeration_constantEnumeration_constantParserRuleCall_1_0 = (RuleCall)cEnumeration_constantAssignment_1.eContents().get(0);
		
		//enumerator /* identifiers must be flagged as ENUMERATION_CONSTANT */:
		//	enumeration_constant=enumeration_constant '=' conditional_expression=constant_expression
		//	| enumeration_constant=enumeration_constant;
		@Override public ParserRule getRule() { return rule; }
		
		//enumeration_constant=enumeration_constant '=' conditional_expression=constant_expression |
		//enumeration_constant=enumeration_constant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//enumeration_constant=enumeration_constant '=' conditional_expression=constant_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//enumeration_constant=enumeration_constant
		public Assignment getEnumeration_constantAssignment_0_0() { return cEnumeration_constantAssignment_0_0; }
		
		//enumeration_constant
		public RuleCall getEnumeration_constantEnumeration_constantParserRuleCall_0_0_0() { return cEnumeration_constantEnumeration_constantParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//conditional_expression=constant_expression
		public Assignment getConditional_expressionAssignment_0_2() { return cConditional_expressionAssignment_0_2; }
		
		//constant_expression
		public RuleCall getConditional_expressionConstant_expressionParserRuleCall_0_2_0() { return cConditional_expressionConstant_expressionParserRuleCall_0_2_0; }
		
		//enumeration_constant=enumeration_constant
		public Assignment getEnumeration_constantAssignment_1() { return cEnumeration_constantAssignment_1; }
		
		//enumeration_constant
		public RuleCall getEnumeration_constantEnumeration_constantParserRuleCall_1_0() { return cEnumeration_constantEnumeration_constantParserRuleCall_1_0; }
	}
	public class Atomic_type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.atomic_type_specifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_AtomicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cType_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cType_nameType_nameParserRuleCall_2_0 = (RuleCall)cType_nameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//atomic_type_specifier:
		//	'_Atomic' '(' type_name=type_name ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'_Atomic' '(' type_name=type_name ')'
		public Group getGroup() { return cGroup; }
		
		//'_Atomic'
		public Keyword get_AtomicKeyword_0() { return c_AtomicKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_2() { return cType_nameAssignment_2; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_2_0() { return cType_nameType_nameParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class Struct_or_union_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_or_union_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStruct_or_unionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStruct_or_unionStruct_or_unionParserRuleCall_0_0_0 = (RuleCall)cStruct_or_unionAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStruct_declaration_listAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0 = (RuleCall)cStruct_declaration_listAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStruct_or_unionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStruct_or_unionStruct_or_unionParserRuleCall_1_0_0 = (RuleCall)cStruct_or_unionAssignment_1_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		private final Assignment cStruct_or_union_specifier_complementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStruct_or_union_specifier_complementStruct_or_union_specifier_complementParserRuleCall_1_2_0 = (RuleCall)cStruct_or_union_specifier_complementAssignment_1_2.eContents().get(0);
		
		//struct_or_union_specifier:
		//	struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}'
		//	| struct_or_union=struct_or_union identifier=IDz
		//	struct_or_union_specifier_complement=struct_or_union_specifier_complement;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}' |
		//struct_or_union=struct_or_union identifier=IDz
		//struct_or_union_specifier_complement=struct_or_union_specifier_complement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//struct_or_union=struct_or_union
		public Assignment getStruct_or_unionAssignment_0_0() { return cStruct_or_unionAssignment_0_0; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionStruct_or_unionParserRuleCall_0_0_0() { return cStruct_or_unionStruct_or_unionParserRuleCall_0_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//struct_declaration_list=struct_declaration_list
		public Assignment getStruct_declaration_listAssignment_0_2() { return cStruct_declaration_listAssignment_0_2; }
		
		//struct_declaration_list
		public RuleCall getStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0() { return cStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//struct_or_union=struct_or_union identifier=IDz struct_or_union_specifier_complement=struct_or_union_specifier_complement
		public Group getGroup_1() { return cGroup_1; }
		
		//struct_or_union=struct_or_union
		public Assignment getStruct_or_unionAssignment_1_0() { return cStruct_or_unionAssignment_1_0; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionStruct_or_unionParserRuleCall_1_0_0() { return cStruct_or_unionStruct_or_unionParserRuleCall_1_0_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_1_1_0() { return cIdentifierIDzTerminalRuleCall_1_1_0; }
		
		//struct_or_union_specifier_complement=struct_or_union_specifier_complement
		public Assignment getStruct_or_union_specifier_complementAssignment_1_2() { return cStruct_or_union_specifier_complementAssignment_1_2; }
		
		//struct_or_union_specifier_complement
		public RuleCall getStruct_or_union_specifier_complementStruct_or_union_specifier_complementParserRuleCall_1_2_0() { return cStruct_or_union_specifier_complementStruct_or_union_specifier_complementParserRuleCall_1_2_0; }
	}
	public class Struct_or_unionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_or_union");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cUnionKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//struct_or_union:
		//	'struct'
		//	| 'union';
		@Override public ParserRule getRule() { return rule; }
		
		//'struct' | 'union'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'struct'
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//'union'
		public Keyword getUnionKeyword_1() { return cUnionKeyword_1; }
	}
	public class Struct_or_union_specifier_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_or_union_specifier_complement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructOrUnionSpecifierComplementActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStruct_declaration_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStruct_declaration_listStruct_declaration_listParserRuleCall_1_1_0 = (RuleCall)cStruct_declaration_listAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//struct_or_union_specifier_complement:
		//	{StructOrUnionSpecifierComplementAction} ('{' struct_declaration_list=struct_declaration_list '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StructOrUnionSpecifierComplementAction} ('{' struct_declaration_list=struct_declaration_list '}')?
		public Group getGroup() { return cGroup; }
		
		//{StructOrUnionSpecifierComplementAction}
		public Action getStructOrUnionSpecifierComplementActionAction_0() { return cStructOrUnionSpecifierComplementActionAction_0; }
		
		//('{' struct_declaration_list=struct_declaration_list '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//struct_declaration_list=struct_declaration_list
		public Assignment getStruct_declaration_listAssignment_1_1() { return cStruct_declaration_listAssignment_1_1; }
		
		//struct_declaration_list
		public RuleCall getStruct_declaration_listStruct_declaration_listParserRuleCall_1_1_0() { return cStruct_declaration_listStruct_declaration_listParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class Struct_declaration_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStruct_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStruct_declarationStruct_declarationParserRuleCall_0_0 = (RuleCall)cStruct_declarationAssignment_0.eContents().get(0);
		private final Assignment cStruct_declaration_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStruct_declaration_list_linhaStruct_declaration_list_linhaParserRuleCall_1_0 = (RuleCall)cStruct_declaration_list_linhaAssignment_1.eContents().get(0);
		
		//struct_declaration_list:
		//	struct_declaration=struct_declaration struct_declaration_list_linha=struct_declaration_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_declaration=struct_declaration struct_declaration_list_linha=struct_declaration_list_linha
		public Group getGroup() { return cGroup; }
		
		//struct_declaration=struct_declaration
		public Assignment getStruct_declarationAssignment_0() { return cStruct_declarationAssignment_0; }
		
		//struct_declaration
		public RuleCall getStruct_declarationStruct_declarationParserRuleCall_0_0() { return cStruct_declarationStruct_declarationParserRuleCall_0_0; }
		
		//struct_declaration_list_linha=struct_declaration_list_linha
		public Assignment getStruct_declaration_list_linhaAssignment_1() { return cStruct_declaration_list_linhaAssignment_1; }
		
		//struct_declaration_list_linha
		public RuleCall getStruct_declaration_list_linhaStruct_declaration_list_linhaParserRuleCall_1_0() { return cStruct_declaration_list_linhaStruct_declaration_list_linhaParserRuleCall_1_0; }
	}
	public class Struct_declaration_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructDeclarationListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStruct_declarationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStruct_declarationStruct_declarationParserRuleCall_1_0_0 = (RuleCall)cStruct_declarationAssignment_1_0.eContents().get(0);
		private final Assignment cStruct_declaration_list_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStruct_declaration_list_linhaStruct_declaration_list_linhaParserRuleCall_1_1_0 = (RuleCall)cStruct_declaration_list_linhaAssignment_1_1.eContents().get(0);
		
		//struct_declaration_list_linha:
		//	{StructDeclarationListLinhaAction} (struct_declaration=struct_declaration
		//	struct_declaration_list_linha=struct_declaration_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StructDeclarationListLinhaAction} (struct_declaration=struct_declaration
		//struct_declaration_list_linha=struct_declaration_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{StructDeclarationListLinhaAction}
		public Action getStructDeclarationListLinhaActionAction_0() { return cStructDeclarationListLinhaActionAction_0; }
		
		//(struct_declaration=struct_declaration struct_declaration_list_linha=struct_declaration_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//struct_declaration=struct_declaration
		public Assignment getStruct_declarationAssignment_1_0() { return cStruct_declarationAssignment_1_0; }
		
		//struct_declaration
		public RuleCall getStruct_declarationStruct_declarationParserRuleCall_1_0_0() { return cStruct_declarationStruct_declarationParserRuleCall_1_0_0; }
		
		//struct_declaration_list_linha=struct_declaration_list_linha
		public Assignment getStruct_declaration_list_linhaAssignment_1_1() { return cStruct_declaration_list_linhaAssignment_1_1; }
		
		//struct_declaration_list_linha
		public RuleCall getStruct_declaration_list_linhaStruct_declaration_list_linhaParserRuleCall_1_1_0() { return cStruct_declaration_list_linhaStruct_declaration_list_linhaParserRuleCall_1_1_0; }
	}
	public class Struct_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0 = (RuleCall)cSpecifier_qualifier_listAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSpecifier_qualifier_listAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0_0 = (RuleCall)cSpecifier_qualifier_listAssignment_1_0.eContents().get(0);
		private final Assignment cStruct_declarator_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0 = (RuleCall)cStruct_declarator_listAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStatic_assert_declarationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0 = (RuleCall)cStatic_assert_declarationAssignment_2.eContents().get(0);
		
		//struct_declaration:
		//	specifier_qualifier_list=specifier_qualifier_list ';' /* for anonymous struct/union */
		//	| specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';'
		//	| static_assert_declaration=static_assert_declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//specifier_qualifier_list=specifier_qualifier_list ';' /* for anonymous struct/union */ |
		//specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';' |
		//static_assert_declaration=static_assert_declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//specifier_qualifier_list=specifier_qualifier_list ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_0_0() { return cSpecifier_qualifier_listAssignment_0_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_1_0() { return cSpecifier_qualifier_listAssignment_1_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0_0; }
		
		//struct_declarator_list=struct_declarator_list
		public Assignment getStruct_declarator_listAssignment_1_1() { return cStruct_declarator_listAssignment_1_1; }
		
		//struct_declarator_list
		public RuleCall getStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0() { return cStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
		
		//static_assert_declaration=static_assert_declaration
		public Assignment getStatic_assert_declarationAssignment_2() { return cStatic_assert_declarationAssignment_2; }
		
		//static_assert_declaration
		public RuleCall getStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0() { return cStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0; }
	}
	public class Struct_declarator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStruct_declaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStruct_declaratorStruct_declaratorParserRuleCall_0_0 = (RuleCall)cStruct_declaratorAssignment_0.eContents().get(0);
		private final Assignment cStruct_declarator_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStruct_declarator_list_linhaStruct_declarator_list_linhaParserRuleCall_1_0 = (RuleCall)cStruct_declarator_list_linhaAssignment_1.eContents().get(0);
		
		//struct_declarator_list:
		//	struct_declarator=struct_declarator struct_declarator_list_linha=struct_declarator_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_declarator=struct_declarator struct_declarator_list_linha=struct_declarator_list_linha
		public Group getGroup() { return cGroup; }
		
		//struct_declarator=struct_declarator
		public Assignment getStruct_declaratorAssignment_0() { return cStruct_declaratorAssignment_0; }
		
		//struct_declarator
		public RuleCall getStruct_declaratorStruct_declaratorParserRuleCall_0_0() { return cStruct_declaratorStruct_declaratorParserRuleCall_0_0; }
		
		//struct_declarator_list_linha=struct_declarator_list_linha
		public Assignment getStruct_declarator_list_linhaAssignment_1() { return cStruct_declarator_list_linhaAssignment_1; }
		
		//struct_declarator_list_linha
		public RuleCall getStruct_declarator_list_linhaStruct_declarator_list_linhaParserRuleCall_1_0() { return cStruct_declarator_list_linhaStruct_declarator_list_linhaParserRuleCall_1_0; }
	}
	public class Struct_declarator_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructDeclaratorListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStruct_declaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStruct_declaratorStruct_declaratorParserRuleCall_1_1_0 = (RuleCall)cStruct_declaratorAssignment_1_1.eContents().get(0);
		private final Assignment cStruct_declarator_list_linhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStruct_declarator_list_linhaStruct_declarator_list_linhaParserRuleCall_1_2_0 = (RuleCall)cStruct_declarator_list_linhaAssignment_1_2.eContents().get(0);
		
		//struct_declarator_list_linha:
		//	{StructDeclaratorListLinhaAction} (',' struct_declarator=struct_declarator
		//	struct_declarator_list_linha=struct_declarator_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StructDeclaratorListLinhaAction} (',' struct_declarator=struct_declarator
		//struct_declarator_list_linha=struct_declarator_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{StructDeclaratorListLinhaAction}
		public Action getStructDeclaratorListLinhaActionAction_0() { return cStructDeclaratorListLinhaActionAction_0; }
		
		//(',' struct_declarator=struct_declarator struct_declarator_list_linha=struct_declarator_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//struct_declarator=struct_declarator
		public Assignment getStruct_declaratorAssignment_1_1() { return cStruct_declaratorAssignment_1_1; }
		
		//struct_declarator
		public RuleCall getStruct_declaratorStruct_declaratorParserRuleCall_1_1_0() { return cStruct_declaratorStruct_declaratorParserRuleCall_1_1_0; }
		
		//struct_declarator_list_linha=struct_declarator_list_linha
		public Assignment getStruct_declarator_list_linhaAssignment_1_2() { return cStruct_declarator_list_linhaAssignment_1_2; }
		
		//struct_declarator_list_linha
		public RuleCall getStruct_declarator_list_linhaStruct_declarator_list_linhaParserRuleCall_1_2_0() { return cStruct_declarator_list_linhaStruct_declarator_list_linhaParserRuleCall_1_2_0; }
	}
	public class Struct_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConstant_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_0_1_0 = (RuleCall)cConstant_expressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaratorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0_0 = (RuleCall)cDeclaratorAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstant_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_1_2_0 = (RuleCall)cConstant_expressionAssignment_1_2.eContents().get(0);
		private final Assignment cDeclaratorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_2_0 = (RuleCall)cDeclaratorAssignment_2.eContents().get(0);
		
		//struct_declarator:
		//	':' constant_expression=constant_expression
		//	| declarator=declarator ':' constant_expression=constant_expression
		//	| declarator=declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//':' constant_expression=constant_expression | declarator=declarator ':' constant_expression=constant_expression |
		//declarator=declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//':' constant_expression=constant_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//':'
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_0_1() { return cConstant_expressionAssignment_0_1; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_0_1_0() { return cConstant_expressionConstant_expressionParserRuleCall_0_1_0; }
		
		//declarator=declarator ':' constant_expression=constant_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_1_0() { return cDeclaratorAssignment_1_0; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0_0() { return cDeclaratorDeclaratorParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_1_2() { return cConstant_expressionAssignment_1_2; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_1_2_0() { return cConstant_expressionConstant_expressionParserRuleCall_1_2_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_2() { return cDeclaratorAssignment_2; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_2_0() { return cDeclaratorDeclaratorParserRuleCall_2_0; }
	}
	public class Specifier_qualifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.specifier_qualifier_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cType_specifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cType_specifierType_specifierParserRuleCall_0_0_0 = (RuleCall)cType_specifierAssignment_0_0.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_1_0 = (RuleCall)cSpecifier_qualifier_listAssignment_0_1.eContents().get(0);
		private final Assignment cType_specifierAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cType_specifierType_specifierParserRuleCall_1_0 = (RuleCall)cType_specifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cType_qualifierAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_2_0_0 = (RuleCall)cType_qualifierAssignment_2_0.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_2_1_0 = (RuleCall)cSpecifier_qualifier_listAssignment_2_1.eContents().get(0);
		private final Assignment cType_qualifierAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_3_0 = (RuleCall)cType_qualifierAssignment_3.eContents().get(0);
		
		//specifier_qualifier_list:
		//	type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list
		//	| type_specifier=type_specifier
		//	| type_qualifier=type_qualifier specifier_qualifier_list=specifier_qualifier_list
		//	| type_qualifier=type_qualifier;
		@Override public ParserRule getRule() { return rule; }
		
		//type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list | type_specifier=type_specifier |
		//type_qualifier=type_qualifier specifier_qualifier_list=specifier_qualifier_list | type_qualifier=type_qualifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list
		public Group getGroup_0() { return cGroup_0; }
		
		//type_specifier=type_specifier
		public Assignment getType_specifierAssignment_0_0() { return cType_specifierAssignment_0_0; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_0_0_0() { return cType_specifierType_specifierParserRuleCall_0_0_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_0_1() { return cSpecifier_qualifier_listAssignment_0_1; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_1_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_1_0; }
		
		//type_specifier=type_specifier
		public Assignment getType_specifierAssignment_1() { return cType_specifierAssignment_1; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_1_0() { return cType_specifierType_specifierParserRuleCall_1_0; }
		
		//type_qualifier=type_qualifier specifier_qualifier_list=specifier_qualifier_list
		public Group getGroup_2() { return cGroup_2; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_2_0() { return cType_qualifierAssignment_2_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_2_0_0() { return cType_qualifierType_qualifierParserRuleCall_2_0_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_2_1() { return cSpecifier_qualifier_listAssignment_2_1; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_2_1_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_2_1_0; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_3() { return cType_qualifierAssignment_3; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_3_0() { return cType_qualifierType_qualifierParserRuleCall_3_0; }
	}
	public class Storage_class_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.storage_class_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTypedefKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExternKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStaticKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword c_Thread_localKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAutoKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cRegisterKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//storage_class_specifier:
		//	'typedef' /* identifiers must be flagged as TYPEDEF_NAME */
		//	| 'extern'
		//	| 'static'
		//	| '_Thread_local'
		//	| 'auto'
		//	| 'register';
		@Override public ParserRule getRule() { return rule; }
		
		//'typedef' /* identifiers must be flagged as TYPEDEF_NAME */ | 'extern' | 'static' | '_Thread_local' | 'auto' |
		//'register'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'typedef'
		public Keyword getTypedefKeyword_0() { return cTypedefKeyword_0; }
		
		//'extern'
		public Keyword getExternKeyword_1() { return cExternKeyword_1; }
		
		//'static'
		public Keyword getStaticKeyword_2() { return cStaticKeyword_2; }
		
		//'_Thread_local'
		public Keyword get_Thread_localKeyword_3() { return c_Thread_localKeyword_3; }
		
		//'auto'
		public Keyword getAutoKeyword_4() { return cAutoKeyword_4; }
		
		//'register'
		public Keyword getRegisterKeyword_5() { return cRegisterKeyword_5; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiersAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaration_specifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0 = (RuleCall)cDeclaration_specifiersAssignment_1_0.eContents().get(0);
		private final Assignment cInit_declarator_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInit_declarator_listInit_declarator_listParserRuleCall_1_1_0 = (RuleCall)cInit_declarator_listAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStatic_assert_declarationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0 = (RuleCall)cStatic_assert_declarationAssignment_2.eContents().get(0);
		
		//declaration:
		//	declaration_specifiers+=declaration_specifiers ';'
		//	| declaration_specifiers+=declaration_specifiers init_declarator_list+=init_declarator_list ';'
		//	| static_assert_declaration=static_assert_declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers+=declaration_specifiers ';' | declaration_specifiers+=declaration_specifiers
		//init_declarator_list+=init_declarator_list ';' | static_assert_declaration=static_assert_declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration_specifiers+=declaration_specifiers ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_0() { return cDeclaration_specifiersAssignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//declaration_specifiers+=declaration_specifiers init_declarator_list+=init_declarator_list ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_1_0() { return cDeclaration_specifiersAssignment_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0; }
		
		//init_declarator_list+=init_declarator_list
		public Assignment getInit_declarator_listAssignment_1_1() { return cInit_declarator_listAssignment_1_1; }
		
		//init_declarator_list
		public RuleCall getInit_declarator_listInit_declarator_listParserRuleCall_1_1_0() { return cInit_declarator_listInit_declarator_listParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
		
		//static_assert_declaration=static_assert_declaration
		public Assignment getStatic_assert_declarationAssignment_2() { return cStatic_assert_declarationAssignment_2; }
		
		//static_assert_declaration
		public RuleCall getStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0() { return cStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0; }
	}
	public class Function_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.function_definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiersAssignment_0_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_1_0 = (RuleCall)cDeclaratorAssignment_0_1.eContents().get(0);
		private final Assignment cDeclaration_listAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDeclaration_listDeclaration_listParserRuleCall_0_2_0 = (RuleCall)cDeclaration_listAssignment_0_2.eContents().get(0);
		private final Assignment cCompound_statementAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cCompound_statementCompound_statementParserRuleCall_0_3_0 = (RuleCall)cCompound_statementAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaration_specifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0 = (RuleCall)cDeclaration_specifiersAssignment_1_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1.eContents().get(0);
		private final Assignment cCompound_statementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCompound_statementCompound_statementParserRuleCall_1_2_0 = (RuleCall)cCompound_statementAssignment_1_2.eContents().get(0);
		
		//function_definition:
		//	declaration_specifiers+=declaration_specifiers declarator=declarator declaration_list+=declaration_list
		//	compound_statement=compound_statement
		//	| declaration_specifiers+=declaration_specifiers declarator=declarator compound_statement=compound_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers+=declaration_specifiers declarator=declarator declaration_list+=declaration_list
		//compound_statement=compound_statement | declaration_specifiers+=declaration_specifiers declarator=declarator
		//compound_statement=compound_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration_specifiers+=declaration_specifiers declarator=declarator declaration_list+=declaration_list
		//compound_statement=compound_statement
		public Group getGroup_0() { return cGroup_0; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_0() { return cDeclaration_specifiersAssignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_0_1() { return cDeclaratorAssignment_0_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_1_0() { return cDeclaratorDeclaratorParserRuleCall_0_1_0; }
		
		//declaration_list+=declaration_list
		public Assignment getDeclaration_listAssignment_0_2() { return cDeclaration_listAssignment_0_2; }
		
		//declaration_list
		public RuleCall getDeclaration_listDeclaration_listParserRuleCall_0_2_0() { return cDeclaration_listDeclaration_listParserRuleCall_0_2_0; }
		
		//compound_statement=compound_statement
		public Assignment getCompound_statementAssignment_0_3() { return cCompound_statementAssignment_0_3; }
		
		//compound_statement
		public RuleCall getCompound_statementCompound_statementParserRuleCall_0_3_0() { return cCompound_statementCompound_statementParserRuleCall_0_3_0; }
		
		//declaration_specifiers+=declaration_specifiers declarator=declarator compound_statement=compound_statement
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration_specifiers+=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_1_0() { return cDeclaration_specifiersAssignment_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_1_1() { return cDeclaratorAssignment_1_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_1_0; }
		
		//compound_statement=compound_statement
		public Assignment getCompound_statementAssignment_1_2() { return cCompound_statementAssignment_1_2; }
		
		//compound_statement
		public RuleCall getCompound_statementCompound_statementParserRuleCall_1_2_0() { return cCompound_statementCompound_statementParserRuleCall_1_2_0; }
	}
	public class Declaration_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cDeclaration_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaration_list_linhaDeclaration_list_linhaParserRuleCall_1_0 = (RuleCall)cDeclaration_list_linhaAssignment_1.eContents().get(0);
		
		//declaration_list:
		//	declaration=declaration declaration_list_linha=declaration_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=declaration declaration_list_linha=declaration_list_linha
		public Group getGroup() { return cGroup; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//declaration_list_linha=declaration_list_linha
		public Assignment getDeclaration_list_linhaAssignment_1() { return cDeclaration_list_linhaAssignment_1; }
		
		//declaration_list_linha
		public RuleCall getDeclaration_list_linhaDeclaration_list_linhaParserRuleCall_1_0() { return cDeclaration_list_linhaDeclaration_list_linhaParserRuleCall_1_0; }
	}
	public class Declaration_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationAssignment_1_0.eContents().get(0);
		private final Assignment cDeclaration_list_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaration_list_linhaDeclaration_list_linhaParserRuleCall_1_1_0 = (RuleCall)cDeclaration_list_linhaAssignment_1_1.eContents().get(0);
		
		//declaration_list_linha:
		//	{DeclarationListLinhaAction} (declaration=declaration declaration_list_linha=declaration_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DeclarationListLinhaAction} (declaration=declaration declaration_list_linha=declaration_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{DeclarationListLinhaAction}
		public Action getDeclarationListLinhaActionAction_0() { return cDeclarationListLinhaActionAction_0; }
		
		//(declaration=declaration declaration_list_linha=declaration_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_1_0() { return cDeclarationAssignment_1_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0_0() { return cDeclarationDeclarationParserRuleCall_1_0_0; }
		
		//declaration_list_linha=declaration_list_linha
		public Assignment getDeclaration_list_linhaAssignment_1_1() { return cDeclaration_list_linhaAssignment_1_1; }
		
		//declaration_list_linha
		public RuleCall getDeclaration_list_linhaDeclaration_list_linhaParserRuleCall_1_1_0() { return cDeclaration_list_linhaDeclaration_list_linhaParserRuleCall_1_1_0; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPointerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPointerPointerParserRuleCall_0_0_0 = (RuleCall)cPointerAssignment_0_0.eContents().get(0);
		private final Assignment cDirect_declaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirect_declaratorDirect_declaratorParserRuleCall_0_1_0 = (RuleCall)cDirect_declaratorAssignment_0_1.eContents().get(0);
		private final Assignment cDirect_declaratorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDirect_declaratorDirect_declaratorParserRuleCall_1_0 = (RuleCall)cDirect_declaratorAssignment_1.eContents().get(0);
		
		//declarator:
		//	pointer=pointer direct_declarator=direct_declarator
		//	| direct_declarator=direct_declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//pointer=pointer direct_declarator=direct_declarator | direct_declarator=direct_declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pointer=pointer direct_declarator=direct_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_0_0() { return cPointerAssignment_0_0; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_0_0_0() { return cPointerPointerParserRuleCall_0_0_0; }
		
		//direct_declarator=direct_declarator
		public Assignment getDirect_declaratorAssignment_0_1() { return cDirect_declaratorAssignment_0_1; }
		
		//direct_declarator
		public RuleCall getDirect_declaratorDirect_declaratorParserRuleCall_0_1_0() { return cDirect_declaratorDirect_declaratorParserRuleCall_0_1_0; }
		
		//direct_declarator=direct_declarator
		public Assignment getDirect_declaratorAssignment_1() { return cDirect_declaratorAssignment_1; }
		
		//direct_declarator
		public RuleCall getDirect_declaratorDirect_declaratorParserRuleCall_1_0() { return cDirect_declaratorDirect_declaratorParserRuleCall_1_0; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.pointer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_0_1_0 = (RuleCall)cType_qualifier_listAssignment_0_1.eContents().get(0);
		private final Assignment cPointerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPointerPointerParserRuleCall_0_2_0 = (RuleCall)cPointerAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_1_1_0 = (RuleCall)cType_qualifier_listAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPointerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPointerPointerParserRuleCall_2_1_0 = (RuleCall)cPointerAssignment_2_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//pointer:
		//	'*' type_qualifier_list=type_qualifier_list pointer=pointer
		//	| '*' type_qualifier_list=type_qualifier_list
		//	| '*' pointer=pointer
		//	| '*';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' type_qualifier_list=type_qualifier_list pointer=pointer | '*' type_qualifier_list=type_qualifier_list | '*'
		//pointer=pointer | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*' type_qualifier_list=type_qualifier_list pointer=pointer
		public Group getGroup_0() { return cGroup_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_0_1() { return cType_qualifier_listAssignment_0_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_0_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_0_1_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_0_2() { return cPointerAssignment_0_2; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_0_2_0() { return cPointerPointerParserRuleCall_0_2_0; }
		
		//'*' type_qualifier_list=type_qualifier_list
		public Group getGroup_1() { return cGroup_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0() { return cAsteriskKeyword_1_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_1_1() { return cType_qualifier_listAssignment_1_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_1_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_1_1_0; }
		
		//'*' pointer=pointer
		public Group getGroup_2() { return cGroup_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_2_1() { return cPointerAssignment_2_1; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_2_1_0() { return cPointerPointerParserRuleCall_2_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
	}
	public class Type_qualifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cType_qualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_0_0 = (RuleCall)cType_qualifierAssignment_0.eContents().get(0);
		private final Assignment cType_qualifier_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cType_qualifier_list_linhaType_qualifier_list_linhaParserRuleCall_1_0 = (RuleCall)cType_qualifier_list_linhaAssignment_1.eContents().get(0);
		
		//type_qualifier_list:
		//	type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha
		public Group getGroup() { return cGroup; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_0() { return cType_qualifierAssignment_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_0_0() { return cType_qualifierType_qualifierParserRuleCall_0_0; }
		
		//type_qualifier_list_linha=type_qualifier_list_linha
		public Assignment getType_qualifier_list_linhaAssignment_1() { return cType_qualifier_list_linhaAssignment_1; }
		
		//type_qualifier_list_linha
		public RuleCall getType_qualifier_list_linhaType_qualifier_list_linhaParserRuleCall_1_0() { return cType_qualifier_list_linhaType_qualifier_list_linhaParserRuleCall_1_0; }
	}
	public class Type_qualifier_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeQualifierListLinhaAtionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cType_qualifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_1_0_0 = (RuleCall)cType_qualifierAssignment_1_0.eContents().get(0);
		private final Assignment cType_qualifier_list_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_qualifier_list_linhaType_qualifier_list_linhaParserRuleCall_1_1_0 = (RuleCall)cType_qualifier_list_linhaAssignment_1_1.eContents().get(0);
		
		//type_qualifier_list_linha:
		//	{TypeQualifierListLinhaAtion} (type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeQualifierListLinhaAtion} (type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{TypeQualifierListLinhaAtion}
		public Action getTypeQualifierListLinhaAtionAction_0() { return cTypeQualifierListLinhaAtionAction_0; }
		
		//(type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_1_0() { return cType_qualifierAssignment_1_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_1_0_0() { return cType_qualifierType_qualifierParserRuleCall_1_0_0; }
		
		//type_qualifier_list_linha=type_qualifier_list_linha
		public Assignment getType_qualifier_list_linhaAssignment_1_1() { return cType_qualifier_list_linhaAssignment_1_1; }
		
		//type_qualifier_list_linha
		public RuleCall getType_qualifier_list_linhaType_qualifier_list_linhaParserRuleCall_1_1_0() { return cType_qualifier_list_linhaType_qualifier_list_linhaParserRuleCall_1_1_0; }
	}
	public class Direct_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIDzTerminalRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Assignment cDirect_declarator_linhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_0_1_0 = (RuleCall)cDirect_declarator_linhaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cDirect_declarator_linhaAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_1_3_0 = (RuleCall)cDirect_declarator_linhaAssignment_1_3.eContents().get(0);
		
		//direct_declarator:
		//	identifier=IDz direct_declarator_linha=direct_declarator_linha?
		//	| '(' declarator=declarator ')' direct_declarator_linha=direct_declarator_linha?;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=IDz direct_declarator_linha=direct_declarator_linha? | '(' declarator=declarator ')'
		//direct_declarator_linha=direct_declarator_linha?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier=IDz direct_declarator_linha=direct_declarator_linha?
		public Group getGroup_0() { return cGroup_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_0_0_0() { return cIdentifierIDzTerminalRuleCall_0_0_0; }
		
		//direct_declarator_linha=direct_declarator_linha?
		public Assignment getDirect_declarator_linhaAssignment_0_1() { return cDirect_declarator_linhaAssignment_0_1; }
		
		//direct_declarator_linha
		public RuleCall getDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_0_1_0() { return cDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_0_1_0; }
		
		//'(' declarator=declarator ')' direct_declarator_linha=direct_declarator_linha?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_1_1() { return cDeclaratorAssignment_1_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//direct_declarator_linha=direct_declarator_linha?
		public Assignment getDirect_declarator_linhaAssignment_1_3() { return cDirect_declarator_linhaAssignment_1_3; }
		
		//direct_declarator_linha
		public RuleCall getDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_1_3_0() { return cDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_1_3_0; }
	}
	public class Direct_declarator_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_declarator_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirect_declarator_complementoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirect_declarator_complementoDirect_declarator_complementoParserRuleCall_0_0 = (RuleCall)cDirect_declarator_complementoAssignment_0.eContents().get(0);
		private final Assignment cDirect_declarator_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_1_0 = (RuleCall)cDirect_declarator_linhaAssignment_1.eContents().get(0);
		
		//direct_declarator_linha:
		//	direct_declarator_complemento=direct_declarator_complemento direct_declarator_linha=direct_declarator_linha?;
		@Override public ParserRule getRule() { return rule; }
		
		//direct_declarator_complemento=direct_declarator_complemento direct_declarator_linha=direct_declarator_linha?
		public Group getGroup() { return cGroup; }
		
		//direct_declarator_complemento=direct_declarator_complemento
		public Assignment getDirect_declarator_complementoAssignment_0() { return cDirect_declarator_complementoAssignment_0; }
		
		//direct_declarator_complemento
		public RuleCall getDirect_declarator_complementoDirect_declarator_complementoParserRuleCall_0_0() { return cDirect_declarator_complementoDirect_declarator_complementoParserRuleCall_0_0; }
		
		//direct_declarator_linha=direct_declarator_linha?
		public Assignment getDirect_declarator_linhaAssignment_1() { return cDirect_declarator_linhaAssignment_1; }
		
		//direct_declarator_linha
		public RuleCall getDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_1_0() { return cDirect_declarator_linhaDirect_declarator_linhaParserRuleCall_1_0; }
	}
	public class Direct_declarator_complementoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_declarator_complemento");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cStaticKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cType_qualifier_listAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_2_2_0 = (RuleCall)cType_qualifier_listAssignment_2_2.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0 = (RuleCall)cAssignment_expressionAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cStaticKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0 = (RuleCall)cAssignment_expressionAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0 = (RuleCall)cType_qualifier_listAssignment_4_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0 = (RuleCall)cType_qualifier_listAssignment_5_1.eContents().get(0);
		private final Keyword cStaticKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cAssignment_expressionAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0 = (RuleCall)cAssignment_expressionAssignment_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0 = (RuleCall)cType_qualifier_listAssignment_6_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_6_2_0 = (RuleCall)cAssignment_expressionAssignment_6_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_7_1_0 = (RuleCall)cType_qualifier_listAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_8_1_0 = (RuleCall)cAssignment_expressionAssignment_8_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cParameter_type_listAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cParameter_type_listParameter_type_listParserRuleCall_9_1_0 = (RuleCall)cParameter_type_listAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cIdentifier_listAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cIdentifier_listIdentifier_listParserRuleCall_11_1_0 = (RuleCall)cIdentifier_listAssignment_11_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		
		//direct_declarator_complemento:
		//	'[' ']'
		//	| '[' '*' ']'
		//	| '[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		//	| '[' 'static' assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list '*' ']'
		//	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list ']'
		//	| '[' assignment_expression=assignment_expression ']'
		//	| '(' parameter_type_list=parameter_type_list ')'
		//	| '(' ')'
		//	| '(' identifier_list=identifier_list ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ']' | '[' '*' ']' | '[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression
		//']' | '[' 'static' assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list '*'
		//']' | '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']' | '['
		//type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']' | '['
		//type_qualifier_list=type_qualifier_list ']' | '[' assignment_expression=assignment_expression ']' | '('
		//parameter_type_list=parameter_type_list ')' | '(' ')' | '(' identifier_list=identifier_list ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//'[' '*' ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//'static'
		public Keyword getStaticKeyword_2_1() { return cStaticKeyword_2_1; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_2_2() { return cType_qualifier_listAssignment_2_2; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_2_2_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_2_2_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2_3() { return cAssignment_expressionAssignment_2_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//'[' 'static' assignment_expression=assignment_expression ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//'static'
		public Keyword getStaticKeyword_3_1() { return cStaticKeyword_3_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_3_2() { return cAssignment_expressionAssignment_3_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_3_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//'[' type_qualifier_list=type_qualifier_list '*' ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_4_1() { return cType_qualifier_listAssignment_4_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_4_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_4_2() { return cAsteriskKeyword_4_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//'[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_5_1() { return cType_qualifier_listAssignment_5_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_5_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0; }
		
		//'static'
		public Keyword getStaticKeyword_5_2() { return cStaticKeyword_5_2; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_5_3() { return cAssignment_expressionAssignment_5_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_5_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_4() { return cRightSquareBracketKeyword_5_4; }
		
		//'[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_6_1() { return cType_qualifier_listAssignment_6_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_6_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_6_2() { return cAssignment_expressionAssignment_6_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_6_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_6_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_3() { return cRightSquareBracketKeyword_6_3; }
		
		//'[' type_qualifier_list=type_qualifier_list ']'
		public Group getGroup_7() { return cGroup_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_0() { return cLeftSquareBracketKeyword_7_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_7_1() { return cType_qualifier_listAssignment_7_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_7_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_2() { return cRightSquareBracketKeyword_7_2; }
		
		//'[' assignment_expression=assignment_expression ']'
		public Group getGroup_8() { return cGroup_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_0() { return cLeftSquareBracketKeyword_8_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_8_1() { return cAssignment_expressionAssignment_8_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_8_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_8_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_2() { return cRightSquareBracketKeyword_8_2; }
		
		//'(' parameter_type_list=parameter_type_list ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }
		
		//parameter_type_list=parameter_type_list
		public Assignment getParameter_type_listAssignment_9_1() { return cParameter_type_listAssignment_9_1; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParameter_type_listParserRuleCall_9_1_0() { return cParameter_type_listParameter_type_listParserRuleCall_9_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }
		
		//'(' ')'
		public Group getGroup_10() { return cGroup_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_0() { return cLeftParenthesisKeyword_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_1() { return cRightParenthesisKeyword_10_1; }
		
		//'(' identifier_list=identifier_list ')'
		public Group getGroup_11() { return cGroup_11; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11_0() { return cLeftParenthesisKeyword_11_0; }
		
		//identifier_list=identifier_list
		public Assignment getIdentifier_listAssignment_11_1() { return cIdentifier_listAssignment_11_1; }
		
		//identifier_list
		public RuleCall getIdentifier_listIdentifier_listParserRuleCall_11_1_0() { return cIdentifier_listIdentifier_listParserRuleCall_11_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11_2() { return cRightParenthesisKeyword_11_2; }
	}
	public class Parameter_type_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_type_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cParameter_listaAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cParameter_listaParameter_listaParserRuleCall_0_0_0 = (RuleCall)cParameter_listaAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cParameter_listaAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParameter_listaParameter_listaParserRuleCall_1_0 = (RuleCall)cParameter_listaAssignment_1.eContents().get(0);
		
		//parameter_type_list:
		//	parameter_lista=parameter_lista ',' '...'
		//	| parameter_lista=parameter_lista;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter_lista=parameter_lista ',' '...' | parameter_lista=parameter_lista
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameter_lista=parameter_lista ',' '...'
		public Group getGroup_0() { return cGroup_0; }
		
		//parameter_lista=parameter_lista
		public Assignment getParameter_listaAssignment_0_0() { return cParameter_listaAssignment_0_0; }
		
		//parameter_lista
		public RuleCall getParameter_listaParameter_listaParserRuleCall_0_0_0() { return cParameter_listaParameter_listaParserRuleCall_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_0_2() { return cFullStopFullStopFullStopKeyword_0_2; }
		
		//parameter_lista=parameter_lista
		public Assignment getParameter_listaAssignment_1() { return cParameter_listaAssignment_1; }
		
		//parameter_lista
		public RuleCall getParameter_listaParameter_listaParserRuleCall_1_0() { return cParameter_listaParameter_listaParserRuleCall_1_0; }
	}
	public class Parameter_listaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_lista");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameter_declarationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameter_declarationsParameter_declarationParserRuleCall_0_0 = (RuleCall)cParameter_declarationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameter_declarationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameter_declarationsParameter_declarationParserRuleCall_1_1_0 = (RuleCall)cParameter_declarationsAssignment_1_1.eContents().get(0);
		
		//parameter_lista:
		//	parameter_declarations+=parameter_declaration (',' parameter_declarations+=parameter_declaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter_declarations+=parameter_declaration (',' parameter_declarations+=parameter_declaration)*
		public Group getGroup() { return cGroup; }
		
		//parameter_declarations+=parameter_declaration
		public Assignment getParameter_declarationsAssignment_0() { return cParameter_declarationsAssignment_0; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationsParameter_declarationParserRuleCall_0_0() { return cParameter_declarationsParameter_declarationParserRuleCall_0_0; }
		
		//(',' parameter_declarations+=parameter_declaration)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameter_declarations+=parameter_declaration
		public Assignment getParameter_declarationsAssignment_1_1() { return cParameter_declarationsAssignment_1_1; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationsParameter_declarationParserRuleCall_1_1_0() { return cParameter_declarationsParameter_declarationParserRuleCall_1_1_0; }
	}
	public class Parameter_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameter_declarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameter_declarationParameter_declarationParserRuleCall_1_0 = (RuleCall)cParameter_declarationAssignment_1.eContents().get(0);
		private final Assignment cParameter_list_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameter_list_linhaParameter_list_linhaParserRuleCall_2_0 = (RuleCall)cParameter_list_linhaAssignment_2.eContents().get(0);
		
		//parameter_list_linha:
		//	(',' parameter_declaration=parameter_declaration parameter_list_linha+=parameter_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(',' parameter_declaration=parameter_declaration parameter_list_linha+=parameter_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//parameter_declaration=parameter_declaration
		public Assignment getParameter_declarationAssignment_1() { return cParameter_declarationAssignment_1; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationParameter_declarationParserRuleCall_1_0() { return cParameter_declarationParameter_declarationParserRuleCall_1_0; }
		
		//parameter_list_linha+=parameter_list_linha
		public Assignment getParameter_list_linhaAssignment_2() { return cParameter_list_linhaAssignment_2; }
		
		//parameter_list_linha
		public RuleCall getParameter_list_linhaParameter_list_linhaParserRuleCall_2_0() { return cParameter_list_linhaParameter_list_linhaParserRuleCall_2_0; }
	}
	public class Parameter_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiersAssignment_0_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_1_0 = (RuleCall)cDeclaratorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaration_specifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0 = (RuleCall)cDeclaration_specifiersAssignment_1_0.eContents().get(0);
		private final Assignment cAbstract_declaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0 = (RuleCall)cAbstract_declaratorAssignment_1_1.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_0 = (RuleCall)cDeclaration_specifiersAssignment_2.eContents().get(0);
		
		//parameter_declaration:
		//	declaration_specifiers=declaration_specifiers declarator=declarator
		//	| declaration_specifiers=declaration_specifiers abstract_declarator=abstract_declarator
		//	| declaration_specifiers=declaration_specifiers;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers=declaration_specifiers declarator=declarator | declaration_specifiers=declaration_specifiers
		//abstract_declarator=abstract_declarator | declaration_specifiers=declaration_specifiers
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration_specifiers=declaration_specifiers declarator=declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_0() { return cDeclaration_specifiersAssignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_0_1() { return cDeclaratorAssignment_0_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_1_0() { return cDeclaratorDeclaratorParserRuleCall_0_1_0; }
		
		//declaration_specifiers=declaration_specifiers abstract_declarator=abstract_declarator
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_1_0() { return cDeclaration_specifiersAssignment_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0; }
		
		//abstract_declarator=abstract_declarator
		public Assignment getAbstract_declaratorAssignment_1_1() { return cAbstract_declaratorAssignment_1_1; }
		
		//abstract_declarator
		public RuleCall getAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0() { return cAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_2() { return cDeclaration_specifiersAssignment_2; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_0; }
	}
	public class Abstract_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.abstract_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPointerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPointerPointerParserRuleCall_0_0_0 = (RuleCall)cPointerAssignment_0_0.eContents().get(0);
		private final Assignment cDirect_abstract_declaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_0_1_0 = (RuleCall)cDirect_abstract_declaratorAssignment_0_1.eContents().get(0);
		private final Assignment cPointerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPointerPointerParserRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		private final Assignment cDirect_abstract_declaratorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_2_0 = (RuleCall)cDirect_abstract_declaratorAssignment_2.eContents().get(0);
		
		//abstract_declarator:
		//	pointer=pointer direct_abstract_declarator=direct_abstract_declarator
		//	| pointer=pointer
		//	| direct_abstract_declarator=direct_abstract_declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//pointer=pointer direct_abstract_declarator=direct_abstract_declarator | pointer=pointer |
		//direct_abstract_declarator=direct_abstract_declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pointer=pointer direct_abstract_declarator=direct_abstract_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_0_0() { return cPointerAssignment_0_0; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_0_0_0() { return cPointerPointerParserRuleCall_0_0_0; }
		
		//direct_abstract_declarator=direct_abstract_declarator
		public Assignment getDirect_abstract_declaratorAssignment_0_1() { return cDirect_abstract_declaratorAssignment_0_1; }
		
		//direct_abstract_declarator
		public RuleCall getDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_0_1_0() { return cDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_0_1_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_1_0() { return cPointerPointerParserRuleCall_1_0; }
		
		//direct_abstract_declarator=direct_abstract_declarator
		public Assignment getDirect_abstract_declaratorAssignment_2() { return cDirect_abstract_declaratorAssignment_2; }
		
		//direct_abstract_declarator
		public RuleCall getDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_2_0() { return cDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_2_0; }
	}
	public class Direct_abstract_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_abstract_declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cAbstract_declaratorAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cAbstract_declaratorAbstract_declaratorParserRuleCall_0_0_1_0 = (RuleCall)cAbstract_declaratorAssignment_0_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Keyword cStaticKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cType_qualifier_listAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_0_3_2_0 = (RuleCall)cType_qualifier_listAssignment_0_3_2.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_0_3_3 = (Assignment)cGroup_0_3.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_3_3_0 = (RuleCall)cAssignment_expressionAssignment_0_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_3_4 = (Keyword)cGroup_0_3.eContents().get(4);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Keyword cStaticKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_4_2_0 = (RuleCall)cAssignment_expressionAssignment_0_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_4_3 = (Keyword)cGroup_0_4.eContents().get(3);
		private final Group cGroup_0_5 = (Group)cAlternatives_0.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_0_5_1_0 = (RuleCall)cType_qualifier_listAssignment_0_5_1.eContents().get(0);
		private final Keyword cStaticKeyword_0_5_2 = (Keyword)cGroup_0_5.eContents().get(2);
		private final Assignment cAssignment_expressionAssignment_0_5_3 = (Assignment)cGroup_0_5.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_5_3_0 = (RuleCall)cAssignment_expressionAssignment_0_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5_4 = (Keyword)cGroup_0_5.eContents().get(4);
		private final Group cGroup_0_6 = (Group)cAlternatives_0.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_0_6_1_0 = (RuleCall)cType_qualifier_listAssignment_0_6_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_0_6_2 = (Assignment)cGroup_0_6.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_6_2_0 = (RuleCall)cAssignment_expressionAssignment_0_6_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_6_3 = (Keyword)cGroup_0_6.eContents().get(3);
		private final Group cGroup_0_7 = (Group)cAlternatives_0.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_0_7_0 = (Keyword)cGroup_0_7.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_0_7_1 = (Assignment)cGroup_0_7.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_0_7_1_0 = (RuleCall)cType_qualifier_listAssignment_0_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_7_2 = (Keyword)cGroup_0_7.eContents().get(2);
		private final Group cGroup_0_8 = (Group)cAlternatives_0.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_0_8_0 = (Keyword)cGroup_0_8.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_0_8_1 = (Assignment)cGroup_0_8.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_8_1_0 = (RuleCall)cAssignment_expressionAssignment_0_8_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_8_2 = (Keyword)cGroup_0_8.eContents().get(2);
		private final Group cGroup_0_9 = (Group)cAlternatives_0.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_0_9_0 = (Keyword)cGroup_0_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_9_1 = (Keyword)cGroup_0_9.eContents().get(1);
		private final Group cGroup_0_10 = (Group)cAlternatives_0.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_0_10_0 = (Keyword)cGroup_0_10.eContents().get(0);
		private final Assignment cParameter_type_listAssignment_0_10_1 = (Assignment)cGroup_0_10.eContents().get(1);
		private final RuleCall cParameter_type_listParameter_type_listParserRuleCall_0_10_1_0 = (RuleCall)cParameter_type_listAssignment_0_10_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_10_2 = (Keyword)cGroup_0_10.eContents().get(2);
		private final Assignment cDirect_abstract_declarator_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirect_abstract_declarator_linhaDirect_abstract_declarator_linhaParserRuleCall_1_0 = (RuleCall)cDirect_abstract_declarator_linhaAssignment_1.eContents().get(0);
		
		//direct_abstract_declarator:
		//	('(' abstract_declarator=abstract_declarator ')'
		//	| '[' ']'
		//	| '[' '*' ']'
		//	| '[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		//	| '[' 'static' assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list ']'
		//	| '[' assignment_expression=assignment_expression ']'
		//	| '(' ')'
		//	| '(' parameter_type_list=parameter_type_list ')') direct_abstract_declarator_linha=direct_abstract_declarator_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//('(' abstract_declarator=abstract_declarator ')' | '[' ']' | '[' '*' ']' | '[' 'static'
		//type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']' | '[' 'static'
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list 'static'
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list ']' | '['
		//assignment_expression=assignment_expression ']' | '(' ')' | '(' parameter_type_list=parameter_type_list ')')
		//direct_abstract_declarator_linha=direct_abstract_declarator_linha
		public Group getGroup() { return cGroup; }
		
		//'(' abstract_declarator=abstract_declarator ')' | '[' ']' | '[' '*' ']' | '[' 'static'
		//type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']' | '[' 'static'
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list 'static'
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list ']' | '['
		//assignment_expression=assignment_expression ']' | '(' ')' | '(' parameter_type_list=parameter_type_list ')'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'(' abstract_declarator=abstract_declarator ')'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_0() { return cLeftParenthesisKeyword_0_0_0; }
		
		//abstract_declarator=abstract_declarator
		public Assignment getAbstract_declaratorAssignment_0_0_1() { return cAbstract_declaratorAssignment_0_0_1; }
		
		//abstract_declarator
		public RuleCall getAbstract_declaratorAbstract_declaratorParserRuleCall_0_0_1_0() { return cAbstract_declaratorAbstract_declaratorParserRuleCall_0_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_0_2() { return cRightParenthesisKeyword_0_0_2; }
		
		//'[' ']'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_1() { return cRightSquareBracketKeyword_0_1_1; }
		
		//'[' '*' ']'
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_2_0() { return cLeftSquareBracketKeyword_0_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_2_1() { return cAsteriskKeyword_0_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2_2() { return cRightSquareBracketKeyword_0_2_2; }
		
		//'[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_3_0() { return cLeftSquareBracketKeyword_0_3_0; }
		
		//'static'
		public Keyword getStaticKeyword_0_3_1() { return cStaticKeyword_0_3_1; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_0_3_2() { return cType_qualifier_listAssignment_0_3_2; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_0_3_2_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_0_3_2_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0_3_3() { return cAssignment_expressionAssignment_0_3_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_3_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3_4() { return cRightSquareBracketKeyword_0_3_4; }
		
		//'[' 'static' assignment_expression=assignment_expression ']'
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_4_0() { return cLeftSquareBracketKeyword_0_4_0; }
		
		//'static'
		public Keyword getStaticKeyword_0_4_1() { return cStaticKeyword_0_4_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0_4_2() { return cAssignment_expressionAssignment_0_4_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_4_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_4_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_4_3() { return cRightSquareBracketKeyword_0_4_3; }
		
		//'[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_5_0() { return cLeftSquareBracketKeyword_0_5_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_0_5_1() { return cType_qualifier_listAssignment_0_5_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_0_5_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_0_5_1_0; }
		
		//'static'
		public Keyword getStaticKeyword_0_5_2() { return cStaticKeyword_0_5_2; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0_5_3() { return cAssignment_expressionAssignment_0_5_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_5_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_5_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_5_4() { return cRightSquareBracketKeyword_0_5_4; }
		
		//'[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_0_6() { return cGroup_0_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_6_0() { return cLeftSquareBracketKeyword_0_6_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_0_6_1() { return cType_qualifier_listAssignment_0_6_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_0_6_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_0_6_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0_6_2() { return cAssignment_expressionAssignment_0_6_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_6_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_6_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_6_3() { return cRightSquareBracketKeyword_0_6_3; }
		
		//'[' type_qualifier_list=type_qualifier_list ']'
		public Group getGroup_0_7() { return cGroup_0_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_7_0() { return cLeftSquareBracketKeyword_0_7_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_0_7_1() { return cType_qualifier_listAssignment_0_7_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_0_7_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_0_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_7_2() { return cRightSquareBracketKeyword_0_7_2; }
		
		//'[' assignment_expression=assignment_expression ']'
		public Group getGroup_0_8() { return cGroup_0_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_8_0() { return cLeftSquareBracketKeyword_0_8_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0_8_1() { return cAssignment_expressionAssignment_0_8_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_8_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_8_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_8_2() { return cRightSquareBracketKeyword_0_8_2; }
		
		//'(' ')'
		public Group getGroup_0_9() { return cGroup_0_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_9_0() { return cLeftParenthesisKeyword_0_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_9_1() { return cRightParenthesisKeyword_0_9_1; }
		
		//'(' parameter_type_list=parameter_type_list ')'
		public Group getGroup_0_10() { return cGroup_0_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_10_0() { return cLeftParenthesisKeyword_0_10_0; }
		
		//parameter_type_list=parameter_type_list
		public Assignment getParameter_type_listAssignment_0_10_1() { return cParameter_type_listAssignment_0_10_1; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParameter_type_listParserRuleCall_0_10_1_0() { return cParameter_type_listParameter_type_listParserRuleCall_0_10_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_10_2() { return cRightParenthesisKeyword_0_10_2; }
		
		//direct_abstract_declarator_linha=direct_abstract_declarator_linha
		public Assignment getDirect_abstract_declarator_linhaAssignment_1() { return cDirect_abstract_declarator_linhaAssignment_1; }
		
		//direct_abstract_declarator_linha
		public RuleCall getDirect_abstract_declarator_linhaDirect_abstract_declarator_linhaParserRuleCall_1_0() { return cDirect_abstract_declarator_linhaDirect_abstract_declarator_linhaParserRuleCall_1_0; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cInit_declarator_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInit_declarator_listInitializer_listParserRuleCall_0_1_0 = (RuleCall)cInit_declarator_listAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInit_declarator_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInit_declarator_listInitializer_listParserRuleCall_1_1_0 = (RuleCall)cInit_declarator_listAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cAssignment_expressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_0 = (RuleCall)cAssignment_expressionAssignment_2.eContents().get(0);
		
		//initializer:
		//	'{' init_declarator_list=initializer_list '}'
		//	| '{' init_declarator_list=initializer_list ',' '}'
		//	| assignment_expression=assignment_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' init_declarator_list=initializer_list '}' | '{' init_declarator_list=initializer_list ',' '}' |
		//assignment_expression=assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' init_declarator_list=initializer_list '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//init_declarator_list=initializer_list
		public Assignment getInit_declarator_listAssignment_0_1() { return cInit_declarator_listAssignment_0_1; }
		
		//initializer_list
		public RuleCall getInit_declarator_listInitializer_listParserRuleCall_0_1_0() { return cInit_declarator_listInitializer_listParserRuleCall_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//'{' init_declarator_list=initializer_list ',' '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//init_declarator_list=initializer_list
		public Assignment getInit_declarator_listAssignment_1_1() { return cInit_declarator_listAssignment_1_1; }
		
		//initializer_list
		public RuleCall getInit_declarator_listInitializer_listParserRuleCall_1_1_0() { return cInit_declarator_listInitializer_listParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2() { return cAssignment_expressionAssignment_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_0; }
	}
	public class Direct_abstract_declarator_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_abstract_declarator_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDirectAbstractDeclarratorLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDirect_abstract_declarator_complementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDirect_abstract_declarator_complementDirect_abstract_declarator_complementParserRuleCall_1_0_0 = (RuleCall)cDirect_abstract_declarator_complementAssignment_1_0.eContents().get(0);
		private final Assignment cDirect_abstract_declarator_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDirect_abstract_declarator_linhaDirect_abstract_declarator_linhaParserRuleCall_1_1_0 = (RuleCall)cDirect_abstract_declarator_linhaAssignment_1_1.eContents().get(0);
		
		//direct_abstract_declarator_linha:
		//	{DirectAbstractDeclarratorLinhaAction} (direct_abstract_declarator_complement=direct_abstract_declarator_complement
		//	direct_abstract_declarator_linha=direct_abstract_declarator_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DirectAbstractDeclarratorLinhaAction} (direct_abstract_declarator_complement=direct_abstract_declarator_complement
		//direct_abstract_declarator_linha=direct_abstract_declarator_linha)?
		public Group getGroup() { return cGroup; }
		
		//{DirectAbstractDeclarratorLinhaAction}
		public Action getDirectAbstractDeclarratorLinhaActionAction_0() { return cDirectAbstractDeclarratorLinhaActionAction_0; }
		
		//(direct_abstract_declarator_complement=direct_abstract_declarator_complement
		//direct_abstract_declarator_linha=direct_abstract_declarator_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//direct_abstract_declarator_complement=direct_abstract_declarator_complement
		public Assignment getDirect_abstract_declarator_complementAssignment_1_0() { return cDirect_abstract_declarator_complementAssignment_1_0; }
		
		//direct_abstract_declarator_complement
		public RuleCall getDirect_abstract_declarator_complementDirect_abstract_declarator_complementParserRuleCall_1_0_0() { return cDirect_abstract_declarator_complementDirect_abstract_declarator_complementParserRuleCall_1_0_0; }
		
		//direct_abstract_declarator_linha=direct_abstract_declarator_linha
		public Assignment getDirect_abstract_declarator_linhaAssignment_1_1() { return cDirect_abstract_declarator_linhaAssignment_1_1; }
		
		//direct_abstract_declarator_linha
		public RuleCall getDirect_abstract_declarator_linhaDirect_abstract_declarator_linhaParserRuleCall_1_1_0() { return cDirect_abstract_declarator_linhaDirect_abstract_declarator_linhaParserRuleCall_1_1_0; }
	}
	public class Direct_abstract_declarator_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_abstract_declarator_complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cStaticKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cType_qualifier_listParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cAssignment_expressionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0 = (RuleCall)cAssignment_expressionAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cStaticKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0 = (RuleCall)cAssignment_expressionAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0 = (RuleCall)cType_qualifier_listAssignment_4_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_4_2_0 = (RuleCall)cAssignment_expressionAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0 = (RuleCall)cType_qualifier_listAssignment_5_1.eContents().get(0);
		private final Keyword cStaticKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cAssignment_expressionAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0 = (RuleCall)cAssignment_expressionAssignment_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0 = (RuleCall)cType_qualifier_listAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_7_1_0 = (RuleCall)cAssignment_expressionAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cParameter_type_listAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cParameter_type_listParameter_type_listParserRuleCall_9_1_0 = (RuleCall)cParameter_type_listAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		
		//direct_abstract_declarator_complement:
		//	'[' ']'
		//	| '[' '*' ']'
		//	| '[' 'static' type_qualifier_list assignment_expression=assignment_expression ']'
		//	| '[' 'static' assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
		//	| '[' type_qualifier_list=type_qualifier_list ']'
		//	| '[' assignment_expression=assignment_expression ']'
		//	| '(' ')'
		//	| '(' parameter_type_list=parameter_type_list ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ']' | '[' '*' ']' | '[' 'static' type_qualifier_list assignment_expression=assignment_expression ']' | '[' 'static'
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list 'static'
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list ']' | '['
		//assignment_expression=assignment_expression ']' | '(' ')' | '(' parameter_type_list=parameter_type_list ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//'[' '*' ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'[' 'static' type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//'static'
		public Keyword getStaticKeyword_2_1() { return cStaticKeyword_2_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listParserRuleCall_2_2() { return cType_qualifier_listParserRuleCall_2_2; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2_3() { return cAssignment_expressionAssignment_2_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//'[' 'static' assignment_expression=assignment_expression ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//'static'
		public Keyword getStaticKeyword_3_1() { return cStaticKeyword_3_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_3_2() { return cAssignment_expressionAssignment_3_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_3_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//'[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_4_1() { return cType_qualifier_listAssignment_4_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_4_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_4_2() { return cAssignment_expressionAssignment_4_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_4_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_4_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//'[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_5_1() { return cType_qualifier_listAssignment_5_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_5_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0; }
		
		//'static'
		public Keyword getStaticKeyword_5_2() { return cStaticKeyword_5_2; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_5_3() { return cAssignment_expressionAssignment_5_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_5_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_4() { return cRightSquareBracketKeyword_5_4; }
		
		//'[' type_qualifier_list=type_qualifier_list ']'
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_6_1() { return cType_qualifier_listAssignment_6_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_6_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
		
		//'[' assignment_expression=assignment_expression ']'
		public Group getGroup_7() { return cGroup_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_0() { return cLeftSquareBracketKeyword_7_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_7_1() { return cAssignment_expressionAssignment_7_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_7_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_2() { return cRightSquareBracketKeyword_7_2; }
		
		//'(' ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_1() { return cRightParenthesisKeyword_8_1; }
		
		//'(' parameter_type_list=parameter_type_list ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }
		
		//parameter_type_list=parameter_type_list
		public Assignment getParameter_type_listAssignment_9_1() { return cParameter_type_listAssignment_9_1; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParameter_type_listParserRuleCall_9_1_0() { return cParameter_type_listParameter_type_listParserRuleCall_9_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }
	}
	public class Identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDzTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cIdentifier_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifier_list_linhaIdentifier_list_linhaParserRuleCall_1_0 = (RuleCall)cIdentifier_list_linhaAssignment_1.eContents().get(0);
		
		//identifier_list:
		//	identifier=IDz identifier_list_linha=identifier_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=IDz identifier_list_linha=identifier_list_linha
		public Group getGroup() { return cGroup; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_0_0() { return cIdentifierIDzTerminalRuleCall_0_0; }
		
		//identifier_list_linha=identifier_list_linha
		public Assignment getIdentifier_list_linhaAssignment_1() { return cIdentifier_list_linhaAssignment_1; }
		
		//identifier_list_linha
		public RuleCall getIdentifier_list_linhaIdentifier_list_linhaParserRuleCall_1_0() { return cIdentifier_list_linhaIdentifier_list_linhaParserRuleCall_1_0; }
	}
	public class Identifier_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identifier_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		private final Assignment cIdentifier_list_linhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdentifier_list_linhaIdentifier_list_linhaParserRuleCall_1_2_0 = (RuleCall)cIdentifier_list_linhaAssignment_1_2.eContents().get(0);
		
		//identifier_list_linha:
		//	{IdentifierListLinhaAction} (',' identifier=IDz identifier_list_linha=identifier_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IdentifierListLinhaAction} (',' identifier=IDz identifier_list_linha=identifier_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{IdentifierListLinhaAction}
		public Action getIdentifierListLinhaActionAction_0() { return cIdentifierListLinhaActionAction_0; }
		
		//(',' identifier=IDz identifier_list_linha=identifier_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_1_1_0() { return cIdentifierIDzTerminalRuleCall_1_1_0; }
		
		//identifier_list_linha=identifier_list_linha
		public Assignment getIdentifier_list_linhaAssignment_1_2() { return cIdentifier_list_linhaAssignment_1_2; }
		
		//identifier_list_linha
		public RuleCall getIdentifier_list_linhaIdentifier_list_linhaParserRuleCall_1_2_0() { return cIdentifier_list_linhaIdentifier_list_linhaParserRuleCall_1_2_0; }
	}
	public class Translation_unit_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.translation_unit_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTranlationUnitLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExternal_declarationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExternal_declarationExternal_declarationParserRuleCall_1_0_0 = (RuleCall)cExternal_declarationAssignment_1_0.eContents().get(0);
		private final Assignment cTranslation_unit_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTranslation_unit_linhaTranslation_unit_linhaParserRuleCall_1_1_0 = (RuleCall)cTranslation_unit_linhaAssignment_1_1.eContents().get(0);
		
		//translation_unit_linha:
		//	{TranlationUnitLinhaAction} (external_declaration=external_declaration
		//	translation_unit_linha=translation_unit_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TranlationUnitLinhaAction} (external_declaration=external_declaration translation_unit_linha=translation_unit_linha)?
		public Group getGroup() { return cGroup; }
		
		//{TranlationUnitLinhaAction}
		public Action getTranlationUnitLinhaActionAction_0() { return cTranlationUnitLinhaActionAction_0; }
		
		//(external_declaration=external_declaration translation_unit_linha=translation_unit_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//external_declaration=external_declaration
		public Assignment getExternal_declarationAssignment_1_0() { return cExternal_declarationAssignment_1_0; }
		
		//external_declaration
		public RuleCall getExternal_declarationExternal_declarationParserRuleCall_1_0_0() { return cExternal_declarationExternal_declarationParserRuleCall_1_0_0; }
		
		//translation_unit_linha=translation_unit_linha
		public Assignment getTranslation_unit_linhaAssignment_1_1() { return cTranslation_unit_linhaAssignment_1_1; }
		
		//translation_unit_linha
		public RuleCall getTranslation_unit_linhaTranslation_unit_linhaParserRuleCall_1_1_0() { return cTranslation_unit_linhaTranslation_unit_linhaParserRuleCall_1_1_0; }
	}
	public class Primary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.primary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIdentifierIDzTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_0 = (RuleCall)cConstantAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cGeneric_selectionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGeneric_selectionGeneric_selectionParserRuleCall_3_0 = (RuleCall)cGeneric_selectionAssignment_3.eContents().get(0);
		
		//primary_expression:
		//	identifier=IDz
		//	| constant=constant
		//	| '(' expression=expression ')'
		//	| generic_selection=generic_selection;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=IDz | constant=constant | '(' expression=expression ')' | generic_selection=generic_selection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_0_0() { return cIdentifierIDzTerminalRuleCall_0_0; }
		
		//constant=constant
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//constant
		public RuleCall getConstantConstantParserRuleCall_1_0() { return cConstantConstantParserRuleCall_1_0; }
		
		//'(' expression=expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//generic_selection=generic_selection
		public Assignment getGeneric_selectionAssignment_3() { return cGeneric_selectionAssignment_3; }
		
		//generic_selection
		public RuleCall getGeneric_selectionGeneric_selectionParserRuleCall_3_0() { return cGeneric_selectionGeneric_selectionParserRuleCall_3_0; }
	}
	public class Enumeration_constantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enumeration_constant");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		////TODO NINGUEM CHAMA
		//enumeration_constant /* before it has been defined as such */:
		//	identifier=IDz;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_0() { return cIdentifierIDzTerminalRuleCall_0; }
	}
	public class Generic_selectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.generic_selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment c_genericAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword c_generic_GenericKeyword_0_0 = (Keyword)c_genericAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_0 = (RuleCall)cAssignment_expressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeneric_assoc_listAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeneric_assoc_listGeneric_assoc_listParserRuleCall_4_0 = (RuleCall)cGeneric_assoc_listAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//generic_selection:
		//	_generic='_Generic' '(' assignment_expression=assignment_expression ',' generic_assoc_list+=generic_assoc_list ')';
		@Override public ParserRule getRule() { return rule; }
		
		//_generic='_Generic' '(' assignment_expression=assignment_expression ',' generic_assoc_list+=generic_assoc_list ')'
		public Group getGroup() { return cGroup; }
		
		//_generic='_Generic'
		public Assignment get_genericAssignment_0() { return c_genericAssignment_0; }
		
		//'_Generic'
		public Keyword get_generic_GenericKeyword_0_0() { return c_generic_GenericKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2() { return cAssignment_expressionAssignment_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//generic_assoc_list+=generic_assoc_list
		public Assignment getGeneric_assoc_listAssignment_4() { return cGeneric_assoc_listAssignment_4; }
		
		//generic_assoc_list
		public RuleCall getGeneric_assoc_listGeneric_assoc_listParserRuleCall_4_0() { return cGeneric_assoc_listGeneric_assoc_listParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class Generic_assoc_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.generic_assoc_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGeneric_associationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGeneric_associationGeneric_associationParserRuleCall_0_0 = (RuleCall)cGeneric_associationAssignment_0.eContents().get(0);
		private final Assignment cGeneric_assoc_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeneric_assoc_list_linhaGeneric_assoc_list_linhaParserRuleCall_1_0 = (RuleCall)cGeneric_assoc_list_linhaAssignment_1.eContents().get(0);
		
		//generic_assoc_list:
		//	generic_association=generic_association generic_assoc_list_linha=generic_assoc_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//generic_association=generic_association generic_assoc_list_linha=generic_assoc_list_linha
		public Group getGroup() { return cGroup; }
		
		//generic_association=generic_association
		public Assignment getGeneric_associationAssignment_0() { return cGeneric_associationAssignment_0; }
		
		//generic_association
		public RuleCall getGeneric_associationGeneric_associationParserRuleCall_0_0() { return cGeneric_associationGeneric_associationParserRuleCall_0_0; }
		
		//generic_assoc_list_linha=generic_assoc_list_linha
		public Assignment getGeneric_assoc_list_linhaAssignment_1() { return cGeneric_assoc_list_linhaAssignment_1; }
		
		//generic_assoc_list_linha
		public RuleCall getGeneric_assoc_list_linhaGeneric_assoc_list_linhaParserRuleCall_1_0() { return cGeneric_assoc_list_linhaGeneric_assoc_list_linhaParserRuleCall_1_0; }
	}
	public class Generic_assoc_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.generic_assoc_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGenericAssocListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGeneric_associationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGeneric_associationGeneric_associationParserRuleCall_1_1_0 = (RuleCall)cGeneric_associationAssignment_1_1.eContents().get(0);
		private final Assignment cGeneric_assoc_list_linhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cGeneric_assoc_list_linhaGeneric_assoc_list_linhaParserRuleCall_1_2_0 = (RuleCall)cGeneric_assoc_list_linhaAssignment_1_2.eContents().get(0);
		
		//generic_assoc_list_linha:
		//	{GenericAssocListLinhaAction} (',' generic_association=generic_association
		//	generic_assoc_list_linha=generic_assoc_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GenericAssocListLinhaAction} (',' generic_association=generic_association
		//generic_assoc_list_linha=generic_assoc_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{GenericAssocListLinhaAction}
		public Action getGenericAssocListLinhaActionAction_0() { return cGenericAssocListLinhaActionAction_0; }
		
		//(',' generic_association=generic_association generic_assoc_list_linha=generic_assoc_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//generic_association=generic_association
		public Assignment getGeneric_associationAssignment_1_1() { return cGeneric_associationAssignment_1_1; }
		
		//generic_association
		public RuleCall getGeneric_associationGeneric_associationParserRuleCall_1_1_0() { return cGeneric_associationGeneric_associationParserRuleCall_1_1_0; }
		
		//generic_assoc_list_linha=generic_assoc_list_linha
		public Assignment getGeneric_assoc_list_linhaAssignment_1_2() { return cGeneric_assoc_list_linhaAssignment_1_2; }
		
		//generic_assoc_list_linha
		public RuleCall getGeneric_assoc_list_linhaGeneric_assoc_list_linhaParserRuleCall_1_2_0() { return cGeneric_assoc_list_linhaGeneric_assoc_list_linhaParserRuleCall_1_2_0; }
	}
	public class Generic_associationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.generic_association");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cType_nameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cType_nameType_nameParserRuleCall_0_0_0 = (RuleCall)cType_nameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_2_0 = (RuleCall)cAssignment_expressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDefaultAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_1_0_0 = (Keyword)cDefaultAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_2_0 = (RuleCall)cAssignment_expressionAssignment_1_2.eContents().get(0);
		
		//generic_association:
		//	type_name=type_name ':' assignment_expression=assignment_expression
		//	| default='default' ':' assignment_expression=assignment_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//type_name=type_name ':' assignment_expression=assignment_expression | default='default' ':'
		//assignment_expression=assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type_name=type_name ':' assignment_expression=assignment_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_0_0() { return cType_nameAssignment_0_0; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_0_0_0() { return cType_nameType_nameParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0_2() { return cAssignment_expressionAssignment_0_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_2_0; }
		
		//default='default' ':' assignment_expression=assignment_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//default='default'
		public Assignment getDefaultAssignment_1_0() { return cDefaultAssignment_1_0; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_1_0_0() { return cDefaultDefaultKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1_2() { return cAssignment_expressionAssignment_1_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_2_0; }
	}
	public class Postfix_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.postfix_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrimary_expressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrimary_expressionPrimary_expressionParserRuleCall_0_0_0 = (RuleCall)cPrimary_expressionAssignment_0_0.eContents().get(0);
		private final Assignment cPostfix_expression_linhaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_0_1_0 = (RuleCall)cPostfix_expression_linhaAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cType_nameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cInitializer_listAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cInitializer_listInitializer_listParserRuleCall_1_4_0 = (RuleCall)cInitializer_listAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cPostfix_expression_linhaAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_1_6_0 = (RuleCall)cPostfix_expression_linhaAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cType_nameParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cInitializer_listAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cInitializer_listInitializer_listParserRuleCall_2_4_0 = (RuleCall)cInitializer_listAssignment_2_4.eContents().get(0);
		private final Keyword cCommaKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cPostfix_expression_linhaAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_2_7_0 = (RuleCall)cPostfix_expression_linhaAssignment_2_7.eContents().get(0);
		
		//postfix_expression:
		//	primary_expression=primary_expression postfix_expression_linha=postfix_expression_linha
		//	| '(' type_name ')' '{' initializer_list=initializer_list '}' postfix_expression_linha=postfix_expression_linha
		//	| '(' type_name ')' '{' initializer_list=initializer_list ',' '}' postfix_expression_linha=postfix_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//primary_expression=primary_expression postfix_expression_linha=postfix_expression_linha | '(' type_name ')' '{'
		//initializer_list=initializer_list '}' postfix_expression_linha=postfix_expression_linha | '(' type_name ')' '{'
		//initializer_list=initializer_list ',' '}' postfix_expression_linha=postfix_expression_linha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primary_expression=primary_expression postfix_expression_linha=postfix_expression_linha
		public Group getGroup_0() { return cGroup_0; }
		
		//primary_expression=primary_expression
		public Assignment getPrimary_expressionAssignment_0_0() { return cPrimary_expressionAssignment_0_0; }
		
		//primary_expression
		public RuleCall getPrimary_expressionPrimary_expressionParserRuleCall_0_0_0() { return cPrimary_expressionPrimary_expressionParserRuleCall_0_0_0; }
		
		//postfix_expression_linha=postfix_expression_linha
		public Assignment getPostfix_expression_linhaAssignment_0_1() { return cPostfix_expression_linhaAssignment_0_1; }
		
		//postfix_expression_linha
		public RuleCall getPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_0_1_0() { return cPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_0_1_0; }
		
		//'(' type_name ')' '{' initializer_list=initializer_list '}' postfix_expression_linha=postfix_expression_linha
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type_name
		public RuleCall getType_nameParserRuleCall_1_1() { return cType_nameParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }
		
		//initializer_list=initializer_list
		public Assignment getInitializer_listAssignment_1_4() { return cInitializer_listAssignment_1_4; }
		
		//initializer_list
		public RuleCall getInitializer_listInitializer_listParserRuleCall_1_4_0() { return cInitializer_listInitializer_listParserRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
		
		//postfix_expression_linha=postfix_expression_linha
		public Assignment getPostfix_expression_linhaAssignment_1_6() { return cPostfix_expression_linhaAssignment_1_6; }
		
		//postfix_expression_linha
		public RuleCall getPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_1_6_0() { return cPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_1_6_0; }
		
		//'(' type_name ')' '{' initializer_list=initializer_list ',' '}' postfix_expression_linha=postfix_expression_linha
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//type_name
		public RuleCall getType_nameParserRuleCall_2_1() { return cType_nameParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_3() { return cLeftCurlyBracketKeyword_2_3; }
		
		//initializer_list=initializer_list
		public Assignment getInitializer_listAssignment_2_4() { return cInitializer_listAssignment_2_4; }
		
		//initializer_list
		public RuleCall getInitializer_listInitializer_listParserRuleCall_2_4_0() { return cInitializer_listInitializer_listParserRuleCall_2_4_0; }
		
		//','
		public Keyword getCommaKeyword_2_5() { return cCommaKeyword_2_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_6() { return cRightCurlyBracketKeyword_2_6; }
		
		//postfix_expression_linha=postfix_expression_linha
		public Assignment getPostfix_expression_linhaAssignment_2_7() { return cPostfix_expression_linhaAssignment_2_7; }
		
		//postfix_expression_linha
		public RuleCall getPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_2_7_0() { return cPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_2_7_0; }
	}
	public class Postfix_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.postfix_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixExpressionLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPostfix_expression_complementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPostfix_expression_complementPostfix_expression_complementParserRuleCall_1_0_0 = (RuleCall)cPostfix_expression_complementAssignment_1_0.eContents().get(0);
		private final Assignment cPostfix_expression_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_1_1_0 = (RuleCall)cPostfix_expression_linhaAssignment_1_1.eContents().get(0);
		
		//postfix_expression_linha:
		//	{PostfixExpressionLinhaAction} (postfix_expression_complement=postfix_expression_complement
		//	postfix_expression_linha=postfix_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PostfixExpressionLinhaAction} (postfix_expression_complement=postfix_expression_complement
		//postfix_expression_linha=postfix_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//{PostfixExpressionLinhaAction}
		public Action getPostfixExpressionLinhaActionAction_0() { return cPostfixExpressionLinhaActionAction_0; }
		
		//(postfix_expression_complement=postfix_expression_complement postfix_expression_linha=postfix_expression_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//postfix_expression_complement=postfix_expression_complement
		public Assignment getPostfix_expression_complementAssignment_1_0() { return cPostfix_expression_complementAssignment_1_0; }
		
		//postfix_expression_complement
		public RuleCall getPostfix_expression_complementPostfix_expression_complementParserRuleCall_1_0_0() { return cPostfix_expression_complementPostfix_expression_complementParserRuleCall_1_0_0; }
		
		//postfix_expression_linha=postfix_expression_linha
		public Assignment getPostfix_expression_linhaAssignment_1_1() { return cPostfix_expression_linhaAssignment_1_1; }
		
		//postfix_expression_linha
		public RuleCall getPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_1_1_0() { return cPostfix_expression_linhaPostfix_expression_linhaParserRuleCall_1_1_0; }
	}
	public class Initializer_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDesignationAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDesignationDesignationParserRuleCall_0_0_0 = (RuleCall)cDesignationAssignment_0_0.eContents().get(0);
		private final Assignment cInitializerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_0_1_0 = (RuleCall)cInitializerAssignment_0_1.eContents().get(0);
		private final Assignment cInit_declarator_list_linhaAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_0_2_0 = (RuleCall)cInit_declarator_list_linhaAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInitializerAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInitializerInitializerParserRuleCall_1_0_0 = (RuleCall)cInitializerAssignment_1_0.eContents().get(0);
		private final Assignment cInit_declarator_list_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_1_0 = (RuleCall)cInit_declarator_list_linhaAssignment_1_1.eContents().get(0);
		
		//initializer_list:
		//	designation=designation initializer=initializer init_declarator_list_linha=init_declarator_list_linha
		//	| initializer=initializer init_declarator_list_linha=init_declarator_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//designation=designation initializer=initializer init_declarator_list_linha=init_declarator_list_linha |
		//initializer=initializer init_declarator_list_linha=init_declarator_list_linha
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//designation=designation initializer=initializer init_declarator_list_linha=init_declarator_list_linha
		public Group getGroup_0() { return cGroup_0; }
		
		//designation=designation
		public Assignment getDesignationAssignment_0_0() { return cDesignationAssignment_0_0; }
		
		//designation
		public RuleCall getDesignationDesignationParserRuleCall_0_0_0() { return cDesignationDesignationParserRuleCall_0_0_0; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_0_1() { return cInitializerAssignment_0_1; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_0_1_0() { return cInitializerInitializerParserRuleCall_0_1_0; }
		
		//init_declarator_list_linha=init_declarator_list_linha
		public Assignment getInit_declarator_list_linhaAssignment_0_2() { return cInit_declarator_list_linhaAssignment_0_2; }
		
		//init_declarator_list_linha
		public RuleCall getInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_0_2_0() { return cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_0_2_0; }
		
		//initializer=initializer init_declarator_list_linha=init_declarator_list_linha
		public Group getGroup_1() { return cGroup_1; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_1_0() { return cInitializerAssignment_1_0; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_0_0() { return cInitializerInitializerParserRuleCall_1_0_0; }
		
		//init_declarator_list_linha=init_declarator_list_linha
		public Assignment getInit_declarator_list_linhaAssignment_1_1() { return cInit_declarator_list_linhaAssignment_1_1; }
		
		//init_declarator_list_linha
		public RuleCall getInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_1_0() { return cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_1_0; }
	}
	public class Initializer_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializerListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cInitializer_list_complementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInitializer_list_complementInitializer_list_complementParserRuleCall_1_0_0 = (RuleCall)cInitializer_list_complementAssignment_1_0.eContents().get(0);
		private final Assignment cInit_declarator_list_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_1_0 = (RuleCall)cInit_declarator_list_linhaAssignment_1_1.eContents().get(0);
		
		//initializer_list_linha:
		//	{InitializerListLinhaAction} (initializer_list_complement=initializer_list_complement
		//	init_declarator_list_linha=init_declarator_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitializerListLinhaAction} (initializer_list_complement=initializer_list_complement
		//init_declarator_list_linha=init_declarator_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{InitializerListLinhaAction}
		public Action getInitializerListLinhaActionAction_0() { return cInitializerListLinhaActionAction_0; }
		
		//(initializer_list_complement=initializer_list_complement init_declarator_list_linha=init_declarator_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//initializer_list_complement=initializer_list_complement
		public Assignment getInitializer_list_complementAssignment_1_0() { return cInitializer_list_complementAssignment_1_0; }
		
		//initializer_list_complement
		public RuleCall getInitializer_list_complementInitializer_list_complementParserRuleCall_1_0_0() { return cInitializer_list_complementInitializer_list_complementParserRuleCall_1_0_0; }
		
		//init_declarator_list_linha=init_declarator_list_linha
		public Assignment getInit_declarator_list_linhaAssignment_1_1() { return cInit_declarator_list_linhaAssignment_1_1; }
		
		//init_declarator_list_linha
		public RuleCall getInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_1_0() { return cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_1_0; }
	}
	public class Initializer_list_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer_list_complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCommaKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDesignationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDesignationDesignationParserRuleCall_0_1_0 = (RuleCall)cDesignationAssignment_0_1.eContents().get(0);
		private final Assignment cInitializerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInitializerInitializerParserRuleCall_0_2_0 = (RuleCall)cInitializerAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitializerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_1_1_0 = (RuleCall)cInitializerAssignment_1_1.eContents().get(0);
		
		//initializer_list_complement:
		//	',' designation=designation initializer=initializer
		//	| ',' initializer=initializer;
		@Override public ParserRule getRule() { return rule; }
		
		//',' designation=designation initializer=initializer | ',' initializer=initializer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//',' designation=designation initializer=initializer
		public Group getGroup_0() { return cGroup_0; }
		
		//','
		public Keyword getCommaKeyword_0_0() { return cCommaKeyword_0_0; }
		
		//designation=designation
		public Assignment getDesignationAssignment_0_1() { return cDesignationAssignment_0_1; }
		
		//designation
		public RuleCall getDesignationDesignationParserRuleCall_0_1_0() { return cDesignationDesignationParserRuleCall_0_1_0; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_0_2() { return cInitializerAssignment_0_2; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_0_2_0() { return cInitializerInitializerParserRuleCall_0_2_0; }
		
		//',' initializer=initializer
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_1_1() { return cInitializerAssignment_1_1; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_1_0() { return cInitializerInitializerParserRuleCall_1_1_0; }
	}
	public class DesignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignator_listAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignator_listDesignator_listParserRuleCall_0_0 = (RuleCall)cDesignator_listAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//designation:
		//	designator_list=designator_list '=';
		@Override public ParserRule getRule() { return rule; }
		
		//designator_list=designator_list '='
		public Group getGroup() { return cGroup; }
		
		//designator_list=designator_list
		public Assignment getDesignator_listAssignment_0() { return cDesignator_listAssignment_0; }
		
		//designator_list
		public RuleCall getDesignator_listDesignator_listParserRuleCall_0_0() { return cDesignator_listDesignator_listParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class Designator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignatorDesignatorParserRuleCall_0_0 = (RuleCall)cDesignatorAssignment_0.eContents().get(0);
		private final Assignment cDesignator_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDesignator_list_linhaDesignator_list_linhaParserRuleCall_1_0 = (RuleCall)cDesignator_list_linhaAssignment_1.eContents().get(0);
		
		//designator_list:
		//	designator=designator designator_list_linha=designator_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//designator=designator designator_list_linha=designator_list_linha
		public Group getGroup() { return cGroup; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_0() { return cDesignatorAssignment_0; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_0_0() { return cDesignatorDesignatorParserRuleCall_0_0; }
		
		//designator_list_linha=designator_list_linha
		public Assignment getDesignator_list_linhaAssignment_1() { return cDesignator_list_linhaAssignment_1; }
		
		//designator_list_linha
		public RuleCall getDesignator_list_linhaDesignator_list_linhaParserRuleCall_1_0() { return cDesignator_list_linhaDesignator_list_linhaParserRuleCall_1_0; }
	}
	public class Designator_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDesignatorListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDesignatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDesignatorDesignatorParserRuleCall_1_0_0 = (RuleCall)cDesignatorAssignment_1_0.eContents().get(0);
		private final Assignment cDesignator_list_linhaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDesignator_list_linhaDeclaration_list_linhaParserRuleCall_1_1_0 = (RuleCall)cDesignator_list_linhaAssignment_1_1.eContents().get(0);
		
		//designator_list_linha:
		//	{DesignatorListLinhaAction} (designator=designator designator_list_linha=declaration_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DesignatorListLinhaAction} (designator=designator designator_list_linha=declaration_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{DesignatorListLinhaAction}
		public Action getDesignatorListLinhaActionAction_0() { return cDesignatorListLinhaActionAction_0; }
		
		//(designator=designator designator_list_linha=declaration_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_1_0() { return cDesignatorAssignment_1_0; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_1_0_0() { return cDesignatorDesignatorParserRuleCall_1_0_0; }
		
		//designator_list_linha=declaration_list_linha
		public Assignment getDesignator_list_linhaAssignment_1_1() { return cDesignator_list_linhaAssignment_1_1; }
		
		//declaration_list_linha
		public RuleCall getDesignator_list_linhaDeclaration_list_linhaParserRuleCall_1_1_0() { return cDesignator_list_linhaDeclaration_list_linhaParserRuleCall_1_1_0; }
	}
	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConstant_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConstant_expressionConditional_expressionParserRuleCall_0_1_0 = (RuleCall)cConstant_expressionAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		
		//designator:
		//	'[' constant_expression=conditional_expression ']'
		//	| '.' identifier=IDz;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' constant_expression=conditional_expression ']' | '.' identifier=IDz
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' constant_expression=conditional_expression ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//constant_expression=conditional_expression
		public Assignment getConstant_expressionAssignment_0_1() { return cConstant_expressionAssignment_0_1; }
		
		//conditional_expression
		public RuleCall getConstant_expressionConditional_expressionParserRuleCall_0_1_0() { return cConstant_expressionConditional_expressionParserRuleCall_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//'.' identifier=IDz
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_1_1_0() { return cIdentifierIDzTerminalRuleCall_1_1_0; }
	}
	public class Static_assert_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.static_assert_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Static_assertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstant_expressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_2_0 = (RuleCall)cConstant_expressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//static_assert_declaration:
		//	'_Static_assert' '(' constant_expression=constant_expression ',' STRING_LITERAL ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'_Static_assert' '(' constant_expression=constant_expression ',' STRING_LITERAL ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'_Static_assert'
		public Keyword get_Static_assertKeyword_0() { return c_Static_assertKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_2() { return cConstant_expressionAssignment_2; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_2_0() { return cConstant_expressionConstant_expressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_4() { return cSTRING_LITERALTerminalRuleCall_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class Postfix_expression_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.postfix_expression_complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPostFixEmpryParamsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgument_expression_listAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgument_expression_listArgument_expression_listParserRuleCall_2_1_0 = (RuleCall)cArgument_expression_listAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIdentifierAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_3_1_0 = (RuleCall)cIdentifierAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIdentifierAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_4_1_0 = (RuleCall)cIdentifierAssignment_4_1.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cHyphenMinusHyphenMinusKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//postfix_expression_complement:
		//	'[' expression=expression ']'
		//	| {PostFixEmpryParams} '(' ')'
		//	| '(' argument_expression_list=argument_expression_list ')'
		//	| '.' identifier=IDz
		//	| '->' identifier=IDz
		//	| '++'
		//	| '--';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression=expression ']' | {PostFixEmpryParams} '(' ')' | '(' argument_expression_list=argument_expression_list ')'
		//| '.' identifier=IDz | '->' identifier=IDz | '++' | '--'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' expression=expression ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//{PostFixEmpryParams} '(' ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PostFixEmpryParams}
		public Action getPostFixEmpryParamsAction_1_0() { return cPostFixEmpryParamsAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'(' argument_expression_list=argument_expression_list ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//argument_expression_list=argument_expression_list
		public Assignment getArgument_expression_listAssignment_2_1() { return cArgument_expression_listAssignment_2_1; }
		
		//argument_expression_list
		public RuleCall getArgument_expression_listArgument_expression_listParserRuleCall_2_1_0() { return cArgument_expression_listArgument_expression_listParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'.' identifier=IDz
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_3_1() { return cIdentifierAssignment_3_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_3_1_0() { return cIdentifierIDzTerminalRuleCall_3_1_0; }
		
		//'->' identifier=IDz
		public Group getGroup_4() { return cGroup_4; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_0() { return cHyphenMinusGreaterThanSignKeyword_4_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_4_1() { return cIdentifierAssignment_4_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_4_1_0() { return cIdentifierIDzTerminalRuleCall_4_1_0; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_5() { return cPlusSignPlusSignKeyword_5; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_6() { return cHyphenMinusHyphenMinusKeyword_6; }
	}
	public class Argument_expression_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.argument_expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignment_expressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignment_expressionsAssignment_expressionParserRuleCall_0_0 = (RuleCall)cAssignment_expressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignment_expressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignment_expressionsAssignment_expressionParserRuleCall_1_1_0 = (RuleCall)cAssignment_expressionsAssignment_1_1.eContents().get(0);
		
		//argument_expression_list:
		//	assignment_expressions+=assignment_expression (',' assignment_expressions+=assignment_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//assignment_expressions+=assignment_expression (',' assignment_expressions+=assignment_expression)*
		public Group getGroup() { return cGroup; }
		
		//assignment_expressions+=assignment_expression
		public Assignment getAssignment_expressionsAssignment_0() { return cAssignment_expressionsAssignment_0; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionsAssignment_expressionParserRuleCall_0_0() { return cAssignment_expressionsAssignment_expressionParserRuleCall_0_0; }
		
		//(',' assignment_expressions+=assignment_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//assignment_expressions+=assignment_expression
		public Assignment getAssignment_expressionsAssignment_1_1() { return cAssignment_expressionsAssignment_1_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionsAssignment_expressionParserRuleCall_1_1_0() { return cAssignment_expressionsAssignment_expressionParserRuleCall_1_1_0; }
	}
	public class Argument_expression_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.argument_expression_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentExpressionListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_1_0 = (RuleCall)cAssignment_expressionAssignment_1_1.eContents().get(0);
		private final Assignment cArgument_expression_list_linhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgument_expression_list_linhaArgument_expression_list_linhaParserRuleCall_1_2_0 = (RuleCall)cArgument_expression_list_linhaAssignment_1_2.eContents().get(0);
		
		//argument_expression_list_linha:
		//	{ArgumentExpressionListLinhaAction} (',' assignment_expression=assignment_expression
		//	argument_expression_list_linha=argument_expression_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArgumentExpressionListLinhaAction} (',' assignment_expression=assignment_expression
		//argument_expression_list_linha=argument_expression_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{ArgumentExpressionListLinhaAction}
		public Action getArgumentExpressionListLinhaActionAction_0() { return cArgumentExpressionListLinhaActionAction_0; }
		
		//(',' assignment_expression=assignment_expression argument_expression_list_linha=argument_expression_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1_1() { return cAssignment_expressionAssignment_1_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_1_0; }
		
		//argument_expression_list_linha=argument_expression_list_linha
		public Assignment getArgument_expression_list_linhaAssignment_1_2() { return cArgument_expression_list_linhaAssignment_1_2; }
		
		//argument_expression_list_linha
		public RuleCall getArgument_expression_list_linhaArgument_expression_list_linhaParserRuleCall_1_2_0() { return cArgument_expression_list_linhaArgument_expression_list_linhaParserRuleCall_1_2_0; }
	}
	public class Unary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPostfix_expressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPostfix_expressionPostfix_expressionParserRuleCall_0_0 = (RuleCall)cPostfix_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPlusPlusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cPlusAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cPlusPlusSignPlusSignKeyword_1_1_0 = (Keyword)cPlusAssignment_1_1.eContents().get(0);
		private final Assignment cUnary_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_1_2_0 = (RuleCall)cUnary_expressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUnary_expressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_2_1_0 = (RuleCall)cUnary_expressionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cUnary_operatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cUnary_operatorUnary_operatorParserRuleCall_3_0_0 = (RuleCall)cUnary_operatorAssignment_3_0.eContents().get(0);
		private final Assignment cCast_expressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_3_1_0 = (RuleCall)cCast_expressionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cSizeofKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUnary_expressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_4_1_0 = (RuleCall)cUnary_expressionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cSizeofKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cType_nameAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cType_nameType_nameParserRuleCall_5_2_0 = (RuleCall)cType_nameAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword c_AlignofKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cType_nameAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cType_nameType_nameParserRuleCall_6_2_0 = (RuleCall)cType_nameAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//unary_expression:
		//	postfix_expression=postfix_expression
		//	| {PlusPlus} plus='++' unary_expression=unary_expression
		//	| '--' unary_expression=unary_expression
		//	| unary_operator=unary_operator cast_expression=cast_expression
		//	| 'sizeof' unary_expression=unary_expression
		//	| 'sizeof' '(' type_name=type_name ')'
		//	| '_Alignof' '(' type_name=type_name ')';
		@Override public ParserRule getRule() { return rule; }
		
		//postfix_expression=postfix_expression | {PlusPlus} plus='++' unary_expression=unary_expression | '--'
		//unary_expression=unary_expression | unary_operator=unary_operator cast_expression=cast_expression | 'sizeof'
		//unary_expression=unary_expression | 'sizeof' '(' type_name=type_name ')' | '_Alignof' '(' type_name=type_name ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//postfix_expression=postfix_expression
		public Assignment getPostfix_expressionAssignment_0() { return cPostfix_expressionAssignment_0; }
		
		//postfix_expression
		public RuleCall getPostfix_expressionPostfix_expressionParserRuleCall_0_0() { return cPostfix_expressionPostfix_expressionParserRuleCall_0_0; }
		
		//{PlusPlus} plus='++' unary_expression=unary_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//{PlusPlus}
		public Action getPlusPlusAction_1_0() { return cPlusPlusAction_1_0; }
		
		//plus='++'
		public Assignment getPlusAssignment_1_1() { return cPlusAssignment_1_1; }
		
		//'++'
		public Keyword getPlusPlusSignPlusSignKeyword_1_1_0() { return cPlusPlusSignPlusSignKeyword_1_1_0; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_1_2() { return cUnary_expressionAssignment_1_2; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_1_2_0() { return cUnary_expressionUnary_expressionParserRuleCall_1_2_0; }
		
		//'--' unary_expression=unary_expression
		public Group getGroup_2() { return cGroup_2; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_2_0() { return cHyphenMinusHyphenMinusKeyword_2_0; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_2_1() { return cUnary_expressionAssignment_2_1; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_2_1_0() { return cUnary_expressionUnary_expressionParserRuleCall_2_1_0; }
		
		//unary_operator=unary_operator cast_expression=cast_expression
		public Group getGroup_3() { return cGroup_3; }
		
		//unary_operator=unary_operator
		public Assignment getUnary_operatorAssignment_3_0() { return cUnary_operatorAssignment_3_0; }
		
		//unary_operator
		public RuleCall getUnary_operatorUnary_operatorParserRuleCall_3_0_0() { return cUnary_operatorUnary_operatorParserRuleCall_3_0_0; }
		
		//cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_3_1() { return cCast_expressionAssignment_3_1; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_3_1_0() { return cCast_expressionCast_expressionParserRuleCall_3_1_0; }
		
		//'sizeof' unary_expression=unary_expression
		public Group getGroup_4() { return cGroup_4; }
		
		//'sizeof'
		public Keyword getSizeofKeyword_4_0() { return cSizeofKeyword_4_0; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_4_1() { return cUnary_expressionAssignment_4_1; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_4_1_0() { return cUnary_expressionUnary_expressionParserRuleCall_4_1_0; }
		
		//'sizeof' '(' type_name=type_name ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'sizeof'
		public Keyword getSizeofKeyword_5_0() { return cSizeofKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_5_2() { return cType_nameAssignment_5_2; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_5_2_0() { return cType_nameType_nameParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//'_Alignof' '(' type_name=type_name ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//'_Alignof'
		public Keyword get_AlignofKeyword_6_0() { return c_AlignofKeyword_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_6_2() { return cType_nameAssignment_6_2; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_6_2_0() { return cType_nameType_nameParserRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
	}
	public class Cast_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.cast_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUnary_expressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_0_0 = (RuleCall)cUnary_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cType_nameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_nameType_nameParserRuleCall_1_1_0 = (RuleCall)cType_nameAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCast_expressionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_1_3_0 = (RuleCall)cCast_expressionAssignment_1_3.eContents().get(0);
		
		//cast_expression:
		//	unary_expression=unary_expression
		//	| '(' type_name=type_name ')' cast_expression=cast_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//unary_expression=unary_expression | '(' type_name=type_name ')' cast_expression=cast_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_0() { return cUnary_expressionAssignment_0; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_0_0() { return cUnary_expressionUnary_expressionParserRuleCall_0_0; }
		
		//'(' type_name=type_name ')' cast_expression=cast_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_1_1() { return cType_nameAssignment_1_1; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_1_1_0() { return cType_nameType_nameParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_1_3() { return cCast_expressionAssignment_1_3; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_1_3_0() { return cCast_expressionCast_expressionParserRuleCall_1_3_0; }
	}
	public class Multiplicative_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.multiplicative_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCast_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_0_0 = (RuleCall)cCast_expressionAssignment_0.eContents().get(0);
		private final Assignment cMultiplicative_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultiplicative_expression_linhaMultiplicative_expression_linhaParserRuleCall_1_0 = (RuleCall)cMultiplicative_expression_linhaAssignment_1.eContents().get(0);
		
		//multiplicative_expression:
		//	cast_expression=cast_expression multiplicative_expression_linha=multiplicative_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//cast_expression=cast_expression multiplicative_expression_linha=multiplicative_expression_linha
		public Group getGroup() { return cGroup; }
		
		//cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_0() { return cCast_expressionAssignment_0; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_0_0() { return cCast_expressionCast_expressionParserRuleCall_0_0; }
		
		//multiplicative_expression_linha=multiplicative_expression_linha
		public Assignment getMultiplicative_expression_linhaAssignment_1() { return cMultiplicative_expression_linhaAssignment_1; }
		
		//multiplicative_expression_linha
		public RuleCall getMultiplicative_expression_linhaMultiplicative_expression_linhaParserRuleCall_1_0() { return cMultiplicative_expression_linhaMultiplicative_expression_linhaParserRuleCall_1_0; }
	}
	public class Multiplicative_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.multiplicative_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicative_expression_complementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicative_expression_complementMultiplicative_expression_complementParserRuleCall_0_0 = (RuleCall)cMultiplicative_expression_complementAssignment_0.eContents().get(0);
		private final Assignment cMultiplicative_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultiplicative_expression_linhaMultiplicative_expression_linhaParserRuleCall_1_0 = (RuleCall)cMultiplicative_expression_linhaAssignment_1.eContents().get(0);
		
		//multiplicative_expression_linha:
		//	(multiplicative_expression_complement=multiplicative_expression_complement
		//	multiplicative_expression_linha=multiplicative_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(multiplicative_expression_complement=multiplicative_expression_complement
		//multiplicative_expression_linha=multiplicative_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//multiplicative_expression_complement=multiplicative_expression_complement
		public Assignment getMultiplicative_expression_complementAssignment_0() { return cMultiplicative_expression_complementAssignment_0; }
		
		//multiplicative_expression_complement
		public RuleCall getMultiplicative_expression_complementMultiplicative_expression_complementParserRuleCall_0_0() { return cMultiplicative_expression_complementMultiplicative_expression_complementParserRuleCall_0_0; }
		
		//multiplicative_expression_linha=multiplicative_expression_linha
		public Assignment getMultiplicative_expression_linhaAssignment_1() { return cMultiplicative_expression_linhaAssignment_1; }
		
		//multiplicative_expression_linha
		public RuleCall getMultiplicative_expression_linhaMultiplicative_expression_linhaParserRuleCall_1_0() { return cMultiplicative_expression_linhaMultiplicative_expression_linhaParserRuleCall_1_0; }
	}
	public class Multiplicative_expression_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.multiplicative_expression_complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMultiplicaAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cMultiplicaAsteriskKeyword_0_0_0 = (Keyword)cMultiplicaAssignment_0_0.eContents().get(0);
		private final Assignment cCast_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_0_1_0 = (RuleCall)cCast_expressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDivideAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cDivideSolidusKeyword_1_0_0 = (Keyword)cDivideAssignment_1_0.eContents().get(0);
		private final Assignment cCast_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_1_1_0 = (RuleCall)cCast_expressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cModuloAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cModuloPercentSignKeyword_2_0_0 = (Keyword)cModuloAssignment_2_0.eContents().get(0);
		private final Assignment cCast_expressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_2_1_0 = (RuleCall)cCast_expressionAssignment_2_1.eContents().get(0);
		
		//multiplicative_expression_complement:
		//	multiplica='*' cast_expression=cast_expression
		//	| divide='/' cast_expression=cast_expression
		//	| modulo='%' cast_expression=cast_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//multiplica='*' cast_expression=cast_expression | divide='/' cast_expression=cast_expression | modulo='%'
		//cast_expression=cast_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//multiplica='*' cast_expression=cast_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//multiplica='*'
		public Assignment getMultiplicaAssignment_0_0() { return cMultiplicaAssignment_0_0; }
		
		//'*'
		public Keyword getMultiplicaAsteriskKeyword_0_0_0() { return cMultiplicaAsteriskKeyword_0_0_0; }
		
		//cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_0_1() { return cCast_expressionAssignment_0_1; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_0_1_0() { return cCast_expressionCast_expressionParserRuleCall_0_1_0; }
		
		//divide='/' cast_expression=cast_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//divide='/'
		public Assignment getDivideAssignment_1_0() { return cDivideAssignment_1_0; }
		
		//'/'
		public Keyword getDivideSolidusKeyword_1_0_0() { return cDivideSolidusKeyword_1_0_0; }
		
		//cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_1_1() { return cCast_expressionAssignment_1_1; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_1_1_0() { return cCast_expressionCast_expressionParserRuleCall_1_1_0; }
		
		//modulo='%' cast_expression=cast_expression
		public Group getGroup_2() { return cGroup_2; }
		
		//modulo='%'
		public Assignment getModuloAssignment_2_0() { return cModuloAssignment_2_0; }
		
		//'%'
		public Keyword getModuloPercentSignKeyword_2_0_0() { return cModuloPercentSignKeyword_2_0_0; }
		
		//cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_2_1() { return cCast_expressionAssignment_2_1; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_2_1_0() { return cCast_expressionCast_expressionParserRuleCall_2_1_0; }
	}
	public class Additive_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.additive_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicative_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0 = (RuleCall)cMultiplicative_expressionAssignment_0.eContents().get(0);
		private final Assignment cAdditive_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdditive_expression_linhaAdditive_expression_linhaParserRuleCall_1_0 = (RuleCall)cAdditive_expression_linhaAssignment_1.eContents().get(0);
		
		//additive_expression:
		//	multiplicative_expression=multiplicative_expression additive_expression_linha=additive_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//multiplicative_expression=multiplicative_expression additive_expression_linha=additive_expression_linha
		public Group getGroup() { return cGroup; }
		
		//multiplicative_expression=multiplicative_expression
		public Assignment getMultiplicative_expressionAssignment_0() { return cMultiplicative_expressionAssignment_0; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0() { return cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0; }
		
		//additive_expression_linha=additive_expression_linha
		public Assignment getAdditive_expression_linhaAssignment_1() { return cAdditive_expression_linhaAssignment_1; }
		
		//additive_expression_linha
		public RuleCall getAdditive_expression_linhaAdditive_expression_linhaParserRuleCall_1_0() { return cAdditive_expression_linhaAdditive_expression_linhaParserRuleCall_1_0; }
	}
	public class Additive_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.additive_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdditive_expression_complementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdditive_expression_complementAdditive_expression_complementParserRuleCall_0_0 = (RuleCall)cAdditive_expression_complementAssignment_0.eContents().get(0);
		private final Assignment cAdditive_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdditive_expression_linhaAdditive_expression_linhaParserRuleCall_1_0 = (RuleCall)cAdditive_expression_linhaAssignment_1.eContents().get(0);
		
		//additive_expression_linha:
		//	(additive_expression_complement=additive_expression_complement additive_expression_linha=additive_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(additive_expression_complement=additive_expression_complement additive_expression_linha=additive_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//additive_expression_complement=additive_expression_complement
		public Assignment getAdditive_expression_complementAssignment_0() { return cAdditive_expression_complementAssignment_0; }
		
		//additive_expression_complement
		public RuleCall getAdditive_expression_complementAdditive_expression_complementParserRuleCall_0_0() { return cAdditive_expression_complementAdditive_expression_complementParserRuleCall_0_0; }
		
		//additive_expression_linha=additive_expression_linha
		public Assignment getAdditive_expression_linhaAssignment_1() { return cAdditive_expression_linhaAssignment_1; }
		
		//additive_expression_linha
		public RuleCall getAdditive_expression_linhaAdditive_expression_linhaParserRuleCall_1_0() { return cAdditive_expression_linhaAdditive_expression_linhaParserRuleCall_1_0; }
	}
	public class Additive_expression_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.additive_expression_complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMaisAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cMaisPlusSignKeyword_0_0_0 = (Keyword)cMaisAssignment_0_0.eContents().get(0);
		private final Assignment cMultiplicative_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_1_0 = (RuleCall)cMultiplicative_expressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cMenosAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cMenosHyphenMinusKeyword_1_0_0 = (Keyword)cMenosAssignment_1_0.eContents().get(0);
		private final Assignment cMultiplicative_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0 = (RuleCall)cMultiplicative_expressionAssignment_1_1.eContents().get(0);
		
		//additive_expression_complement:
		//	mais='+' multiplicative_expression=multiplicative_expression
		//	| menos='-' multiplicative_expression=multiplicative_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//mais='+' multiplicative_expression=multiplicative_expression | menos='-'
		//multiplicative_expression=multiplicative_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//mais='+' multiplicative_expression=multiplicative_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//mais='+'
		public Assignment getMaisAssignment_0_0() { return cMaisAssignment_0_0; }
		
		//'+'
		public Keyword getMaisPlusSignKeyword_0_0_0() { return cMaisPlusSignKeyword_0_0_0; }
		
		//multiplicative_expression=multiplicative_expression
		public Assignment getMultiplicative_expressionAssignment_0_1() { return cMultiplicative_expressionAssignment_0_1; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_1_0() { return cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_1_0; }
		
		//menos='-' multiplicative_expression=multiplicative_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//menos='-'
		public Assignment getMenosAssignment_1_0() { return cMenosAssignment_1_0; }
		
		//'-'
		public Keyword getMenosHyphenMinusKeyword_1_0_0() { return cMenosHyphenMinusKeyword_1_0_0; }
		
		//multiplicative_expression=multiplicative_expression
		public Assignment getMultiplicative_expressionAssignment_1_1() { return cMultiplicative_expressionAssignment_1_1; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0() { return cMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0; }
	}
	public class Shift_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.shift_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAdditive_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAdditive_expressionAdditive_expressionParserRuleCall_0_0 = (RuleCall)cAdditive_expressionAssignment_0.eContents().get(0);
		private final Assignment cShift_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShift_expression_linhaShift_expression_linhaParserRuleCall_1_0 = (RuleCall)cShift_expression_linhaAssignment_1.eContents().get(0);
		
		//shift_expression:
		//	additive_expression=additive_expression shift_expression_linha=shift_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//additive_expression=additive_expression shift_expression_linha=shift_expression_linha
		public Group getGroup() { return cGroup; }
		
		//additive_expression=additive_expression
		public Assignment getAdditive_expressionAssignment_0() { return cAdditive_expressionAssignment_0; }
		
		//additive_expression
		public RuleCall getAdditive_expressionAdditive_expressionParserRuleCall_0_0() { return cAdditive_expressionAdditive_expressionParserRuleCall_0_0; }
		
		//shift_expression_linha=shift_expression_linha
		public Assignment getShift_expression_linhaAssignment_1() { return cShift_expression_linhaAssignment_1; }
		
		//shift_expression_linha
		public RuleCall getShift_expression_linhaShift_expression_linhaParserRuleCall_1_0() { return cShift_expression_linhaShift_expression_linhaParserRuleCall_1_0; }
	}
	public class Shift_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.shift_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShift_expression_complementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cShift_expression_complementShift_expression_complementParserRuleCall_0_0 = (RuleCall)cShift_expression_complementAssignment_0.eContents().get(0);
		private final Assignment cShift_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShift_expression_linhaShift_expression_linhaParserRuleCall_1_0 = (RuleCall)cShift_expression_linhaAssignment_1.eContents().get(0);
		
		//shift_expression_linha:
		//	(shift_expression_complement=shift_expression_complement shift_expression_linha=shift_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(shift_expression_complement=shift_expression_complement shift_expression_linha=shift_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//shift_expression_complement=shift_expression_complement
		public Assignment getShift_expression_complementAssignment_0() { return cShift_expression_complementAssignment_0; }
		
		//shift_expression_complement
		public RuleCall getShift_expression_complementShift_expression_complementParserRuleCall_0_0() { return cShift_expression_complementShift_expression_complementParserRuleCall_0_0; }
		
		//shift_expression_linha=shift_expression_linha
		public Assignment getShift_expression_linhaAssignment_1() { return cShift_expression_linhaAssignment_1; }
		
		//shift_expression_linha
		public RuleCall getShift_expression_linhaShift_expression_linhaParserRuleCall_1_0() { return cShift_expression_linhaShift_expression_linhaParserRuleCall_1_0; }
	}
	public class Shift_expression_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.shift_expression_complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSleftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cSleftLessThanSignLessThanSignKeyword_0_0_0 = (Keyword)cSleftAssignment_0_0.eContents().get(0);
		private final Assignment cAdditive_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAdditive_expressionAdditive_expressionParserRuleCall_0_1_0 = (RuleCall)cAdditive_expressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSrightAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cSrightGreaterThanSignGreaterThanSignKeyword_1_0_0 = (Keyword)cSrightAssignment_1_0.eContents().get(0);
		private final Assignment cAdditive_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAdditive_expressionAdditive_expressionParserRuleCall_1_1_0 = (RuleCall)cAdditive_expressionAssignment_1_1.eContents().get(0);
		
		//shift_expression_complement:
		//	sleft='<<' additive_expression=additive_expression
		//	| sright='>>' additive_expression=additive_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//sleft='<<' additive_expression=additive_expression | sright='>>' additive_expression=additive_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sleft='<<' additive_expression=additive_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//sleft='<<'
		public Assignment getSleftAssignment_0_0() { return cSleftAssignment_0_0; }
		
		//'<<'
		public Keyword getSleftLessThanSignLessThanSignKeyword_0_0_0() { return cSleftLessThanSignLessThanSignKeyword_0_0_0; }
		
		//additive_expression=additive_expression
		public Assignment getAdditive_expressionAssignment_0_1() { return cAdditive_expressionAssignment_0_1; }
		
		//additive_expression
		public RuleCall getAdditive_expressionAdditive_expressionParserRuleCall_0_1_0() { return cAdditive_expressionAdditive_expressionParserRuleCall_0_1_0; }
		
		//sright='>>' additive_expression=additive_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//sright='>>'
		public Assignment getSrightAssignment_1_0() { return cSrightAssignment_1_0; }
		
		//'>>'
		public Keyword getSrightGreaterThanSignGreaterThanSignKeyword_1_0_0() { return cSrightGreaterThanSignGreaterThanSignKeyword_1_0_0; }
		
		//additive_expression=additive_expression
		public Assignment getAdditive_expressionAssignment_1_1() { return cAdditive_expressionAssignment_1_1; }
		
		//additive_expression
		public RuleCall getAdditive_expressionAdditive_expressionParserRuleCall_1_1_0() { return cAdditive_expressionAdditive_expressionParserRuleCall_1_1_0; }
	}
	public class Relational_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.relational_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShift_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_0_0 = (RuleCall)cShift_expressionAssignment_0.eContents().get(0);
		private final Assignment cRelational_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelational_expression_linhaRelational_expression_linhaParserRuleCall_1_0 = (RuleCall)cRelational_expression_linhaAssignment_1.eContents().get(0);
		
		//relational_expression:
		//	shift_expression=shift_expression relational_expression_linha=relational_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//shift_expression=shift_expression relational_expression_linha=relational_expression_linha
		public Group getGroup() { return cGroup; }
		
		//shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_0() { return cShift_expressionAssignment_0; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_0_0() { return cShift_expressionShift_expressionParserRuleCall_0_0; }
		
		//relational_expression_linha=relational_expression_linha
		public Assignment getRelational_expression_linhaAssignment_1() { return cRelational_expression_linhaAssignment_1; }
		
		//relational_expression_linha
		public RuleCall getRelational_expression_linhaRelational_expression_linhaParserRuleCall_1_0() { return cRelational_expression_linhaRelational_expression_linhaParserRuleCall_1_0; }
	}
	public class Relational_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.relational_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShift_expression_complementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cShift_expression_complementShift_expression_complementParserRuleCall_0_0 = (RuleCall)cShift_expression_complementAssignment_0.eContents().get(0);
		private final Assignment cRelational_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelational_expression_linhaRelational_expression_linhaParserRuleCall_1_0 = (RuleCall)cRelational_expression_linhaAssignment_1.eContents().get(0);
		
		//relational_expression_linha:
		//	(shift_expression_complement=shift_expression_complement relational_expression_linha=relational_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(shift_expression_complement=shift_expression_complement relational_expression_linha=relational_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//shift_expression_complement=shift_expression_complement
		public Assignment getShift_expression_complementAssignment_0() { return cShift_expression_complementAssignment_0; }
		
		//shift_expression_complement
		public RuleCall getShift_expression_complementShift_expression_complementParserRuleCall_0_0() { return cShift_expression_complementShift_expression_complementParserRuleCall_0_0; }
		
		//relational_expression_linha=relational_expression_linha
		public Assignment getRelational_expression_linhaAssignment_1() { return cRelational_expression_linhaAssignment_1; }
		
		//relational_expression_linha
		public RuleCall getRelational_expression_linhaRelational_expression_linhaParserRuleCall_1_0() { return cRelational_expression_linhaRelational_expression_linhaParserRuleCall_1_0; }
	}
	public class Relational_expression_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.relational_expression_complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMenorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cMenorLessThanSignKeyword_0_0_0 = (Keyword)cMenorAssignment_0_0.eContents().get(0);
		private final Assignment cShift_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_0_1_0 = (RuleCall)cShift_expressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cMaiorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cMaiorGreaterThanSignKeyword_1_0_0 = (Keyword)cMaiorAssignment_1_0.eContents().get(0);
		private final Assignment cShift_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_1_1_0 = (RuleCall)cShift_expressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMenor_igualAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cMenor_igualLessThanSignEqualsSignKeyword_2_0_0 = (Keyword)cMenor_igualAssignment_2_0.eContents().get(0);
		private final Assignment cShift_expressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_2_1_0 = (RuleCall)cShift_expressionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cMaior_igualAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cMaior_igualGreaterThanSignEqualsSignKeyword_3_0_0 = (Keyword)cMaior_igualAssignment_3_0.eContents().get(0);
		private final Assignment cShift_expressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cShift_expressionShift_expressionParserRuleCall_3_1_0 = (RuleCall)cShift_expressionAssignment_3_1.eContents().get(0);
		
		//relational_expression_complement:
		//	menor='<' shift_expression=shift_expression
		//	| maior='>' shift_expression=shift_expression
		//	| menor_igual='<=' shift_expression=shift_expression
		//	| maior_igual='>=' shift_expression=shift_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//menor='<' shift_expression=shift_expression | maior='>' shift_expression=shift_expression | menor_igual='<='
		//shift_expression=shift_expression | maior_igual='>=' shift_expression=shift_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//menor='<' shift_expression=shift_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//menor='<'
		public Assignment getMenorAssignment_0_0() { return cMenorAssignment_0_0; }
		
		//'<'
		public Keyword getMenorLessThanSignKeyword_0_0_0() { return cMenorLessThanSignKeyword_0_0_0; }
		
		//shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_0_1() { return cShift_expressionAssignment_0_1; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_0_1_0() { return cShift_expressionShift_expressionParserRuleCall_0_1_0; }
		
		//maior='>' shift_expression=shift_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//maior='>'
		public Assignment getMaiorAssignment_1_0() { return cMaiorAssignment_1_0; }
		
		//'>'
		public Keyword getMaiorGreaterThanSignKeyword_1_0_0() { return cMaiorGreaterThanSignKeyword_1_0_0; }
		
		//shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_1_1() { return cShift_expressionAssignment_1_1; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_1_1_0() { return cShift_expressionShift_expressionParserRuleCall_1_1_0; }
		
		//menor_igual='<=' shift_expression=shift_expression
		public Group getGroup_2() { return cGroup_2; }
		
		//menor_igual='<='
		public Assignment getMenor_igualAssignment_2_0() { return cMenor_igualAssignment_2_0; }
		
		//'<='
		public Keyword getMenor_igualLessThanSignEqualsSignKeyword_2_0_0() { return cMenor_igualLessThanSignEqualsSignKeyword_2_0_0; }
		
		//shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_2_1() { return cShift_expressionAssignment_2_1; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_2_1_0() { return cShift_expressionShift_expressionParserRuleCall_2_1_0; }
		
		//maior_igual='>=' shift_expression=shift_expression
		public Group getGroup_3() { return cGroup_3; }
		
		//maior_igual='>='
		public Assignment getMaior_igualAssignment_3_0() { return cMaior_igualAssignment_3_0; }
		
		//'>='
		public Keyword getMaior_igualGreaterThanSignEqualsSignKeyword_3_0_0() { return cMaior_igualGreaterThanSignEqualsSignKeyword_3_0_0; }
		
		//shift_expression=shift_expression
		public Assignment getShift_expressionAssignment_3_1() { return cShift_expressionAssignment_3_1; }
		
		//shift_expression
		public RuleCall getShift_expressionShift_expressionParserRuleCall_3_1_0() { return cShift_expressionShift_expressionParserRuleCall_3_1_0; }
	}
	public class Equality_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.equality_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelational_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_0_0 = (RuleCall)cRelational_expressionAssignment_0.eContents().get(0);
		private final Assignment cEquality_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquality_expression_linhaEquality_expression_linhaParserRuleCall_1_0 = (RuleCall)cEquality_expression_linhaAssignment_1.eContents().get(0);
		
		//equality_expression:
		//	relational_expression=relational_expression equality_expression_linha=equality_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//relational_expression=relational_expression equality_expression_linha=equality_expression_linha
		public Group getGroup() { return cGroup; }
		
		//relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_0() { return cRelational_expressionAssignment_0; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_0_0() { return cRelational_expressionRelational_expressionParserRuleCall_0_0; }
		
		//equality_expression_linha=equality_expression_linha
		public Assignment getEquality_expression_linhaAssignment_1() { return cEquality_expression_linhaAssignment_1; }
		
		//equality_expression_linha
		public RuleCall getEquality_expression_linhaEquality_expression_linhaParserRuleCall_1_0() { return cEquality_expression_linhaEquality_expression_linhaParserRuleCall_1_0; }
	}
	public class Equality_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.equality_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEquality_expression_complementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEquality_expression_complementEquality_expression_complementParserRuleCall_0_0 = (RuleCall)cEquality_expression_complementAssignment_0.eContents().get(0);
		private final Assignment cEquality_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquality_expression_linhaEquality_expression_linhaParserRuleCall_1_0 = (RuleCall)cEquality_expression_linhaAssignment_1.eContents().get(0);
		
		//equality_expression_linha:
		//	(equality_expression_complement=equality_expression_complement equality_expression_linha=equality_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(equality_expression_complement=equality_expression_complement equality_expression_linha=equality_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//equality_expression_complement=equality_expression_complement
		public Assignment getEquality_expression_complementAssignment_0() { return cEquality_expression_complementAssignment_0; }
		
		//equality_expression_complement
		public RuleCall getEquality_expression_complementEquality_expression_complementParserRuleCall_0_0() { return cEquality_expression_complementEquality_expression_complementParserRuleCall_0_0; }
		
		//equality_expression_linha=equality_expression_linha
		public Assignment getEquality_expression_linhaAssignment_1() { return cEquality_expression_linhaAssignment_1; }
		
		//equality_expression_linha
		public RuleCall getEquality_expression_linhaEquality_expression_linhaParserRuleCall_1_0() { return cEquality_expression_linhaEquality_expression_linhaParserRuleCall_1_0; }
	}
	public class Equality_expression_complementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.equality_expression_complement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIgualAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cIgualEqualsSignEqualsSignKeyword_0_0_0 = (Keyword)cIgualAssignment_0_0.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_0_1_0 = (RuleCall)cRelational_expressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cMenorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cMenorLessThanSignKeyword_1_0_0 = (Keyword)cMenorAssignment_1_0.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_1_1_0 = (RuleCall)cRelational_expressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMaiorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cMaiorGreaterThanSignKeyword_2_0_0 = (Keyword)cMaiorAssignment_2_0.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_2_1_0 = (RuleCall)cRelational_expressionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cMenor_igualAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cMenor_igualLessThanSignEqualsSignKeyword_3_0_0 = (Keyword)cMenor_igualAssignment_3_0.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_3_1_0 = (RuleCall)cRelational_expressionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cMaior_igualAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cMaior_igualGreaterThanSignEqualsSignKeyword_4_0_0 = (Keyword)cMaior_igualAssignment_4_0.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_4_1_0 = (RuleCall)cRelational_expressionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cN_igualAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cN_igualExclamationMarkEqualsSignKeyword_5_0_0 = (Keyword)cN_igualAssignment_5_0.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_5_1_0 = (RuleCall)cRelational_expressionAssignment_5_1.eContents().get(0);
		
		//equality_expression_complement:
		//	igual='==' relational_expression=relational_expression
		//	| menor='<' relational_expression=relational_expression
		//	| maior='>' relational_expression=relational_expression
		//	| menor_igual='<=' relational_expression=relational_expression
		//	| maior_igual='>=' relational_expression=relational_expression
		//	| n_igual='!=' relational_expression=relational_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//igual='==' relational_expression=relational_expression | menor='<' relational_expression=relational_expression |
		//maior='>' relational_expression=relational_expression | menor_igual='<=' relational_expression=relational_expression |
		//maior_igual='>=' relational_expression=relational_expression | n_igual='!='
		//relational_expression=relational_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//igual='==' relational_expression=relational_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//igual='=='
		public Assignment getIgualAssignment_0_0() { return cIgualAssignment_0_0; }
		
		//'=='
		public Keyword getIgualEqualsSignEqualsSignKeyword_0_0_0() { return cIgualEqualsSignEqualsSignKeyword_0_0_0; }
		
		//relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_0_1() { return cRelational_expressionAssignment_0_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_0_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_0_1_0; }
		
		//menor='<' relational_expression=relational_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//menor='<'
		public Assignment getMenorAssignment_1_0() { return cMenorAssignment_1_0; }
		
		//'<'
		public Keyword getMenorLessThanSignKeyword_1_0_0() { return cMenorLessThanSignKeyword_1_0_0; }
		
		//relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_1_1() { return cRelational_expressionAssignment_1_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_1_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_1_1_0; }
		
		//maior='>' relational_expression=relational_expression
		public Group getGroup_2() { return cGroup_2; }
		
		//maior='>'
		public Assignment getMaiorAssignment_2_0() { return cMaiorAssignment_2_0; }
		
		//'>'
		public Keyword getMaiorGreaterThanSignKeyword_2_0_0() { return cMaiorGreaterThanSignKeyword_2_0_0; }
		
		//relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_2_1() { return cRelational_expressionAssignment_2_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_2_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_2_1_0; }
		
		//menor_igual='<=' relational_expression=relational_expression
		public Group getGroup_3() { return cGroup_3; }
		
		//menor_igual='<='
		public Assignment getMenor_igualAssignment_3_0() { return cMenor_igualAssignment_3_0; }
		
		//'<='
		public Keyword getMenor_igualLessThanSignEqualsSignKeyword_3_0_0() { return cMenor_igualLessThanSignEqualsSignKeyword_3_0_0; }
		
		//relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_3_1() { return cRelational_expressionAssignment_3_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_3_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_3_1_0; }
		
		//maior_igual='>=' relational_expression=relational_expression
		public Group getGroup_4() { return cGroup_4; }
		
		//maior_igual='>='
		public Assignment getMaior_igualAssignment_4_0() { return cMaior_igualAssignment_4_0; }
		
		//'>='
		public Keyword getMaior_igualGreaterThanSignEqualsSignKeyword_4_0_0() { return cMaior_igualGreaterThanSignEqualsSignKeyword_4_0_0; }
		
		//relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_4_1() { return cRelational_expressionAssignment_4_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_4_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_4_1_0; }
		
		//n_igual='!=' relational_expression=relational_expression
		public Group getGroup_5() { return cGroup_5; }
		
		//n_igual='!='
		public Assignment getN_igualAssignment_5_0() { return cN_igualAssignment_5_0; }
		
		//'!='
		public Keyword getN_igualExclamationMarkEqualsSignKeyword_5_0_0() { return cN_igualExclamationMarkEqualsSignKeyword_5_0_0; }
		
		//relational_expression=relational_expression
		public Assignment getRelational_expressionAssignment_5_1() { return cRelational_expressionAssignment_5_1; }
		
		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_5_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_5_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLabeled_statementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLabeled_statementLabeled_statementParserRuleCall_0_0 = (RuleCall)cLabeled_statementAssignment_0.eContents().get(0);
		private final Assignment cCompound_statementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompound_statementCompound_statementParserRuleCall_1_0 = (RuleCall)cCompound_statementAssignment_1.eContents().get(0);
		private final Assignment cExpression_statementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_2_0 = (RuleCall)cExpression_statementAssignment_2.eContents().get(0);
		private final Assignment cSelection_statementAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSelection_statementSelection_statementParserRuleCall_3_0 = (RuleCall)cSelection_statementAssignment_3.eContents().get(0);
		private final Assignment cIteration_statementAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIteration_statementIteration_statementParserRuleCall_4_0 = (RuleCall)cIteration_statementAssignment_4.eContents().get(0);
		private final Assignment cJump_statementAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cJump_statementJump_statementParserRuleCall_5_0 = (RuleCall)cJump_statementAssignment_5.eContents().get(0);
		
		//statement:
		//	labeled_statement=labeled_statement
		//	| compound_statement=compound_statement
		//	| expression_statement=expression_statement
		//	| selection_statement=selection_statement
		//	| iteration_statement=iteration_statement
		//	| jump_statement=jump_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//labeled_statement=labeled_statement | compound_statement=compound_statement | expression_statement=expression_statement
		//| selection_statement=selection_statement | iteration_statement=iteration_statement | jump_statement=jump_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//labeled_statement=labeled_statement
		public Assignment getLabeled_statementAssignment_0() { return cLabeled_statementAssignment_0; }
		
		//labeled_statement
		public RuleCall getLabeled_statementLabeled_statementParserRuleCall_0_0() { return cLabeled_statementLabeled_statementParserRuleCall_0_0; }
		
		//compound_statement=compound_statement
		public Assignment getCompound_statementAssignment_1() { return cCompound_statementAssignment_1; }
		
		//compound_statement
		public RuleCall getCompound_statementCompound_statementParserRuleCall_1_0() { return cCompound_statementCompound_statementParserRuleCall_1_0; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_2() { return cExpression_statementAssignment_2; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_2_0() { return cExpression_statementExpression_statementParserRuleCall_2_0; }
		
		//selection_statement=selection_statement
		public Assignment getSelection_statementAssignment_3() { return cSelection_statementAssignment_3; }
		
		//selection_statement
		public RuleCall getSelection_statementSelection_statementParserRuleCall_3_0() { return cSelection_statementSelection_statementParserRuleCall_3_0; }
		
		//iteration_statement=iteration_statement
		public Assignment getIteration_statementAssignment_4() { return cIteration_statementAssignment_4; }
		
		//iteration_statement
		public RuleCall getIteration_statementIteration_statementParserRuleCall_4_0() { return cIteration_statementIteration_statementParserRuleCall_4_0; }
		
		//jump_statement=jump_statement
		public Assignment getJump_statementAssignment_5() { return cJump_statementAssignment_5; }
		
		//jump_statement
		public RuleCall getJump_statementJump_statementParserRuleCall_5_0() { return cJump_statementJump_statementParserRuleCall_5_0; }
	}
	public class Jump_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.jump_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGotoKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdentifierIDzTerminalRuleCall_0_1_0 = (RuleCall)cIdentifierAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cContinueKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBreakAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cBreakBreakKeyword_2_0_0 = (Keyword)cBreakAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cReturn_vazioAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cReturn_vazioReturnKeyword_3_0_0 = (Keyword)cReturn_vazioAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cReturnAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cReturnReturnKeyword_4_0_0 = (Keyword)cReturnAssignment_4_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//jump_statement:
		//	'goto' identifier=IDz ';'
		//	| 'continue' ';'
		//	| break='break' ';'
		//	| return_vazio='return' ';'
		//	| return='return' expression=expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'goto' identifier=IDz ';' | 'continue' ';' | break='break' ';' | return_vazio='return' ';' | return='return'
		//expression=expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'goto' identifier=IDz ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//'goto'
		public Keyword getGotoKeyword_0_0() { return cGotoKeyword_0_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_0_1() { return cIdentifierAssignment_0_1; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_0_1_0() { return cIdentifierIDzTerminalRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//'continue' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'continue'
		public Keyword getContinueKeyword_1_0() { return cContinueKeyword_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//break='break' ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//break='break'
		public Assignment getBreakAssignment_2_0() { return cBreakAssignment_2_0; }
		
		//'break'
		public Keyword getBreakBreakKeyword_2_0_0() { return cBreakBreakKeyword_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//return_vazio='return' ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//return_vazio='return'
		public Assignment getReturn_vazioAssignment_3_0() { return cReturn_vazioAssignment_3_0; }
		
		//'return'
		public Keyword getReturn_vazioReturnKeyword_3_0_0() { return cReturn_vazioReturnKeyword_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//return='return' expression=expression ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//return='return'
		public Assignment getReturnAssignment_4_0() { return cReturnAssignment_4_0; }
		
		//'return'
		public Keyword getReturnReturnKeyword_4_0_0() { return cReturnReturnKeyword_4_0_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_0() { return cExpressionExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
	}
	public class Iteration_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.iteration_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cWhileKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStatementAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_0_4_0 = (RuleCall)cStatementAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		private final Keyword cWhileKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExpressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_1_4_0 = (RuleCall)cExpressionAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpression_statementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_2_2_0 = (RuleCall)cExpression_statementAssignment_2_2.eContents().get(0);
		private final Assignment cExpression_statement2Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExpression_statement2Expression_statementParserRuleCall_2_3_0 = (RuleCall)cExpression_statement2Assignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cStatementAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_2_5_0 = (RuleCall)cStatementAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cForKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpression_statementAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_3_2_0 = (RuleCall)cExpression_statementAssignment_3_2.eContents().get(0);
		private final Assignment cExpression_statement2Assignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpression_statement2Expression_statementParserRuleCall_3_3_0 = (RuleCall)cExpression_statement2Assignment_3_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_3_4_0 = (RuleCall)cExpressionAssignment_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cStatementAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_3_6_0 = (RuleCall)cStatementAssignment_3_6.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cForKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDeclarationAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_4_2_0 = (RuleCall)cDeclarationAssignment_4_2.eContents().get(0);
		private final Assignment cExpression_statementAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_4_3_0 = (RuleCall)cExpression_statementAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cStatementAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_4_5_0 = (RuleCall)cStatementAssignment_4_5.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cForKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDeclarationAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_5_2_0 = (RuleCall)cDeclarationAssignment_5_2.eContents().get(0);
		private final Assignment cExpression_statementAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_5_3_0 = (RuleCall)cExpression_statementAssignment_5_3.eContents().get(0);
		private final Assignment cExpressionAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_5_4_0 = (RuleCall)cExpressionAssignment_5_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Assignment cStatementAssignment_5_6 = (Assignment)cGroup_5.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_5_6_0 = (RuleCall)cStatementAssignment_5_6.eContents().get(0);
		
		//iteration_statement:
		//	'while' '(' expression=expression ')' statement=statement
		//	| 'do' statement=statement 'while' '(' expression=expression ')' ';'
		//	| 'for' '(' expression_statement=expression_statement expression_statement2=expression_statement ')'
		//	statement=statement
		//	| 'for' '(' expression_statement=expression_statement expression_statement2=expression_statement
		//	expression=expression ')' statement=statement
		//	| 'for' '(' declaration=declaration expression_statement=expression_statement ')' statement=statement
		//	| 'for' '(' declaration=declaration expression_statement=expression_statement expression=expression ')'
		//	statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' expression=expression ')' statement=statement | 'do' statement=statement 'while' '(' expression=expression
		//')' ';' | 'for' '(' expression_statement=expression_statement expression_statement2=expression_statement ')'
		//statement=statement | 'for' '(' expression_statement=expression_statement expression_statement2=expression_statement
		//expression=expression ')' statement=statement | 'for' '(' declaration=declaration
		//expression_statement=expression_statement ')' statement=statement | 'for' '(' declaration=declaration
		//expression_statement=expression_statement expression=expression ')' statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'while' '(' expression=expression ')' statement=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//'while'
		public Keyword getWhileKeyword_0_0() { return cWhileKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//statement=statement
		public Assignment getStatementAssignment_0_4() { return cStatementAssignment_0_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_4_0() { return cStatementStatementParserRuleCall_0_4_0; }
		
		//'do' statement=statement 'while' '(' expression=expression ')' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//'do'
		public Keyword getDoKeyword_1_0() { return cDoKeyword_1_0; }
		
		//statement=statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_1_2() { return cWhileKeyword_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_4() { return cExpressionAssignment_1_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_4_0() { return cExpressionExpressionParserRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//'for' '(' expression_statement=expression_statement expression_statement2=expression_statement ')' statement=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//'for'
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_2_2() { return cExpression_statementAssignment_2_2; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_2_2_0() { return cExpression_statementExpression_statementParserRuleCall_2_2_0; }
		
		//expression_statement2=expression_statement
		public Assignment getExpression_statement2Assignment_2_3() { return cExpression_statement2Assignment_2_3; }
		
		//expression_statement
		public RuleCall getExpression_statement2Expression_statementParserRuleCall_2_3_0() { return cExpression_statement2Expression_statementParserRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//statement=statement
		public Assignment getStatementAssignment_2_5() { return cStatementAssignment_2_5; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_5_0() { return cStatementStatementParserRuleCall_2_5_0; }
		
		//'for' '(' expression_statement=expression_statement expression_statement2=expression_statement expression=expression ')'
		//statement=statement
		public Group getGroup_3() { return cGroup_3; }
		
		//'for'
		public Keyword getForKeyword_3_0() { return cForKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_3_2() { return cExpression_statementAssignment_3_2; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_3_2_0() { return cExpression_statementExpression_statementParserRuleCall_3_2_0; }
		
		//expression_statement2=expression_statement
		public Assignment getExpression_statement2Assignment_3_3() { return cExpression_statement2Assignment_3_3; }
		
		//expression_statement
		public RuleCall getExpression_statement2Expression_statementParserRuleCall_3_3_0() { return cExpression_statement2Expression_statementParserRuleCall_3_3_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_3_4() { return cExpressionAssignment_3_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_4_0() { return cExpressionExpressionParserRuleCall_3_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
		
		//statement=statement
		public Assignment getStatementAssignment_3_6() { return cStatementAssignment_3_6; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_3_6_0() { return cStatementStatementParserRuleCall_3_6_0; }
		
		//'for' '(' declaration=declaration expression_statement=expression_statement ')' statement=statement
		public Group getGroup_4() { return cGroup_4; }
		
		//'for'
		public Keyword getForKeyword_4_0() { return cForKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_4_2() { return cDeclarationAssignment_4_2; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_4_2_0() { return cDeclarationDeclarationParserRuleCall_4_2_0; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_4_3() { return cExpression_statementAssignment_4_3; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_4_3_0() { return cExpression_statementExpression_statementParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//statement=statement
		public Assignment getStatementAssignment_4_5() { return cStatementAssignment_4_5; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_4_5_0() { return cStatementStatementParserRuleCall_4_5_0; }
		
		//'for' '(' declaration=declaration expression_statement=expression_statement expression=expression ')'
		//statement=statement
		public Group getGroup_5() { return cGroup_5; }
		
		//'for'
		public Keyword getForKeyword_5_0() { return cForKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_5_2() { return cDeclarationAssignment_5_2; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_5_2_0() { return cDeclarationDeclarationParserRuleCall_5_2_0; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_5_3() { return cExpression_statementAssignment_5_3; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_5_3_0() { return cExpression_statementExpression_statementParserRuleCall_5_3_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_5_4() { return cExpressionAssignment_5_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_5_4_0() { return cExpressionExpressionParserRuleCall_5_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_5() { return cRightParenthesisKeyword_5_5; }
		
		//statement=statement
		public Assignment getStatementAssignment_5_6() { return cStatementAssignment_5_6; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_5_6_0() { return cStatementStatementParserRuleCall_5_6_0; }
	}
	public class Selection_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.selection_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStatementAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_0_4_0 = (RuleCall)cStatementAssignment_0_4.eContents().get(0);
		private final Keyword cElseKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cStatement2Assignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cStatement2StatementParserRuleCall_0_6_0 = (RuleCall)cStatement2Assignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_1_4_0 = (RuleCall)cStatementAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSwitchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStatementAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_2_4_0 = (RuleCall)cStatementAssignment_2_4.eContents().get(0);
		
		//selection_statement:
		//	'if' '(' expression=expression ')' statement=statement 'else' statement2=statement
		//	| 'if' '(' expression=expression ')' statement=statement
		//	| 'switch' '(' expression=expression ')' statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' expression=expression ')' statement=statement 'else' statement2=statement | 'if' '(' expression=expression ')'
		//statement=statement | 'switch' '(' expression=expression ')' statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'if' '(' expression=expression ')' statement=statement 'else' statement2=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//statement=statement
		public Assignment getStatementAssignment_0_4() { return cStatementAssignment_0_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_4_0() { return cStatementStatementParserRuleCall_0_4_0; }
		
		//'else'
		public Keyword getElseKeyword_0_5() { return cElseKeyword_0_5; }
		
		//statement2=statement
		public Assignment getStatement2Assignment_0_6() { return cStatement2Assignment_0_6; }
		
		//statement
		public RuleCall getStatement2StatementParserRuleCall_0_6_0() { return cStatement2StatementParserRuleCall_0_6_0; }
		
		//'if' '(' expression=expression ')' statement=statement
		public Group getGroup_1() { return cGroup_1; }
		
		//'if'
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//statement=statement
		public Assignment getStatementAssignment_1_4() { return cStatementAssignment_1_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_4_0() { return cStatementStatementParserRuleCall_1_4_0; }
		
		//'switch' '(' expression=expression ')' statement=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//'switch'
		public Keyword getSwitchKeyword_2_0() { return cSwitchKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0() { return cExpressionExpressionParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//statement=statement
		public Assignment getStatementAssignment_2_4() { return cStatementAssignment_2_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_4_0() { return cStatementStatementParserRuleCall_2_4_0; }
	}
	public class Labeled_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.labeled_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIDzTerminalRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStatementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_0_2_0 = (RuleCall)cStatementAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditional_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditional_expressionConditional_expressionParserRuleCall_1_1_0 = (RuleCall)cConditional_expressionAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStatementAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_1_3_0 = (RuleCall)cStatementAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDefaultKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStatementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_2_0 = (RuleCall)cStatementAssignment_2_2.eContents().get(0);
		
		//labeled_statement:
		//	identifier=IDz ':' statement=statement
		//	| 'case' conditional_expression=conditional_expression ':' statement=statement
		//	| 'default' ':' statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=IDz ':' statement=statement | 'case' conditional_expression=conditional_expression ':' statement=statement |
		//'default' ':' statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier=IDz ':' statement=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//identifier=IDz
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }
		
		//IDz
		public RuleCall getIdentifierIDzTerminalRuleCall_0_0_0() { return cIdentifierIDzTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//statement=statement
		public Assignment getStatementAssignment_0_2() { return cStatementAssignment_0_2; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_2_0() { return cStatementStatementParserRuleCall_0_2_0; }
		
		//'case' conditional_expression=conditional_expression ':' statement=statement
		public Group getGroup_1() { return cGroup_1; }
		
		//'case'
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }
		
		//conditional_expression=conditional_expression
		public Assignment getConditional_expressionAssignment_1_1() { return cConditional_expressionAssignment_1_1; }
		
		//conditional_expression
		public RuleCall getConditional_expressionConditional_expressionParserRuleCall_1_1_0() { return cConditional_expressionConditional_expressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//statement=statement
		public Assignment getStatementAssignment_1_3() { return cStatementAssignment_1_3; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_3_0() { return cStatementStatementParserRuleCall_1_3_0; }
		
		//'default' ':' statement=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//'default'
		public Keyword getDefaultKeyword_2_0() { return cDefaultKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//statement=statement
		public Assignment getStatementAssignment_2_2() { return cStatementAssignment_2_2; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_2_0() { return cStatementStatementParserRuleCall_2_2_0; }
	}
	public class Compound_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.compound_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBlock_item_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBlock_item_listBlock_item_listParserRuleCall_1_1_0 = (RuleCall)cBlock_item_listAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//compound_statement:
		//	'{' '}'
		//	| '{' block_item_list+=block_item_list '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' '}' | '{' block_item_list+=block_item_list '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_1() { return cRightCurlyBracketKeyword_0_1; }
		
		//'{' block_item_list+=block_item_list '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//block_item_list+=block_item_list
		public Assignment getBlock_item_listAssignment_1_1() { return cBlock_item_listAssignment_1_1; }
		
		//block_item_list
		public RuleCall getBlock_item_listBlock_item_listParserRuleCall_1_1_0() { return cBlock_item_listBlock_item_listParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class Block_item_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block_item_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlock_itemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBlock_itemBlock_itemParserRuleCall_0_0 = (RuleCall)cBlock_itemAssignment_0.eContents().get(0);
		private final Assignment cBlock_item_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlock_item_list_linhaBlock_item_list_linhaParserRuleCall_1_0 = (RuleCall)cBlock_item_list_linhaAssignment_1.eContents().get(0);
		
		//block_item_list:
		//	block_item=block_item block_item_list_linha+=block_item_list_linha?;
		@Override public ParserRule getRule() { return rule; }
		
		//block_item=block_item block_item_list_linha+=block_item_list_linha?
		public Group getGroup() { return cGroup; }
		
		//block_item=block_item
		public Assignment getBlock_itemAssignment_0() { return cBlock_itemAssignment_0; }
		
		//block_item
		public RuleCall getBlock_itemBlock_itemParserRuleCall_0_0() { return cBlock_itemBlock_itemParserRuleCall_0_0; }
		
		//block_item_list_linha+=block_item_list_linha?
		public Assignment getBlock_item_list_linhaAssignment_1() { return cBlock_item_list_linhaAssignment_1; }
		
		//block_item_list_linha
		public RuleCall getBlock_item_list_linhaBlock_item_list_linhaParserRuleCall_1_0() { return cBlock_item_list_linhaBlock_item_list_linhaParserRuleCall_1_0; }
	}
	public class Block_item_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block_item_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlock_itemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBlock_itemBlock_itemParserRuleCall_0_0 = (RuleCall)cBlock_itemAssignment_0.eContents().get(0);
		private final Assignment cBlock_item_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlock_item_list_linhaBlock_item_list_linhaParserRuleCall_1_0 = (RuleCall)cBlock_item_list_linhaAssignment_1.eContents().get(0);
		
		//block_item_list_linha:
		//	block_item=block_item block_item_list_linha+=block_item_list_linha?;
		@Override public ParserRule getRule() { return rule; }
		
		//block_item=block_item block_item_list_linha+=block_item_list_linha?
		public Group getGroup() { return cGroup; }
		
		//block_item=block_item
		public Assignment getBlock_itemAssignment_0() { return cBlock_itemAssignment_0; }
		
		//block_item
		public RuleCall getBlock_itemBlock_itemParserRuleCall_0_0() { return cBlock_itemBlock_itemParserRuleCall_0_0; }
		
		//block_item_list_linha+=block_item_list_linha?
		public Assignment getBlock_item_list_linhaAssignment_1() { return cBlock_item_list_linhaAssignment_1; }
		
		//block_item_list_linha
		public RuleCall getBlock_item_list_linhaBlock_item_list_linhaParserRuleCall_1_0() { return cBlock_item_list_linhaBlock_item_list_linhaParserRuleCall_1_0; }
	}
	public class Block_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block_item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//block_item:
		//	declaration=declaration
		//	| statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=declaration | statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//statement=statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}
	public class Expression_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//expression_statement:
		//	';'
		//	| expression=expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | expression=expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//expression=expression ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_0() { return cExpressionAssignment_1_0; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0() { return cExpressionExpressionParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class And_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEquality_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEquality_expressionEquality_expressionParserRuleCall_0_0 = (RuleCall)cEquality_expressionAssignment_0.eContents().get(0);
		private final Assignment cAnd_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnd_expression_linhaAnd_expression_linhaParserRuleCall_1_0 = (RuleCall)cAnd_expression_linhaAssignment_1.eContents().get(0);
		
		//and_expression:
		//	equality_expression=equality_expression and_expression_linha=and_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//equality_expression=equality_expression and_expression_linha=and_expression_linha
		public Group getGroup() { return cGroup; }
		
		//equality_expression=equality_expression
		public Assignment getEquality_expressionAssignment_0() { return cEquality_expressionAssignment_0; }
		
		//equality_expression
		public RuleCall getEquality_expressionEquality_expressionParserRuleCall_0_0() { return cEquality_expressionEquality_expressionParserRuleCall_0_0; }
		
		//and_expression_linha=and_expression_linha
		public Assignment getAnd_expression_linhaAssignment_1() { return cAnd_expression_linhaAssignment_1; }
		
		//and_expression_linha
		public RuleCall getAnd_expression_linhaAnd_expression_linhaParserRuleCall_1_0() { return cAnd_expression_linhaAnd_expression_linhaParserRuleCall_1_0; }
	}
	public class And_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.and_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEquality_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquality_expressionEquality_expressionParserRuleCall_1_0 = (RuleCall)cEquality_expressionAssignment_1.eContents().get(0);
		private final Assignment cAnd_expression_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnd_expression_linhaAnd_expression_linhaParserRuleCall_2_0 = (RuleCall)cAnd_expression_linhaAssignment_2.eContents().get(0);
		
		//and_expression_linha:
		//	('&' equality_expression=equality_expression and_expression_linha=and_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('&' equality_expression=equality_expression and_expression_linha=and_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//equality_expression=equality_expression
		public Assignment getEquality_expressionAssignment_1() { return cEquality_expressionAssignment_1; }
		
		//equality_expression
		public RuleCall getEquality_expressionEquality_expressionParserRuleCall_1_0() { return cEquality_expressionEquality_expressionParserRuleCall_1_0; }
		
		//and_expression_linha=and_expression_linha
		public Assignment getAnd_expression_linhaAssignment_2() { return cAnd_expression_linhaAssignment_2; }
		
		//and_expression_linha
		public RuleCall getAnd_expression_linhaAnd_expression_linhaParserRuleCall_2_0() { return cAnd_expression_linhaAnd_expression_linhaParserRuleCall_2_0; }
	}
	public class Exclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnd_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnd_expressionAnd_expressionParserRuleCall_0_0 = (RuleCall)cAnd_expressionAssignment_0.eContents().get(0);
		private final Assignment cExclusive_or_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExclusive_or_expression_linhaExclusive_or_expression_linhaParserRuleCall_1_0 = (RuleCall)cExclusive_or_expression_linhaAssignment_1.eContents().get(0);
		
		//exclusive_or_expression:
		//	and_expression=and_expression exclusive_or_expression_linha=exclusive_or_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//and_expression=and_expression exclusive_or_expression_linha=exclusive_or_expression_linha
		public Group getGroup() { return cGroup; }
		
		//and_expression=and_expression
		public Assignment getAnd_expressionAssignment_0() { return cAnd_expressionAssignment_0; }
		
		//and_expression
		public RuleCall getAnd_expressionAnd_expressionParserRuleCall_0_0() { return cAnd_expressionAnd_expressionParserRuleCall_0_0; }
		
		//exclusive_or_expression_linha=exclusive_or_expression_linha
		public Assignment getExclusive_or_expression_linhaAssignment_1() { return cExclusive_or_expression_linhaAssignment_1; }
		
		//exclusive_or_expression_linha
		public RuleCall getExclusive_or_expression_linhaExclusive_or_expression_linhaParserRuleCall_1_0() { return cExclusive_or_expression_linhaExclusive_or_expression_linhaParserRuleCall_1_0; }
	}
	public class Exclusive_or_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exclusive_or_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAnd_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnd_expressionAnd_expressionParserRuleCall_1_0 = (RuleCall)cAnd_expressionAssignment_1.eContents().get(0);
		private final Assignment cExclusive_or_expression_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExclusive_or_expression_linhaExclusive_or_expression_linhaParserRuleCall_2_0 = (RuleCall)cExclusive_or_expression_linhaAssignment_2.eContents().get(0);
		
		//exclusive_or_expression_linha:
		//	('^' and_expression=and_expression exclusive_or_expression_linha=exclusive_or_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('^' and_expression=and_expression exclusive_or_expression_linha=exclusive_or_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_0() { return cCircumflexAccentKeyword_0; }
		
		//and_expression=and_expression
		public Assignment getAnd_expressionAssignment_1() { return cAnd_expressionAssignment_1; }
		
		//and_expression
		public RuleCall getAnd_expressionAnd_expressionParserRuleCall_1_0() { return cAnd_expressionAnd_expressionParserRuleCall_1_0; }
		
		//exclusive_or_expression_linha=exclusive_or_expression_linha
		public Assignment getExclusive_or_expression_linhaAssignment_2() { return cExclusive_or_expression_linhaAssignment_2; }
		
		//exclusive_or_expression_linha
		public RuleCall getExclusive_or_expression_linhaExclusive_or_expression_linhaParserRuleCall_2_0() { return cExclusive_or_expression_linhaExclusive_or_expression_linhaParserRuleCall_2_0; }
	}
	public class Inclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.inclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExclusive_or_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExclusive_or_expressionExclusive_or_expressionParserRuleCall_0_0 = (RuleCall)cExclusive_or_expressionAssignment_0.eContents().get(0);
		private final Assignment cInclusive_or_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInclusive_or_expression_linhaInclusive_or_expression_linhaParserRuleCall_1_0 = (RuleCall)cInclusive_or_expression_linhaAssignment_1.eContents().get(0);
		
		//inclusive_or_expression:
		//	exclusive_or_expression=exclusive_or_expression inclusive_or_expression_linha=inclusive_or_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//exclusive_or_expression=exclusive_or_expression inclusive_or_expression_linha=inclusive_or_expression_linha
		public Group getGroup() { return cGroup; }
		
		//exclusive_or_expression=exclusive_or_expression
		public Assignment getExclusive_or_expressionAssignment_0() { return cExclusive_or_expressionAssignment_0; }
		
		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionExclusive_or_expressionParserRuleCall_0_0() { return cExclusive_or_expressionExclusive_or_expressionParserRuleCall_0_0; }
		
		//inclusive_or_expression_linha=inclusive_or_expression_linha
		public Assignment getInclusive_or_expression_linhaAssignment_1() { return cInclusive_or_expression_linhaAssignment_1; }
		
		//inclusive_or_expression_linha
		public RuleCall getInclusive_or_expression_linhaInclusive_or_expression_linhaParserRuleCall_1_0() { return cInclusive_or_expression_linhaInclusive_or_expression_linhaParserRuleCall_1_0; }
	}
	public class Inclusive_or_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.inclusive_or_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExclusive_or_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExclusive_or_expressionExclusive_or_expressionParserRuleCall_1_0 = (RuleCall)cExclusive_or_expressionAssignment_1.eContents().get(0);
		private final Assignment cInclusive_or_expression_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInclusive_or_expression_linhaInclusive_or_expression_linhaParserRuleCall_2_0 = (RuleCall)cInclusive_or_expression_linhaAssignment_2.eContents().get(0);
		
		//inclusive_or_expression_linha:
		//	('|' exclusive_or_expression=exclusive_or_expression inclusive_or_expression_linha=inclusive_or_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('|' exclusive_or_expression=exclusive_or_expression inclusive_or_expression_linha=inclusive_or_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//exclusive_or_expression=exclusive_or_expression
		public Assignment getExclusive_or_expressionAssignment_1() { return cExclusive_or_expressionAssignment_1; }
		
		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionExclusive_or_expressionParserRuleCall_1_0() { return cExclusive_or_expressionExclusive_or_expressionParserRuleCall_1_0; }
		
		//inclusive_or_expression_linha=inclusive_or_expression_linha
		public Assignment getInclusive_or_expression_linhaAssignment_2() { return cInclusive_or_expression_linhaAssignment_2; }
		
		//inclusive_or_expression_linha
		public RuleCall getInclusive_or_expression_linhaInclusive_or_expression_linhaParserRuleCall_2_0() { return cInclusive_or_expression_linhaInclusive_or_expression_linhaParserRuleCall_2_0; }
	}
	public class Logical_and_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInclusive_or_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInclusive_or_expressionInclusive_or_expressionParserRuleCall_0_0 = (RuleCall)cInclusive_or_expressionAssignment_0.eContents().get(0);
		private final Assignment cLogical_and_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogical_and_expression_linhaLogical_and_expression_linhaParserRuleCall_1_0 = (RuleCall)cLogical_and_expression_linhaAssignment_1.eContents().get(0);
		
		//logical_and_expression:
		//	inclusive_or_expression=inclusive_or_expression logical_and_expression_linha=logical_and_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//inclusive_or_expression=inclusive_or_expression logical_and_expression_linha=logical_and_expression_linha
		public Group getGroup() { return cGroup; }
		
		//inclusive_or_expression=inclusive_or_expression
		public Assignment getInclusive_or_expressionAssignment_0() { return cInclusive_or_expressionAssignment_0; }
		
		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionInclusive_or_expressionParserRuleCall_0_0() { return cInclusive_or_expressionInclusive_or_expressionParserRuleCall_0_0; }
		
		//logical_and_expression_linha=logical_and_expression_linha
		public Assignment getLogical_and_expression_linhaAssignment_1() { return cLogical_and_expression_linhaAssignment_1; }
		
		//logical_and_expression_linha
		public RuleCall getLogical_and_expression_linhaLogical_and_expression_linhaParserRuleCall_1_0() { return cLogical_and_expression_linhaLogical_and_expression_linhaParserRuleCall_1_0; }
	}
	public class Logical_and_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_and_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInclusive_or_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInclusive_or_expressionInclusive_or_expressionParserRuleCall_1_0 = (RuleCall)cInclusive_or_expressionAssignment_1.eContents().get(0);
		private final Assignment cLogical_and_expression_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogical_and_expression_linhaLogical_and_expression_linhaParserRuleCall_2_0 = (RuleCall)cLogical_and_expression_linhaAssignment_2.eContents().get(0);
		
		//logical_and_expression_linha:
		//	('and' inclusive_or_expression=inclusive_or_expression logical_and_expression_linha=logical_and_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('and' inclusive_or_expression=inclusive_or_expression logical_and_expression_linha=logical_and_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//inclusive_or_expression=inclusive_or_expression
		public Assignment getInclusive_or_expressionAssignment_1() { return cInclusive_or_expressionAssignment_1; }
		
		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionInclusive_or_expressionParserRuleCall_1_0() { return cInclusive_or_expressionInclusive_or_expressionParserRuleCall_1_0; }
		
		//logical_and_expression_linha=logical_and_expression_linha
		public Assignment getLogical_and_expression_linhaAssignment_2() { return cLogical_and_expression_linhaAssignment_2; }
		
		//logical_and_expression_linha
		public RuleCall getLogical_and_expression_linhaLogical_and_expression_linhaParserRuleCall_2_0() { return cLogical_and_expression_linhaLogical_and_expression_linhaParserRuleCall_2_0; }
	}
	public class Logical_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogical_and_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogical_and_expressionLogical_and_expressionParserRuleCall_0_0 = (RuleCall)cLogical_and_expressionAssignment_0.eContents().get(0);
		private final Assignment cLogical_or_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogical_or_expression_linhaLogical_or_expression_linhaParserRuleCall_1_0 = (RuleCall)cLogical_or_expression_linhaAssignment_1.eContents().get(0);
		
		//logical_or_expression:
		//	logical_and_expression=logical_and_expression logical_or_expression_linha=logical_or_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//logical_and_expression=logical_and_expression logical_or_expression_linha=logical_or_expression_linha
		public Group getGroup() { return cGroup; }
		
		//logical_and_expression=logical_and_expression
		public Assignment getLogical_and_expressionAssignment_0() { return cLogical_and_expressionAssignment_0; }
		
		//logical_and_expression
		public RuleCall getLogical_and_expressionLogical_and_expressionParserRuleCall_0_0() { return cLogical_and_expressionLogical_and_expressionParserRuleCall_0_0; }
		
		//logical_or_expression_linha=logical_or_expression_linha
		public Assignment getLogical_or_expression_linhaAssignment_1() { return cLogical_or_expression_linhaAssignment_1; }
		
		//logical_or_expression_linha
		public RuleCall getLogical_or_expression_linhaLogical_or_expression_linhaParserRuleCall_1_0() { return cLogical_or_expression_linhaLogical_or_expression_linhaParserRuleCall_1_0; }
	}
	public class Logical_or_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_or_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLogical_and_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLogical_and_expressionLogical_and_expressionParserRuleCall_1_0 = (RuleCall)cLogical_and_expressionAssignment_1.eContents().get(0);
		private final Assignment cLogical_or_expression_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogical_or_expression_linhaLogical_or_expression_linhaParserRuleCall_2_0 = (RuleCall)cLogical_or_expression_linhaAssignment_2.eContents().get(0);
		
		//logical_or_expression_linha:
		//	('or' logical_and_expression=logical_and_expression logical_or_expression_linha=logical_or_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('or' logical_and_expression=logical_and_expression logical_or_expression_linha=logical_or_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//'or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//logical_and_expression=logical_and_expression
		public Assignment getLogical_and_expressionAssignment_1() { return cLogical_and_expressionAssignment_1; }
		
		//logical_and_expression
		public RuleCall getLogical_and_expressionLogical_and_expressionParserRuleCall_1_0() { return cLogical_and_expressionLogical_and_expressionParserRuleCall_1_0; }
		
		//logical_or_expression_linha=logical_or_expression_linha
		public Assignment getLogical_or_expression_linhaAssignment_2() { return cLogical_or_expression_linhaAssignment_2; }
		
		//logical_or_expression_linha
		public RuleCall getLogical_or_expression_linhaLogical_or_expression_linhaParserRuleCall_2_0() { return cLogical_or_expression_linhaLogical_or_expression_linhaParserRuleCall_2_0; }
	}
	public class Conditional_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.conditional_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLogical_or_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLogical_or_expressionLogical_or_expressionParserRuleCall_0_0 = (RuleCall)cLogical_or_expressionAssignment_0.eContents().get(0);
		private final Assignment cConditional_expression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditional_expression_linhaConditional_expression_linhaParserRuleCall_1_0 = (RuleCall)cConditional_expression_linhaAssignment_1.eContents().get(0);
		
		//conditional_expression:
		//	logical_or_expression=logical_or_expression conditional_expression_linha=conditional_expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//logical_or_expression=logical_or_expression conditional_expression_linha=conditional_expression_linha
		public Group getGroup() { return cGroup; }
		
		//logical_or_expression=logical_or_expression
		public Assignment getLogical_or_expressionAssignment_0() { return cLogical_or_expressionAssignment_0; }
		
		//logical_or_expression
		public RuleCall getLogical_or_expressionLogical_or_expressionParserRuleCall_0_0() { return cLogical_or_expressionLogical_or_expressionParserRuleCall_0_0; }
		
		//conditional_expression_linha=conditional_expression_linha
		public Assignment getConditional_expression_linhaAssignment_1() { return cConditional_expression_linhaAssignment_1; }
		
		//conditional_expression_linha
		public RuleCall getConditional_expression_linhaConditional_expression_linhaParserRuleCall_1_0() { return cConditional_expression_linhaConditional_expression_linhaParserRuleCall_1_0; }
	}
	public class Conditional_expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.conditional_expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditional_expressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditional_expressionConditional_expressionParserRuleCall_3_0 = (RuleCall)cConditional_expressionAssignment_3.eContents().get(0);
		private final Assignment cConditional_expression_linhaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditional_expression_linhaConditional_expression_linhaParserRuleCall_4_0 = (RuleCall)cConditional_expression_linhaAssignment_4.eContents().get(0);
		
		//conditional_expression_linha:
		//	('?' expression=expression ':' conditional_expression=conditional_expression
		//	conditional_expression_linha=conditional_expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('?' expression=expression ':' conditional_expression=conditional_expression
		//conditional_expression_linha=conditional_expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//conditional_expression=conditional_expression
		public Assignment getConditional_expressionAssignment_3() { return cConditional_expressionAssignment_3; }
		
		//conditional_expression
		public RuleCall getConditional_expressionConditional_expressionParserRuleCall_3_0() { return cConditional_expressionConditional_expressionParserRuleCall_3_0; }
		
		//conditional_expression_linha=conditional_expression_linha
		public Assignment getConditional_expression_linhaAssignment_4() { return cConditional_expression_linhaAssignment_4; }
		
		//conditional_expression_linha
		public RuleCall getConditional_expression_linhaConditional_expression_linhaParserRuleCall_4_0() { return cConditional_expression_linhaConditional_expression_linhaParserRuleCall_4_0; }
	}
	public class Assignment_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assignment_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConditional_expressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConditional_expressionConditional_expressionParserRuleCall_0_0 = (RuleCall)cConditional_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnary_expressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_1_0_0 = (RuleCall)cUnary_expressionAssignment_1_0.eContents().get(0);
		private final Assignment cAssignment_operatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignment_operatorAssignment_operatorParserRuleCall_1_1_0 = (RuleCall)cAssignment_operatorAssignment_1_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_2_0 = (RuleCall)cAssignment_expressionAssignment_1_2.eContents().get(0);
		
		//assignment_expression:
		//	conditional_expression=conditional_expression
		//	| unary_expression=unary_expression assignment_operator=assignment_operator
		//	assignment_expression=assignment_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional_expression=conditional_expression | unary_expression=unary_expression
		//assignment_operator=assignment_operator assignment_expression=assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//conditional_expression=conditional_expression
		public Assignment getConditional_expressionAssignment_0() { return cConditional_expressionAssignment_0; }
		
		//conditional_expression
		public RuleCall getConditional_expressionConditional_expressionParserRuleCall_0_0() { return cConditional_expressionConditional_expressionParserRuleCall_0_0; }
		
		//unary_expression=unary_expression assignment_operator=assignment_operator assignment_expression=assignment_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_1_0() { return cUnary_expressionAssignment_1_0; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_1_0_0() { return cUnary_expressionUnary_expressionParserRuleCall_1_0_0; }
		
		//assignment_operator=assignment_operator
		public Assignment getAssignment_operatorAssignment_1_1() { return cAssignment_operatorAssignment_1_1; }
		
		//assignment_operator
		public RuleCall getAssignment_operatorAssignment_operatorParserRuleCall_1_1_0() { return cAssignment_operatorAssignment_operatorParserRuleCall_1_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1_2() { return cAssignment_expressionAssignment_1_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_2_0; }
	}
	public class Assignment_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assignment_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPlusSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHyphenMinusEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignLessThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAmpersandEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cCircumflexAccentEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVerticalLineEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//assignment_operator:
		//	'='
		//	| '*='
		//	| '/='
		//	| '%='
		//	| '+='
		//	| '-='
		//	| '<<='
		//	| '>>='
		//	| '&='
		//	| '^='
		//	| '|=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_1() { return cAsteriskEqualsSignKeyword_1; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_2() { return cSolidusEqualsSignKeyword_2; }
		
		//'%='
		public Keyword getPercentSignEqualsSignKeyword_3() { return cPercentSignEqualsSignKeyword_3; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_4() { return cPlusSignEqualsSignKeyword_4; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_5() { return cHyphenMinusEqualsSignKeyword_5; }
		
		//'<<='
		public Keyword getLessThanSignLessThanSignEqualsSignKeyword_6() { return cLessThanSignLessThanSignEqualsSignKeyword_6; }
		
		//'>>='
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_7() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_7; }
		
		//'&='
		public Keyword getAmpersandEqualsSignKeyword_8() { return cAmpersandEqualsSignKeyword_8; }
		
		//'^='
		public Keyword getCircumflexAccentEqualsSignKeyword_9() { return cCircumflexAccentEqualsSignKeyword_9; }
		
		//'|='
		public Keyword getVerticalLineEqualsSignKeyword_10() { return cVerticalLineEqualsSignKeyword_10; }
	}
	public class Unary_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unary_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTildeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//unary_operator:
		//	'&'
		//	| '*'
		//	| '+'
		//	| '-'
		//	| '~'
		//	| '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'&' | '*' | '+' | '-' | '~' | '!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//'~'
		public Keyword getTildeKeyword_4() { return cTildeKeyword_4; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_5() { return cExclamationMarkKeyword_5; }
	}
	public class Type_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0 = (RuleCall)cSpecifier_qualifier_listAssignment_0_0.eContents().get(0);
		private final Assignment cAbstract_declaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAbstract_declaratorAbstract_declaratorParserRuleCall_0_1_0 = (RuleCall)cAbstract_declaratorAssignment_0_1.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0 = (RuleCall)cSpecifier_qualifier_listAssignment_1.eContents().get(0);
		
		//type_name:
		//	specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator
		//	| specifier_qualifier_list=specifier_qualifier_list;
		@Override public ParserRule getRule() { return rule; }
		
		//specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator |
		//specifier_qualifier_list=specifier_qualifier_list
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_0_0() { return cSpecifier_qualifier_listAssignment_0_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0; }
		
		//abstract_declarator=abstract_declarator
		public Assignment getAbstract_declaratorAssignment_0_1() { return cAbstract_declaratorAssignment_0_1; }
		
		//abstract_declarator
		public RuleCall getAbstract_declaratorAbstract_declaratorParserRuleCall_0_1_0() { return cAbstract_declaratorAbstract_declaratorParserRuleCall_0_1_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_1() { return cSpecifier_qualifier_listAssignment_1; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_0 = (RuleCall)cAssignment_expressionAssignment_0.eContents().get(0);
		private final Assignment cExpression_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpression_linhaExpression_linhaParserRuleCall_1_0 = (RuleCall)cExpression_linhaAssignment_1.eContents().get(0);
		
		//expression:
		//	assignment_expression=assignment_expression expression_linha=expression_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//assignment_expression=assignment_expression expression_linha=expression_linha
		public Group getGroup() { return cGroup; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0() { return cAssignment_expressionAssignment_0; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_0; }
		
		//expression_linha=expression_linha
		public Assignment getExpression_linhaAssignment_1() { return cExpression_linhaAssignment_1; }
		
		//expression_linha
		public RuleCall getExpression_linhaExpression_linhaParserRuleCall_1_0() { return cExpression_linhaExpression_linhaParserRuleCall_1_0; }
	}
	public class Expression_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_0 = (RuleCall)cAssignment_expressionAssignment_1.eContents().get(0);
		private final Assignment cExpression_linhaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpression_linhaExpression_linhaParserRuleCall_2_0 = (RuleCall)cExpression_linhaAssignment_2.eContents().get(0);
		
		//expression_linha:
		//	(',' assignment_expression=assignment_expression expression_linha=expression_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(',' assignment_expression=assignment_expression expression_linha=expression_linha)?
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1() { return cAssignment_expressionAssignment_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_0; }
		
		//expression_linha=expression_linha
		public Assignment getExpression_linhaAssignment_2() { return cExpression_linhaAssignment_2; }
		
		//expression_linha
		public RuleCall getExpression_linhaExpression_linhaParserRuleCall_2_0() { return cExpression_linhaExpression_linhaParserRuleCall_2_0; }
	}
	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.constant_expression");
		private final Assignment cConditional_expressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConditional_expressionConditional_expressionParserRuleCall_0 = (RuleCall)cConditional_expressionAssignment.eContents().get(0);
		
		//constant_expression:
		//	conditional_expression=conditional_expression /* with constraints */;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional_expression=conditional_expression
		public Assignment getConditional_expressionAssignment() { return cConditional_expressionAssignment; }
		
		//conditional_expression
		public RuleCall getConditional_expressionConditional_expressionParserRuleCall_0() { return cConditional_expressionConditional_expressionParserRuleCall_0; }
	}
	public class Init_declarator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInit_declaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInit_declaratorInit_declaratorParserRuleCall_0_0 = (RuleCall)cInit_declaratorAssignment_0.eContents().get(0);
		private final Assignment cInit_declarator_list_linhaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_0 = (RuleCall)cInit_declarator_list_linhaAssignment_1.eContents().get(0);
		
		//init_declarator_list:
		//	init_declarator=init_declarator init_declarator_list_linha=init_declarator_list_linha;
		@Override public ParserRule getRule() { return rule; }
		
		//init_declarator=init_declarator init_declarator_list_linha=init_declarator_list_linha
		public Group getGroup() { return cGroup; }
		
		//init_declarator=init_declarator
		public Assignment getInit_declaratorAssignment_0() { return cInit_declaratorAssignment_0; }
		
		//init_declarator
		public RuleCall getInit_declaratorInit_declaratorParserRuleCall_0_0() { return cInit_declaratorInit_declaratorParserRuleCall_0_0; }
		
		//init_declarator_list_linha=init_declarator_list_linha
		public Assignment getInit_declarator_list_linhaAssignment_1() { return cInit_declarator_list_linhaAssignment_1; }
		
		//init_declarator_list_linha
		public RuleCall getInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_0() { return cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_0; }
	}
	public class Init_declarator_list_linhaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator_list_linha");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitDecclaratorListLinhaActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInit_declaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInit_declaratorInit_declaratorParserRuleCall_1_1_0 = (RuleCall)cInit_declaratorAssignment_1_1.eContents().get(0);
		private final Assignment cInit_declarator_list_linhaAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_2_0 = (RuleCall)cInit_declarator_list_linhaAssignment_1_2.eContents().get(0);
		
		//init_declarator_list_linha:
		//	{InitDecclaratorListLinhaAction} (',' init_declarator=init_declarator
		//	init_declarator_list_linha=init_declarator_list_linha)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{InitDecclaratorListLinhaAction} (',' init_declarator=init_declarator
		//init_declarator_list_linha=init_declarator_list_linha)?
		public Group getGroup() { return cGroup; }
		
		//{InitDecclaratorListLinhaAction}
		public Action getInitDecclaratorListLinhaActionAction_0() { return cInitDecclaratorListLinhaActionAction_0; }
		
		//(',' init_declarator=init_declarator init_declarator_list_linha=init_declarator_list_linha)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//init_declarator=init_declarator
		public Assignment getInit_declaratorAssignment_1_1() { return cInit_declaratorAssignment_1_1; }
		
		//init_declarator
		public RuleCall getInit_declaratorInit_declaratorParserRuleCall_1_1_0() { return cInit_declaratorInit_declaratorParserRuleCall_1_1_0; }
		
		//init_declarator_list_linha=init_declarator_list_linha
		public Assignment getInit_declarator_list_linhaAssignment_1_2() { return cInit_declarator_list_linhaAssignment_1_2; }
		
		//init_declarator_list_linha
		public RuleCall getInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_2_0() { return cInit_declarator_list_linhaInit_declarator_list_linhaParserRuleCall_1_2_0; }
	}
	public class Init_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_0_0 = (RuleCall)cDeclaratorAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInitializerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInitializerInitializerParserRuleCall_0_2_0 = (RuleCall)cInitializerAssignment_0_2.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclaratorAssignment_1.eContents().get(0);
		
		//init_declarator:
		//	declarator=declarator '=' initializer=initializer
		//	| declarator=declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//declarator=declarator '=' initializer=initializer | declarator=declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declarator=declarator '=' initializer=initializer
		public Group getGroup_0() { return cGroup_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_0_0() { return cDeclaratorAssignment_0_0; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_0_0() { return cDeclaratorDeclaratorParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_0_2() { return cInitializerAssignment_0_2; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_0_2_0() { return cInitializerInitializerParserRuleCall_0_2_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_1() { return cDeclaratorAssignment_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_0; }
	}
	public class String_ufcgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.string_ufcg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cString_literalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cString_literalSTRING_LITERALTerminalRuleCall_0_0 = (RuleCall)cString_literalAssignment_0.eContents().get(0);
		private final Assignment c__func__Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword c__func____func__Keyword_1_0 = (Keyword)c__func__Assignment_1.eContents().get(0);
		
		//string_ufcg:
		//	string_literal=STRING_LITERAL
		//	| __func__='__func__';
		@Override public ParserRule getRule() { return rule; }
		
		//string_literal=STRING_LITERAL | __func__='__func__'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string_literal=STRING_LITERAL
		public Assignment getString_literalAssignment_0() { return cString_literalAssignment_0; }
		
		//STRING_LITERAL
		public RuleCall getString_literalSTRING_LITERALTerminalRuleCall_0_0() { return cString_literalSTRING_LITERALTerminalRuleCall_0_0; }
		
		//__func__='__func__'
		public Assignment get__func__Assignment_1() { return c__func__Assignment_1; }
		
		//'__func__'
		public Keyword get__func____func__Keyword_1_0() { return c__func____func__Keyword_1_0; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cI_constantAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cI_constantINTTerminalRuleCall_0_0 = (RuleCall)cI_constantAssignment_0.eContents().get(0);
		private final Assignment cF_constantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cF_constantFLOATTerminalRuleCall_1_0 = (RuleCall)cF_constantAssignment_1.eContents().get(0);
		private final Assignment cCharAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCharCHARTerminalRuleCall_2_0 = (RuleCall)cCharAssignment_2.eContents().get(0);
		private final Assignment cEnumzAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cEnumzEnumKeyword_3_0 = (Keyword)cEnumzAssignment_3.eContents().get(0);
		
		//constant:
		//	i_constant=INT /* includes character_constant */
		//	| f_constant=FLOAT
		//	| char=CHAR
		//	| enumz='enum' /* after it has been defined as such */;
		@Override public ParserRule getRule() { return rule; }
		
		//i_constant=INT /* includes character_constant */ | f_constant=FLOAT | char=CHAR | enumz='enum'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//i_constant=INT
		public Assignment getI_constantAssignment_0() { return cI_constantAssignment_0; }
		
		//INT
		public RuleCall getI_constantINTTerminalRuleCall_0_0() { return cI_constantINTTerminalRuleCall_0_0; }
		
		//f_constant=FLOAT
		public Assignment getF_constantAssignment_1() { return cF_constantAssignment_1; }
		
		//FLOAT
		public RuleCall getF_constantFLOATTerminalRuleCall_1_0() { return cF_constantFLOATTerminalRuleCall_1_0; }
		
		//char=CHAR
		public Assignment getCharAssignment_2() { return cCharAssignment_2; }
		
		//CHAR
		public RuleCall getCharCHARTerminalRuleCall_2_0() { return cCharCHARTerminalRuleCall_2_0; }
		
		//enumz='enum'
		public Assignment getEnumzAssignment_3() { return cEnumzAssignment_3; }
		
		//'enum'
		public Keyword getEnumzEnumKeyword_3_0() { return cEnumzEnumKeyword_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final Translation_unitElements pTranslation_unit;
	private final External_declarationElements pExternal_declaration;
	private final Declaration_specifiersElements pDeclaration_specifiers;
	private final Function_specifierElements pFunction_specifier;
	private final Alignment_specifierElements pAlignment_specifier;
	private final Type_qualifierElements pType_qualifier;
	private final Type_specifierElements pType_specifier;
	private final Enum_specifierElements pEnum_specifier;
	private final Enumerator_listElements pEnumerator_list;
	private final Enumerator_list_linhaElements pEnumerator_list_linha;
	private final EnumeratorElements pEnumerator;
	private final Atomic_type_specifierElements pAtomic_type_specifier;
	private final Struct_or_union_specifierElements pStruct_or_union_specifier;
	private final Struct_or_unionElements pStruct_or_union;
	private final Struct_or_union_specifier_complementElements pStruct_or_union_specifier_complement;
	private final Struct_declaration_listElements pStruct_declaration_list;
	private final Struct_declaration_list_linhaElements pStruct_declaration_list_linha;
	private final Struct_declarationElements pStruct_declaration;
	private final Struct_declarator_listElements pStruct_declarator_list;
	private final Struct_declarator_list_linhaElements pStruct_declarator_list_linha;
	private final Struct_declaratorElements pStruct_declarator;
	private final Specifier_qualifier_listElements pSpecifier_qualifier_list;
	private final Storage_class_specifierElements pStorage_class_specifier;
	private final DeclarationElements pDeclaration;
	private final Function_definitionElements pFunction_definition;
	private final Declaration_listElements pDeclaration_list;
	private final Declaration_list_linhaElements pDeclaration_list_linha;
	private final DeclaratorElements pDeclarator;
	private final PointerElements pPointer;
	private final Type_qualifier_listElements pType_qualifier_list;
	private final Type_qualifier_list_linhaElements pType_qualifier_list_linha;
	private final Direct_declaratorElements pDirect_declarator;
	private final Direct_declarator_linhaElements pDirect_declarator_linha;
	private final Direct_declarator_complementoElements pDirect_declarator_complemento;
	private final Parameter_type_listElements pParameter_type_list;
	private final Parameter_listaElements pParameter_lista;
	private final Parameter_list_linhaElements pParameter_list_linha;
	private final Parameter_declarationElements pParameter_declaration;
	private final Abstract_declaratorElements pAbstract_declarator;
	private final Direct_abstract_declaratorElements pDirect_abstract_declarator;
	private final InitializerElements pInitializer;
	private final Direct_abstract_declarator_linhaElements pDirect_abstract_declarator_linha;
	private final Direct_abstract_declarator_complementElements pDirect_abstract_declarator_complement;
	private final Identifier_listElements pIdentifier_list;
	private final Identifier_list_linhaElements pIdentifier_list_linha;
	private final Translation_unit_linhaElements pTranslation_unit_linha;
	private final Primary_expressionElements pPrimary_expression;
	private final Enumeration_constantElements pEnumeration_constant;
	private final Generic_selectionElements pGeneric_selection;
	private final Generic_assoc_listElements pGeneric_assoc_list;
	private final Generic_assoc_list_linhaElements pGeneric_assoc_list_linha;
	private final Generic_associationElements pGeneric_association;
	private final Postfix_expressionElements pPostfix_expression;
	private final Postfix_expression_linhaElements pPostfix_expression_linha;
	private final Initializer_listElements pInitializer_list;
	private final Initializer_list_linhaElements pInitializer_list_linha;
	private final Initializer_list_complementElements pInitializer_list_complement;
	private final DesignationElements pDesignation;
	private final Designator_listElements pDesignator_list;
	private final Designator_list_linhaElements pDesignator_list_linha;
	private final DesignatorElements pDesignator;
	private final Static_assert_declarationElements pStatic_assert_declaration;
	private final Postfix_expression_complementElements pPostfix_expression_complement;
	private final Argument_expression_listElements pArgument_expression_list;
	private final Argument_expression_list_linhaElements pArgument_expression_list_linha;
	private final Unary_expressionElements pUnary_expression;
	private final Cast_expressionElements pCast_expression;
	private final Multiplicative_expressionElements pMultiplicative_expression;
	private final Multiplicative_expression_linhaElements pMultiplicative_expression_linha;
	private final Multiplicative_expression_complementElements pMultiplicative_expression_complement;
	private final Additive_expressionElements pAdditive_expression;
	private final Additive_expression_linhaElements pAdditive_expression_linha;
	private final Additive_expression_complementElements pAdditive_expression_complement;
	private final Shift_expressionElements pShift_expression;
	private final Shift_expression_linhaElements pShift_expression_linha;
	private final Shift_expression_complementElements pShift_expression_complement;
	private final Relational_expressionElements pRelational_expression;
	private final Relational_expression_linhaElements pRelational_expression_linha;
	private final Relational_expression_complementElements pRelational_expression_complement;
	private final Equality_expressionElements pEquality_expression;
	private final Equality_expression_linhaElements pEquality_expression_linha;
	private final Equality_expression_complementElements pEquality_expression_complement;
	private final StatementElements pStatement;
	private final Jump_statementElements pJump_statement;
	private final Iteration_statementElements pIteration_statement;
	private final Selection_statementElements pSelection_statement;
	private final Labeled_statementElements pLabeled_statement;
	private final Compound_statementElements pCompound_statement;
	private final Block_item_listElements pBlock_item_list;
	private final Block_item_list_linhaElements pBlock_item_list_linha;
	private final Block_itemElements pBlock_item;
	private final Expression_statementElements pExpression_statement;
	private final And_expressionElements pAnd_expression;
	private final And_expression_linhaElements pAnd_expression_linha;
	private final Exclusive_or_expressionElements pExclusive_or_expression;
	private final Exclusive_or_expression_linhaElements pExclusive_or_expression_linha;
	private final Inclusive_or_expressionElements pInclusive_or_expression;
	private final Inclusive_or_expression_linhaElements pInclusive_or_expression_linha;
	private final Logical_and_expressionElements pLogical_and_expression;
	private final Logical_and_expression_linhaElements pLogical_and_expression_linha;
	private final Logical_or_expressionElements pLogical_or_expression;
	private final Logical_or_expression_linhaElements pLogical_or_expression_linha;
	private final Conditional_expressionElements pConditional_expression;
	private final Conditional_expression_linhaElements pConditional_expression_linha;
	private final Assignment_expressionElements pAssignment_expression;
	private final Assignment_operatorElements pAssignment_operator;
	private final Unary_operatorElements pUnary_operator;
	private final Type_nameElements pType_name;
	private final ExpressionElements pExpression;
	private final Expression_linhaElements pExpression_linha;
	private final Constant_expressionElements pConstant_expression;
	private final Init_declarator_listElements pInit_declarator_list;
	private final Init_declarator_list_linhaElements pInit_declarator_list_linha;
	private final Init_declaratorElements pInit_declarator;
	private final String_ufcgElements pString_ufcg;
	private final ConstantElements pConstant;
	private final TerminalRule tIDz;
	private final TerminalRule tCHAR;
	private final TerminalRule tFLOAT;
	private final TerminalRule tO;
	private final TerminalRule tD;
	private final TerminalRule tNZ;
	private final TerminalRule tA;
	private final TerminalRule tH;
	private final TerminalRule tHP;
	private final TerminalRule tE;
	private final TerminalRule tP;
	private final TerminalRule tFS;
	private final TerminalRule tES;
	private final TerminalRule tIS;
	private final TerminalRule tCP;
	private final TerminalRule tSP;
	private final TerminalRule tWS;
	private final TerminalRule tI_CONSTANT;
	private final TerminalRule tF_CONSTANT;
	private final TerminalRule tSTRING_LITERAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTranslation_unit = new Translation_unitElements();
		this.pExternal_declaration = new External_declarationElements();
		this.pDeclaration_specifiers = new Declaration_specifiersElements();
		this.pFunction_specifier = new Function_specifierElements();
		this.pAlignment_specifier = new Alignment_specifierElements();
		this.pType_qualifier = new Type_qualifierElements();
		this.pType_specifier = new Type_specifierElements();
		this.pEnum_specifier = new Enum_specifierElements();
		this.pEnumerator_list = new Enumerator_listElements();
		this.pEnumerator_list_linha = new Enumerator_list_linhaElements();
		this.pEnumerator = new EnumeratorElements();
		this.pAtomic_type_specifier = new Atomic_type_specifierElements();
		this.pStruct_or_union_specifier = new Struct_or_union_specifierElements();
		this.pStruct_or_union = new Struct_or_unionElements();
		this.pStruct_or_union_specifier_complement = new Struct_or_union_specifier_complementElements();
		this.pStruct_declaration_list = new Struct_declaration_listElements();
		this.pStruct_declaration_list_linha = new Struct_declaration_list_linhaElements();
		this.pStruct_declaration = new Struct_declarationElements();
		this.pStruct_declarator_list = new Struct_declarator_listElements();
		this.pStruct_declarator_list_linha = new Struct_declarator_list_linhaElements();
		this.pStruct_declarator = new Struct_declaratorElements();
		this.pSpecifier_qualifier_list = new Specifier_qualifier_listElements();
		this.pStorage_class_specifier = new Storage_class_specifierElements();
		this.pDeclaration = new DeclarationElements();
		this.pFunction_definition = new Function_definitionElements();
		this.pDeclaration_list = new Declaration_listElements();
		this.pDeclaration_list_linha = new Declaration_list_linhaElements();
		this.pDeclarator = new DeclaratorElements();
		this.pPointer = new PointerElements();
		this.pType_qualifier_list = new Type_qualifier_listElements();
		this.pType_qualifier_list_linha = new Type_qualifier_list_linhaElements();
		this.pDirect_declarator = new Direct_declaratorElements();
		this.pDirect_declarator_linha = new Direct_declarator_linhaElements();
		this.pDirect_declarator_complemento = new Direct_declarator_complementoElements();
		this.pParameter_type_list = new Parameter_type_listElements();
		this.pParameter_lista = new Parameter_listaElements();
		this.pParameter_list_linha = new Parameter_list_linhaElements();
		this.pParameter_declaration = new Parameter_declarationElements();
		this.pAbstract_declarator = new Abstract_declaratorElements();
		this.pDirect_abstract_declarator = new Direct_abstract_declaratorElements();
		this.pInitializer = new InitializerElements();
		this.pDirect_abstract_declarator_linha = new Direct_abstract_declarator_linhaElements();
		this.pDirect_abstract_declarator_complement = new Direct_abstract_declarator_complementElements();
		this.pIdentifier_list = new Identifier_listElements();
		this.pIdentifier_list_linha = new Identifier_list_linhaElements();
		this.pTranslation_unit_linha = new Translation_unit_linhaElements();
		this.pPrimary_expression = new Primary_expressionElements();
		this.pEnumeration_constant = new Enumeration_constantElements();
		this.pGeneric_selection = new Generic_selectionElements();
		this.pGeneric_assoc_list = new Generic_assoc_listElements();
		this.pGeneric_assoc_list_linha = new Generic_assoc_list_linhaElements();
		this.pGeneric_association = new Generic_associationElements();
		this.pPostfix_expression = new Postfix_expressionElements();
		this.pPostfix_expression_linha = new Postfix_expression_linhaElements();
		this.pInitializer_list = new Initializer_listElements();
		this.pInitializer_list_linha = new Initializer_list_linhaElements();
		this.pInitializer_list_complement = new Initializer_list_complementElements();
		this.pDesignation = new DesignationElements();
		this.pDesignator_list = new Designator_listElements();
		this.pDesignator_list_linha = new Designator_list_linhaElements();
		this.pDesignator = new DesignatorElements();
		this.pStatic_assert_declaration = new Static_assert_declarationElements();
		this.pPostfix_expression_complement = new Postfix_expression_complementElements();
		this.pArgument_expression_list = new Argument_expression_listElements();
		this.pArgument_expression_list_linha = new Argument_expression_list_linhaElements();
		this.pUnary_expression = new Unary_expressionElements();
		this.pCast_expression = new Cast_expressionElements();
		this.pMultiplicative_expression = new Multiplicative_expressionElements();
		this.pMultiplicative_expression_linha = new Multiplicative_expression_linhaElements();
		this.pMultiplicative_expression_complement = new Multiplicative_expression_complementElements();
		this.pAdditive_expression = new Additive_expressionElements();
		this.pAdditive_expression_linha = new Additive_expression_linhaElements();
		this.pAdditive_expression_complement = new Additive_expression_complementElements();
		this.pShift_expression = new Shift_expressionElements();
		this.pShift_expression_linha = new Shift_expression_linhaElements();
		this.pShift_expression_complement = new Shift_expression_complementElements();
		this.pRelational_expression = new Relational_expressionElements();
		this.pRelational_expression_linha = new Relational_expression_linhaElements();
		this.pRelational_expression_complement = new Relational_expression_complementElements();
		this.pEquality_expression = new Equality_expressionElements();
		this.pEquality_expression_linha = new Equality_expression_linhaElements();
		this.pEquality_expression_complement = new Equality_expression_complementElements();
		this.pStatement = new StatementElements();
		this.pJump_statement = new Jump_statementElements();
		this.pIteration_statement = new Iteration_statementElements();
		this.pSelection_statement = new Selection_statementElements();
		this.pLabeled_statement = new Labeled_statementElements();
		this.pCompound_statement = new Compound_statementElements();
		this.pBlock_item_list = new Block_item_listElements();
		this.pBlock_item_list_linha = new Block_item_list_linhaElements();
		this.pBlock_item = new Block_itemElements();
		this.pExpression_statement = new Expression_statementElements();
		this.pAnd_expression = new And_expressionElements();
		this.pAnd_expression_linha = new And_expression_linhaElements();
		this.pExclusive_or_expression = new Exclusive_or_expressionElements();
		this.pExclusive_or_expression_linha = new Exclusive_or_expression_linhaElements();
		this.pInclusive_or_expression = new Inclusive_or_expressionElements();
		this.pInclusive_or_expression_linha = new Inclusive_or_expression_linhaElements();
		this.pLogical_and_expression = new Logical_and_expressionElements();
		this.pLogical_and_expression_linha = new Logical_and_expression_linhaElements();
		this.pLogical_or_expression = new Logical_or_expressionElements();
		this.pLogical_or_expression_linha = new Logical_or_expression_linhaElements();
		this.pConditional_expression = new Conditional_expressionElements();
		this.pConditional_expression_linha = new Conditional_expression_linhaElements();
		this.pAssignment_expression = new Assignment_expressionElements();
		this.pAssignment_operator = new Assignment_operatorElements();
		this.pUnary_operator = new Unary_operatorElements();
		this.pType_name = new Type_nameElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_linha = new Expression_linhaElements();
		this.pConstant_expression = new Constant_expressionElements();
		this.pInit_declarator_list = new Init_declarator_listElements();
		this.pInit_declarator_list_linha = new Init_declarator_list_linhaElements();
		this.pInit_declarator = new Init_declaratorElements();
		this.pString_ufcg = new String_ufcgElements();
		this.pConstant = new ConstantElements();
		this.tIDz = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IDz");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CHAR");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FLOAT");
		this.tO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.O");
		this.tD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.D");
		this.tNZ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NZ");
		this.tA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.A");
		this.tH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.H");
		this.tHP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HP");
		this.tE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.E");
		this.tP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.P");
		this.tFS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FS");
		this.tES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ES");
		this.tIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IS");
		this.tCP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CP");
		this.tSP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SP");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WS");
		this.tI_CONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.I_CONSTANT");
		this.tF_CONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.F_CONSTANT");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING_LITERAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=translation_unit;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//translation_unit:
	//	external_declaration=external_declaration translation_unit_linha=translation_unit_linha;
	public Translation_unitElements getTranslation_unitAccess() {
		return pTranslation_unit;
	}
	
	public ParserRule getTranslation_unitRule() {
		return getTranslation_unitAccess().getRule();
	}
	
	//external_declaration:
	//	function_definitio=function_definition
	//	| declaration=declaration;
	public External_declarationElements getExternal_declarationAccess() {
		return pExternal_declaration;
	}
	
	public ParserRule getExternal_declarationRule() {
		return getExternal_declarationAccess().getRule();
	}
	
	//declaration_specifiers:
	//	storage_class_specifier=storage_class_specifier declaration_specifiers+=declaration_specifiers
	//	| storage_class_specifier=storage_class_specifier
	//	| type_specifier=type_specifier declaration_specifiers+=declaration_specifiers
	//	| type_specifier=type_specifier
	//	| type_qualifier=type_qualifier declaration_specifiers+=declaration_specifiers
	//	| type_qualifier=type_qualifier
	//	| function_specifier=function_specifier declaration_specifiers+=declaration_specifiers
	//	| function_specifier=function_specifier
	//	| alignment_specifier=alignment_specifier declaration_specifiers+=declaration_specifiers
	//	| alignment_specifier=alignment_specifier;
	public Declaration_specifiersElements getDeclaration_specifiersAccess() {
		return pDeclaration_specifiers;
	}
	
	public ParserRule getDeclaration_specifiersRule() {
		return getDeclaration_specifiersAccess().getRule();
	}
	
	//function_specifier:
	//	'inline'
	//	| '_Noreturn';
	public Function_specifierElements getFunction_specifierAccess() {
		return pFunction_specifier;
	}
	
	public ParserRule getFunction_specifierRule() {
		return getFunction_specifierAccess().getRule();
	}
	
	//alignment_specifier:
	//	'_Alignas' '(' type_name=type_name ')'
	//	| '_Alignas' '(' constant_expression=constant_expression ')';
	public Alignment_specifierElements getAlignment_specifierAccess() {
		return pAlignment_specifier;
	}
	
	public ParserRule getAlignment_specifierRule() {
		return getAlignment_specifierAccess().getRule();
	}
	
	//type_qualifier:
	//	namez='const'
	//	| namez='restrict'
	//	| namez='volatile'
	//	| namez='_Atomic';
	public Type_qualifierElements getType_qualifierAccess() {
		return pType_qualifier;
	}
	
	public ParserRule getType_qualifierRule() {
		return getType_qualifierAccess().getRule();
	}
	
	//type_specifier:
	//	type_name_str='void'
	//	| type_name_str='char'
	//	| type_name_str='short'
	//	| type_name_str='int'
	//	| type_name_str='long'
	//	| type_name_str='float'
	//	| type_name_str='double'
	//	| type_name_str='signed'
	//	| type_name_str='unsigned'
	//	| type_name_str='bool'
	//	| type_name_str='_Complex'
	//	| type_name_str='_Imaginary' /* non-mandated extension */
	//	| atomic_type_specifier=atomic_type_specifier
	//	| struct_or_union_specifier=struct_or_union_specifier
	//	| enum_specifier=enum_specifier
	//	| type_name_str='typedef' /* after it has been defined as such */;
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}
	
	//enum_specifier:
	//	'enum' '{' enumerator_list=enumerator_list '}'
	//	| 'enum' '{' enumerator_list=enumerator_list ',' '}'
	//	| 'enum' identifier=IDz '{' enumerator_list=enumerator_list '}'
	//	| 'enum' identifier=IDz '{' enumerator_list=enumerator_list ',' '}'
	//	| 'enum' identifier=IDz;
	public Enum_specifierElements getEnum_specifierAccess() {
		return pEnum_specifier;
	}
	
	public ParserRule getEnum_specifierRule() {
		return getEnum_specifierAccess().getRule();
	}
	
	//enumerator_list:
	//	enumarator=enumerator enumerator_list_linha=enumerator_list_linha;
	public Enumerator_listElements getEnumerator_listAccess() {
		return pEnumerator_list;
	}
	
	public ParserRule getEnumerator_listRule() {
		return getEnumerator_listAccess().getRule();
	}
	
	//enumerator_list_linha:
	//	{EnumeratorListLinhaAction} (',' enumerator=enumerator enumerator_list_linha=enumerator_list_linha)?;
	public Enumerator_list_linhaElements getEnumerator_list_linhaAccess() {
		return pEnumerator_list_linha;
	}
	
	public ParserRule getEnumerator_list_linhaRule() {
		return getEnumerator_list_linhaAccess().getRule();
	}
	
	//enumerator /* identifiers must be flagged as ENUMERATION_CONSTANT */:
	//	enumeration_constant=enumeration_constant '=' conditional_expression=constant_expression
	//	| enumeration_constant=enumeration_constant;
	public EnumeratorElements getEnumeratorAccess() {
		return pEnumerator;
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}
	
	//atomic_type_specifier:
	//	'_Atomic' '(' type_name=type_name ')';
	public Atomic_type_specifierElements getAtomic_type_specifierAccess() {
		return pAtomic_type_specifier;
	}
	
	public ParserRule getAtomic_type_specifierRule() {
		return getAtomic_type_specifierAccess().getRule();
	}
	
	//struct_or_union_specifier:
	//	struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}'
	//	| struct_or_union=struct_or_union identifier=IDz
	//	struct_or_union_specifier_complement=struct_or_union_specifier_complement;
	public Struct_or_union_specifierElements getStruct_or_union_specifierAccess() {
		return pStruct_or_union_specifier;
	}
	
	public ParserRule getStruct_or_union_specifierRule() {
		return getStruct_or_union_specifierAccess().getRule();
	}
	
	//struct_or_union:
	//	'struct'
	//	| 'union';
	public Struct_or_unionElements getStruct_or_unionAccess() {
		return pStruct_or_union;
	}
	
	public ParserRule getStruct_or_unionRule() {
		return getStruct_or_unionAccess().getRule();
	}
	
	//struct_or_union_specifier_complement:
	//	{StructOrUnionSpecifierComplementAction} ('{' struct_declaration_list=struct_declaration_list '}')?;
	public Struct_or_union_specifier_complementElements getStruct_or_union_specifier_complementAccess() {
		return pStruct_or_union_specifier_complement;
	}
	
	public ParserRule getStruct_or_union_specifier_complementRule() {
		return getStruct_or_union_specifier_complementAccess().getRule();
	}
	
	//struct_declaration_list:
	//	struct_declaration=struct_declaration struct_declaration_list_linha=struct_declaration_list_linha;
	public Struct_declaration_listElements getStruct_declaration_listAccess() {
		return pStruct_declaration_list;
	}
	
	public ParserRule getStruct_declaration_listRule() {
		return getStruct_declaration_listAccess().getRule();
	}
	
	//struct_declaration_list_linha:
	//	{StructDeclarationListLinhaAction} (struct_declaration=struct_declaration
	//	struct_declaration_list_linha=struct_declaration_list_linha)?;
	public Struct_declaration_list_linhaElements getStruct_declaration_list_linhaAccess() {
		return pStruct_declaration_list_linha;
	}
	
	public ParserRule getStruct_declaration_list_linhaRule() {
		return getStruct_declaration_list_linhaAccess().getRule();
	}
	
	//struct_declaration:
	//	specifier_qualifier_list=specifier_qualifier_list ';' /* for anonymous struct/union */
	//	| specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';'
	//	| static_assert_declaration=static_assert_declaration;
	public Struct_declarationElements getStruct_declarationAccess() {
		return pStruct_declaration;
	}
	
	public ParserRule getStruct_declarationRule() {
		return getStruct_declarationAccess().getRule();
	}
	
	//struct_declarator_list:
	//	struct_declarator=struct_declarator struct_declarator_list_linha=struct_declarator_list_linha;
	public Struct_declarator_listElements getStruct_declarator_listAccess() {
		return pStruct_declarator_list;
	}
	
	public ParserRule getStruct_declarator_listRule() {
		return getStruct_declarator_listAccess().getRule();
	}
	
	//struct_declarator_list_linha:
	//	{StructDeclaratorListLinhaAction} (',' struct_declarator=struct_declarator
	//	struct_declarator_list_linha=struct_declarator_list_linha)?;
	public Struct_declarator_list_linhaElements getStruct_declarator_list_linhaAccess() {
		return pStruct_declarator_list_linha;
	}
	
	public ParserRule getStruct_declarator_list_linhaRule() {
		return getStruct_declarator_list_linhaAccess().getRule();
	}
	
	//struct_declarator:
	//	':' constant_expression=constant_expression
	//	| declarator=declarator ':' constant_expression=constant_expression
	//	| declarator=declarator;
	public Struct_declaratorElements getStruct_declaratorAccess() {
		return pStruct_declarator;
	}
	
	public ParserRule getStruct_declaratorRule() {
		return getStruct_declaratorAccess().getRule();
	}
	
	//specifier_qualifier_list:
	//	type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list
	//	| type_specifier=type_specifier
	//	| type_qualifier=type_qualifier specifier_qualifier_list=specifier_qualifier_list
	//	| type_qualifier=type_qualifier;
	public Specifier_qualifier_listElements getSpecifier_qualifier_listAccess() {
		return pSpecifier_qualifier_list;
	}
	
	public ParserRule getSpecifier_qualifier_listRule() {
		return getSpecifier_qualifier_listAccess().getRule();
	}
	
	//storage_class_specifier:
	//	'typedef' /* identifiers must be flagged as TYPEDEF_NAME */
	//	| 'extern'
	//	| 'static'
	//	| '_Thread_local'
	//	| 'auto'
	//	| 'register';
	public Storage_class_specifierElements getStorage_class_specifierAccess() {
		return pStorage_class_specifier;
	}
	
	public ParserRule getStorage_class_specifierRule() {
		return getStorage_class_specifierAccess().getRule();
	}
	
	//declaration:
	//	declaration_specifiers+=declaration_specifiers ';'
	//	| declaration_specifiers+=declaration_specifiers init_declarator_list+=init_declarator_list ';'
	//	| static_assert_declaration=static_assert_declaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//function_definition:
	//	declaration_specifiers+=declaration_specifiers declarator=declarator declaration_list+=declaration_list
	//	compound_statement=compound_statement
	//	| declaration_specifiers+=declaration_specifiers declarator=declarator compound_statement=compound_statement;
	public Function_definitionElements getFunction_definitionAccess() {
		return pFunction_definition;
	}
	
	public ParserRule getFunction_definitionRule() {
		return getFunction_definitionAccess().getRule();
	}
	
	//declaration_list:
	//	declaration=declaration declaration_list_linha=declaration_list_linha;
	public Declaration_listElements getDeclaration_listAccess() {
		return pDeclaration_list;
	}
	
	public ParserRule getDeclaration_listRule() {
		return getDeclaration_listAccess().getRule();
	}
	
	//declaration_list_linha:
	//	{DeclarationListLinhaAction} (declaration=declaration declaration_list_linha=declaration_list_linha)?;
	public Declaration_list_linhaElements getDeclaration_list_linhaAccess() {
		return pDeclaration_list_linha;
	}
	
	public ParserRule getDeclaration_list_linhaRule() {
		return getDeclaration_list_linhaAccess().getRule();
	}
	
	//declarator:
	//	pointer=pointer direct_declarator=direct_declarator
	//	| direct_declarator=direct_declarator;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//pointer:
	//	'*' type_qualifier_list=type_qualifier_list pointer=pointer
	//	| '*' type_qualifier_list=type_qualifier_list
	//	| '*' pointer=pointer
	//	| '*';
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//type_qualifier_list:
	//	type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha;
	public Type_qualifier_listElements getType_qualifier_listAccess() {
		return pType_qualifier_list;
	}
	
	public ParserRule getType_qualifier_listRule() {
		return getType_qualifier_listAccess().getRule();
	}
	
	//type_qualifier_list_linha:
	//	{TypeQualifierListLinhaAtion} (type_qualifier=type_qualifier type_qualifier_list_linha=type_qualifier_list_linha)?;
	public Type_qualifier_list_linhaElements getType_qualifier_list_linhaAccess() {
		return pType_qualifier_list_linha;
	}
	
	public ParserRule getType_qualifier_list_linhaRule() {
		return getType_qualifier_list_linhaAccess().getRule();
	}
	
	//direct_declarator:
	//	identifier=IDz direct_declarator_linha=direct_declarator_linha?
	//	| '(' declarator=declarator ')' direct_declarator_linha=direct_declarator_linha?;
	public Direct_declaratorElements getDirect_declaratorAccess() {
		return pDirect_declarator;
	}
	
	public ParserRule getDirect_declaratorRule() {
		return getDirect_declaratorAccess().getRule();
	}
	
	//direct_declarator_linha:
	//	direct_declarator_complemento=direct_declarator_complemento direct_declarator_linha=direct_declarator_linha?;
	public Direct_declarator_linhaElements getDirect_declarator_linhaAccess() {
		return pDirect_declarator_linha;
	}
	
	public ParserRule getDirect_declarator_linhaRule() {
		return getDirect_declarator_linhaAccess().getRule();
	}
	
	//direct_declarator_complemento:
	//	'[' ']'
	//	| '[' '*' ']'
	//	| '[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	//	| '[' 'static' assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list '*' ']'
	//	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list ']'
	//	| '[' assignment_expression=assignment_expression ']'
	//	| '(' parameter_type_list=parameter_type_list ')'
	//	| '(' ')'
	//	| '(' identifier_list=identifier_list ')';
	public Direct_declarator_complementoElements getDirect_declarator_complementoAccess() {
		return pDirect_declarator_complemento;
	}
	
	public ParserRule getDirect_declarator_complementoRule() {
		return getDirect_declarator_complementoAccess().getRule();
	}
	
	//parameter_type_list:
	//	parameter_lista=parameter_lista ',' '...'
	//	| parameter_lista=parameter_lista;
	public Parameter_type_listElements getParameter_type_listAccess() {
		return pParameter_type_list;
	}
	
	public ParserRule getParameter_type_listRule() {
		return getParameter_type_listAccess().getRule();
	}
	
	//parameter_lista:
	//	parameter_declarations+=parameter_declaration (',' parameter_declarations+=parameter_declaration)*;
	public Parameter_listaElements getParameter_listaAccess() {
		return pParameter_lista;
	}
	
	public ParserRule getParameter_listaRule() {
		return getParameter_listaAccess().getRule();
	}
	
	//parameter_list_linha:
	//	(',' parameter_declaration=parameter_declaration parameter_list_linha+=parameter_list_linha)?;
	public Parameter_list_linhaElements getParameter_list_linhaAccess() {
		return pParameter_list_linha;
	}
	
	public ParserRule getParameter_list_linhaRule() {
		return getParameter_list_linhaAccess().getRule();
	}
	
	//parameter_declaration:
	//	declaration_specifiers=declaration_specifiers declarator=declarator
	//	| declaration_specifiers=declaration_specifiers abstract_declarator=abstract_declarator
	//	| declaration_specifiers=declaration_specifiers;
	public Parameter_declarationElements getParameter_declarationAccess() {
		return pParameter_declaration;
	}
	
	public ParserRule getParameter_declarationRule() {
		return getParameter_declarationAccess().getRule();
	}
	
	//abstract_declarator:
	//	pointer=pointer direct_abstract_declarator=direct_abstract_declarator
	//	| pointer=pointer
	//	| direct_abstract_declarator=direct_abstract_declarator;
	public Abstract_declaratorElements getAbstract_declaratorAccess() {
		return pAbstract_declarator;
	}
	
	public ParserRule getAbstract_declaratorRule() {
		return getAbstract_declaratorAccess().getRule();
	}
	
	//direct_abstract_declarator:
	//	('(' abstract_declarator=abstract_declarator ')'
	//	| '[' ']'
	//	| '[' '*' ']'
	//	| '[' 'static' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	//	| '[' 'static' assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list ']'
	//	| '[' assignment_expression=assignment_expression ']'
	//	| '(' ')'
	//	| '(' parameter_type_list=parameter_type_list ')') direct_abstract_declarator_linha=direct_abstract_declarator_linha;
	public Direct_abstract_declaratorElements getDirect_abstract_declaratorAccess() {
		return pDirect_abstract_declarator;
	}
	
	public ParserRule getDirect_abstract_declaratorRule() {
		return getDirect_abstract_declaratorAccess().getRule();
	}
	
	//initializer:
	//	'{' init_declarator_list=initializer_list '}'
	//	| '{' init_declarator_list=initializer_list ',' '}'
	//	| assignment_expression=assignment_expression;
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//direct_abstract_declarator_linha:
	//	{DirectAbstractDeclarratorLinhaAction} (direct_abstract_declarator_complement=direct_abstract_declarator_complement
	//	direct_abstract_declarator_linha=direct_abstract_declarator_linha)?;
	public Direct_abstract_declarator_linhaElements getDirect_abstract_declarator_linhaAccess() {
		return pDirect_abstract_declarator_linha;
	}
	
	public ParserRule getDirect_abstract_declarator_linhaRule() {
		return getDirect_abstract_declarator_linhaAccess().getRule();
	}
	
	//direct_abstract_declarator_complement:
	//	'[' ']'
	//	| '[' '*' ']'
	//	| '[' 'static' type_qualifier_list assignment_expression=assignment_expression ']'
	//	| '[' 'static' assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list 'static' assignment_expression=assignment_expression ']'
	//	| '[' type_qualifier_list=type_qualifier_list ']'
	//	| '[' assignment_expression=assignment_expression ']'
	//	| '(' ')'
	//	| '(' parameter_type_list=parameter_type_list ')';
	public Direct_abstract_declarator_complementElements getDirect_abstract_declarator_complementAccess() {
		return pDirect_abstract_declarator_complement;
	}
	
	public ParserRule getDirect_abstract_declarator_complementRule() {
		return getDirect_abstract_declarator_complementAccess().getRule();
	}
	
	//identifier_list:
	//	identifier=IDz identifier_list_linha=identifier_list_linha;
	public Identifier_listElements getIdentifier_listAccess() {
		return pIdentifier_list;
	}
	
	public ParserRule getIdentifier_listRule() {
		return getIdentifier_listAccess().getRule();
	}
	
	//identifier_list_linha:
	//	{IdentifierListLinhaAction} (',' identifier=IDz identifier_list_linha=identifier_list_linha)?;
	public Identifier_list_linhaElements getIdentifier_list_linhaAccess() {
		return pIdentifier_list_linha;
	}
	
	public ParserRule getIdentifier_list_linhaRule() {
		return getIdentifier_list_linhaAccess().getRule();
	}
	
	//translation_unit_linha:
	//	{TranlationUnitLinhaAction} (external_declaration=external_declaration
	//	translation_unit_linha=translation_unit_linha)?;
	public Translation_unit_linhaElements getTranslation_unit_linhaAccess() {
		return pTranslation_unit_linha;
	}
	
	public ParserRule getTranslation_unit_linhaRule() {
		return getTranslation_unit_linhaAccess().getRule();
	}
	
	//primary_expression:
	//	identifier=IDz
	//	| constant=constant
	//	| '(' expression=expression ')'
	//	| generic_selection=generic_selection;
	public Primary_expressionElements getPrimary_expressionAccess() {
		return pPrimary_expression;
	}
	
	public ParserRule getPrimary_expressionRule() {
		return getPrimary_expressionAccess().getRule();
	}
	
	////TODO NINGUEM CHAMA
	//enumeration_constant /* before it has been defined as such */:
	//	identifier=IDz;
	public Enumeration_constantElements getEnumeration_constantAccess() {
		return pEnumeration_constant;
	}
	
	public ParserRule getEnumeration_constantRule() {
		return getEnumeration_constantAccess().getRule();
	}
	
	//generic_selection:
	//	_generic='_Generic' '(' assignment_expression=assignment_expression ',' generic_assoc_list+=generic_assoc_list ')';
	public Generic_selectionElements getGeneric_selectionAccess() {
		return pGeneric_selection;
	}
	
	public ParserRule getGeneric_selectionRule() {
		return getGeneric_selectionAccess().getRule();
	}
	
	//generic_assoc_list:
	//	generic_association=generic_association generic_assoc_list_linha=generic_assoc_list_linha;
	public Generic_assoc_listElements getGeneric_assoc_listAccess() {
		return pGeneric_assoc_list;
	}
	
	public ParserRule getGeneric_assoc_listRule() {
		return getGeneric_assoc_listAccess().getRule();
	}
	
	//generic_assoc_list_linha:
	//	{GenericAssocListLinhaAction} (',' generic_association=generic_association
	//	generic_assoc_list_linha=generic_assoc_list_linha)?;
	public Generic_assoc_list_linhaElements getGeneric_assoc_list_linhaAccess() {
		return pGeneric_assoc_list_linha;
	}
	
	public ParserRule getGeneric_assoc_list_linhaRule() {
		return getGeneric_assoc_list_linhaAccess().getRule();
	}
	
	//generic_association:
	//	type_name=type_name ':' assignment_expression=assignment_expression
	//	| default='default' ':' assignment_expression=assignment_expression;
	public Generic_associationElements getGeneric_associationAccess() {
		return pGeneric_association;
	}
	
	public ParserRule getGeneric_associationRule() {
		return getGeneric_associationAccess().getRule();
	}
	
	//postfix_expression:
	//	primary_expression=primary_expression postfix_expression_linha=postfix_expression_linha
	//	| '(' type_name ')' '{' initializer_list=initializer_list '}' postfix_expression_linha=postfix_expression_linha
	//	| '(' type_name ')' '{' initializer_list=initializer_list ',' '}' postfix_expression_linha=postfix_expression_linha;
	public Postfix_expressionElements getPostfix_expressionAccess() {
		return pPostfix_expression;
	}
	
	public ParserRule getPostfix_expressionRule() {
		return getPostfix_expressionAccess().getRule();
	}
	
	//postfix_expression_linha:
	//	{PostfixExpressionLinhaAction} (postfix_expression_complement=postfix_expression_complement
	//	postfix_expression_linha=postfix_expression_linha)?;
	public Postfix_expression_linhaElements getPostfix_expression_linhaAccess() {
		return pPostfix_expression_linha;
	}
	
	public ParserRule getPostfix_expression_linhaRule() {
		return getPostfix_expression_linhaAccess().getRule();
	}
	
	//initializer_list:
	//	designation=designation initializer=initializer init_declarator_list_linha=init_declarator_list_linha
	//	| initializer=initializer init_declarator_list_linha=init_declarator_list_linha;
	public Initializer_listElements getInitializer_listAccess() {
		return pInitializer_list;
	}
	
	public ParserRule getInitializer_listRule() {
		return getInitializer_listAccess().getRule();
	}
	
	//initializer_list_linha:
	//	{InitializerListLinhaAction} (initializer_list_complement=initializer_list_complement
	//	init_declarator_list_linha=init_declarator_list_linha)?;
	public Initializer_list_linhaElements getInitializer_list_linhaAccess() {
		return pInitializer_list_linha;
	}
	
	public ParserRule getInitializer_list_linhaRule() {
		return getInitializer_list_linhaAccess().getRule();
	}
	
	//initializer_list_complement:
	//	',' designation=designation initializer=initializer
	//	| ',' initializer=initializer;
	public Initializer_list_complementElements getInitializer_list_complementAccess() {
		return pInitializer_list_complement;
	}
	
	public ParserRule getInitializer_list_complementRule() {
		return getInitializer_list_complementAccess().getRule();
	}
	
	//designation:
	//	designator_list=designator_list '=';
	public DesignationElements getDesignationAccess() {
		return pDesignation;
	}
	
	public ParserRule getDesignationRule() {
		return getDesignationAccess().getRule();
	}
	
	//designator_list:
	//	designator=designator designator_list_linha=designator_list_linha;
	public Designator_listElements getDesignator_listAccess() {
		return pDesignator_list;
	}
	
	public ParserRule getDesignator_listRule() {
		return getDesignator_listAccess().getRule();
	}
	
	//designator_list_linha:
	//	{DesignatorListLinhaAction} (designator=designator designator_list_linha=declaration_list_linha)?;
	public Designator_list_linhaElements getDesignator_list_linhaAccess() {
		return pDesignator_list_linha;
	}
	
	public ParserRule getDesignator_list_linhaRule() {
		return getDesignator_list_linhaAccess().getRule();
	}
	
	//designator:
	//	'[' constant_expression=conditional_expression ']'
	//	| '.' identifier=IDz;
	public DesignatorElements getDesignatorAccess() {
		return pDesignator;
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}
	
	//static_assert_declaration:
	//	'_Static_assert' '(' constant_expression=constant_expression ',' STRING_LITERAL ')' ';';
	public Static_assert_declarationElements getStatic_assert_declarationAccess() {
		return pStatic_assert_declaration;
	}
	
	public ParserRule getStatic_assert_declarationRule() {
		return getStatic_assert_declarationAccess().getRule();
	}
	
	//postfix_expression_complement:
	//	'[' expression=expression ']'
	//	| {PostFixEmpryParams} '(' ')'
	//	| '(' argument_expression_list=argument_expression_list ')'
	//	| '.' identifier=IDz
	//	| '->' identifier=IDz
	//	| '++'
	//	| '--';
	public Postfix_expression_complementElements getPostfix_expression_complementAccess() {
		return pPostfix_expression_complement;
	}
	
	public ParserRule getPostfix_expression_complementRule() {
		return getPostfix_expression_complementAccess().getRule();
	}
	
	//argument_expression_list:
	//	assignment_expressions+=assignment_expression (',' assignment_expressions+=assignment_expression)*;
	public Argument_expression_listElements getArgument_expression_listAccess() {
		return pArgument_expression_list;
	}
	
	public ParserRule getArgument_expression_listRule() {
		return getArgument_expression_listAccess().getRule();
	}
	
	//argument_expression_list_linha:
	//	{ArgumentExpressionListLinhaAction} (',' assignment_expression=assignment_expression
	//	argument_expression_list_linha=argument_expression_list_linha)?;
	public Argument_expression_list_linhaElements getArgument_expression_list_linhaAccess() {
		return pArgument_expression_list_linha;
	}
	
	public ParserRule getArgument_expression_list_linhaRule() {
		return getArgument_expression_list_linhaAccess().getRule();
	}
	
	//unary_expression:
	//	postfix_expression=postfix_expression
	//	| {PlusPlus} plus='++' unary_expression=unary_expression
	//	| '--' unary_expression=unary_expression
	//	| unary_operator=unary_operator cast_expression=cast_expression
	//	| 'sizeof' unary_expression=unary_expression
	//	| 'sizeof' '(' type_name=type_name ')'
	//	| '_Alignof' '(' type_name=type_name ')';
	public Unary_expressionElements getUnary_expressionAccess() {
		return pUnary_expression;
	}
	
	public ParserRule getUnary_expressionRule() {
		return getUnary_expressionAccess().getRule();
	}
	
	//cast_expression:
	//	unary_expression=unary_expression
	//	| '(' type_name=type_name ')' cast_expression=cast_expression;
	public Cast_expressionElements getCast_expressionAccess() {
		return pCast_expression;
	}
	
	public ParserRule getCast_expressionRule() {
		return getCast_expressionAccess().getRule();
	}
	
	//multiplicative_expression:
	//	cast_expression=cast_expression multiplicative_expression_linha=multiplicative_expression_linha;
	public Multiplicative_expressionElements getMultiplicative_expressionAccess() {
		return pMultiplicative_expression;
	}
	
	public ParserRule getMultiplicative_expressionRule() {
		return getMultiplicative_expressionAccess().getRule();
	}
	
	//multiplicative_expression_linha:
	//	(multiplicative_expression_complement=multiplicative_expression_complement
	//	multiplicative_expression_linha=multiplicative_expression_linha)?;
	public Multiplicative_expression_linhaElements getMultiplicative_expression_linhaAccess() {
		return pMultiplicative_expression_linha;
	}
	
	public ParserRule getMultiplicative_expression_linhaRule() {
		return getMultiplicative_expression_linhaAccess().getRule();
	}
	
	//multiplicative_expression_complement:
	//	multiplica='*' cast_expression=cast_expression
	//	| divide='/' cast_expression=cast_expression
	//	| modulo='%' cast_expression=cast_expression;
	public Multiplicative_expression_complementElements getMultiplicative_expression_complementAccess() {
		return pMultiplicative_expression_complement;
	}
	
	public ParserRule getMultiplicative_expression_complementRule() {
		return getMultiplicative_expression_complementAccess().getRule();
	}
	
	//additive_expression:
	//	multiplicative_expression=multiplicative_expression additive_expression_linha=additive_expression_linha;
	public Additive_expressionElements getAdditive_expressionAccess() {
		return pAdditive_expression;
	}
	
	public ParserRule getAdditive_expressionRule() {
		return getAdditive_expressionAccess().getRule();
	}
	
	//additive_expression_linha:
	//	(additive_expression_complement=additive_expression_complement additive_expression_linha=additive_expression_linha)?;
	public Additive_expression_linhaElements getAdditive_expression_linhaAccess() {
		return pAdditive_expression_linha;
	}
	
	public ParserRule getAdditive_expression_linhaRule() {
		return getAdditive_expression_linhaAccess().getRule();
	}
	
	//additive_expression_complement:
	//	mais='+' multiplicative_expression=multiplicative_expression
	//	| menos='-' multiplicative_expression=multiplicative_expression;
	public Additive_expression_complementElements getAdditive_expression_complementAccess() {
		return pAdditive_expression_complement;
	}
	
	public ParserRule getAdditive_expression_complementRule() {
		return getAdditive_expression_complementAccess().getRule();
	}
	
	//shift_expression:
	//	additive_expression=additive_expression shift_expression_linha=shift_expression_linha;
	public Shift_expressionElements getShift_expressionAccess() {
		return pShift_expression;
	}
	
	public ParserRule getShift_expressionRule() {
		return getShift_expressionAccess().getRule();
	}
	
	//shift_expression_linha:
	//	(shift_expression_complement=shift_expression_complement shift_expression_linha=shift_expression_linha)?;
	public Shift_expression_linhaElements getShift_expression_linhaAccess() {
		return pShift_expression_linha;
	}
	
	public ParserRule getShift_expression_linhaRule() {
		return getShift_expression_linhaAccess().getRule();
	}
	
	//shift_expression_complement:
	//	sleft='<<' additive_expression=additive_expression
	//	| sright='>>' additive_expression=additive_expression;
	public Shift_expression_complementElements getShift_expression_complementAccess() {
		return pShift_expression_complement;
	}
	
	public ParserRule getShift_expression_complementRule() {
		return getShift_expression_complementAccess().getRule();
	}
	
	//relational_expression:
	//	shift_expression=shift_expression relational_expression_linha=relational_expression_linha;
	public Relational_expressionElements getRelational_expressionAccess() {
		return pRelational_expression;
	}
	
	public ParserRule getRelational_expressionRule() {
		return getRelational_expressionAccess().getRule();
	}
	
	//relational_expression_linha:
	//	(shift_expression_complement=shift_expression_complement relational_expression_linha=relational_expression_linha)?;
	public Relational_expression_linhaElements getRelational_expression_linhaAccess() {
		return pRelational_expression_linha;
	}
	
	public ParserRule getRelational_expression_linhaRule() {
		return getRelational_expression_linhaAccess().getRule();
	}
	
	//relational_expression_complement:
	//	menor='<' shift_expression=shift_expression
	//	| maior='>' shift_expression=shift_expression
	//	| menor_igual='<=' shift_expression=shift_expression
	//	| maior_igual='>=' shift_expression=shift_expression;
	public Relational_expression_complementElements getRelational_expression_complementAccess() {
		return pRelational_expression_complement;
	}
	
	public ParserRule getRelational_expression_complementRule() {
		return getRelational_expression_complementAccess().getRule();
	}
	
	//equality_expression:
	//	relational_expression=relational_expression equality_expression_linha=equality_expression_linha;
	public Equality_expressionElements getEquality_expressionAccess() {
		return pEquality_expression;
	}
	
	public ParserRule getEquality_expressionRule() {
		return getEquality_expressionAccess().getRule();
	}
	
	//equality_expression_linha:
	//	(equality_expression_complement=equality_expression_complement equality_expression_linha=equality_expression_linha)?;
	public Equality_expression_linhaElements getEquality_expression_linhaAccess() {
		return pEquality_expression_linha;
	}
	
	public ParserRule getEquality_expression_linhaRule() {
		return getEquality_expression_linhaAccess().getRule();
	}
	
	//equality_expression_complement:
	//	igual='==' relational_expression=relational_expression
	//	| menor='<' relational_expression=relational_expression
	//	| maior='>' relational_expression=relational_expression
	//	| menor_igual='<=' relational_expression=relational_expression
	//	| maior_igual='>=' relational_expression=relational_expression
	//	| n_igual='!=' relational_expression=relational_expression;
	public Equality_expression_complementElements getEquality_expression_complementAccess() {
		return pEquality_expression_complement;
	}
	
	public ParserRule getEquality_expression_complementRule() {
		return getEquality_expression_complementAccess().getRule();
	}
	
	//statement:
	//	labeled_statement=labeled_statement
	//	| compound_statement=compound_statement
	//	| expression_statement=expression_statement
	//	| selection_statement=selection_statement
	//	| iteration_statement=iteration_statement
	//	| jump_statement=jump_statement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//jump_statement:
	//	'goto' identifier=IDz ';'
	//	| 'continue' ';'
	//	| break='break' ';'
	//	| return_vazio='return' ';'
	//	| return='return' expression=expression ';';
	public Jump_statementElements getJump_statementAccess() {
		return pJump_statement;
	}
	
	public ParserRule getJump_statementRule() {
		return getJump_statementAccess().getRule();
	}
	
	//iteration_statement:
	//	'while' '(' expression=expression ')' statement=statement
	//	| 'do' statement=statement 'while' '(' expression=expression ')' ';'
	//	| 'for' '(' expression_statement=expression_statement expression_statement2=expression_statement ')'
	//	statement=statement
	//	| 'for' '(' expression_statement=expression_statement expression_statement2=expression_statement
	//	expression=expression ')' statement=statement
	//	| 'for' '(' declaration=declaration expression_statement=expression_statement ')' statement=statement
	//	| 'for' '(' declaration=declaration expression_statement=expression_statement expression=expression ')'
	//	statement=statement;
	public Iteration_statementElements getIteration_statementAccess() {
		return pIteration_statement;
	}
	
	public ParserRule getIteration_statementRule() {
		return getIteration_statementAccess().getRule();
	}
	
	//selection_statement:
	//	'if' '(' expression=expression ')' statement=statement 'else' statement2=statement
	//	| 'if' '(' expression=expression ')' statement=statement
	//	| 'switch' '(' expression=expression ')' statement=statement;
	public Selection_statementElements getSelection_statementAccess() {
		return pSelection_statement;
	}
	
	public ParserRule getSelection_statementRule() {
		return getSelection_statementAccess().getRule();
	}
	
	//labeled_statement:
	//	identifier=IDz ':' statement=statement
	//	| 'case' conditional_expression=conditional_expression ':' statement=statement
	//	| 'default' ':' statement=statement;
	public Labeled_statementElements getLabeled_statementAccess() {
		return pLabeled_statement;
	}
	
	public ParserRule getLabeled_statementRule() {
		return getLabeled_statementAccess().getRule();
	}
	
	//compound_statement:
	//	'{' '}'
	//	| '{' block_item_list+=block_item_list '}';
	public Compound_statementElements getCompound_statementAccess() {
		return pCompound_statement;
	}
	
	public ParserRule getCompound_statementRule() {
		return getCompound_statementAccess().getRule();
	}
	
	//block_item_list:
	//	block_item=block_item block_item_list_linha+=block_item_list_linha?;
	public Block_item_listElements getBlock_item_listAccess() {
		return pBlock_item_list;
	}
	
	public ParserRule getBlock_item_listRule() {
		return getBlock_item_listAccess().getRule();
	}
	
	//block_item_list_linha:
	//	block_item=block_item block_item_list_linha+=block_item_list_linha?;
	public Block_item_list_linhaElements getBlock_item_list_linhaAccess() {
		return pBlock_item_list_linha;
	}
	
	public ParserRule getBlock_item_list_linhaRule() {
		return getBlock_item_list_linhaAccess().getRule();
	}
	
	//block_item:
	//	declaration=declaration
	//	| statement=statement;
	public Block_itemElements getBlock_itemAccess() {
		return pBlock_item;
	}
	
	public ParserRule getBlock_itemRule() {
		return getBlock_itemAccess().getRule();
	}
	
	//expression_statement:
	//	';'
	//	| expression=expression ';';
	public Expression_statementElements getExpression_statementAccess() {
		return pExpression_statement;
	}
	
	public ParserRule getExpression_statementRule() {
		return getExpression_statementAccess().getRule();
	}
	
	//and_expression:
	//	equality_expression=equality_expression and_expression_linha=and_expression_linha;
	public And_expressionElements getAnd_expressionAccess() {
		return pAnd_expression;
	}
	
	public ParserRule getAnd_expressionRule() {
		return getAnd_expressionAccess().getRule();
	}
	
	//and_expression_linha:
	//	('&' equality_expression=equality_expression and_expression_linha=and_expression_linha)?;
	public And_expression_linhaElements getAnd_expression_linhaAccess() {
		return pAnd_expression_linha;
	}
	
	public ParserRule getAnd_expression_linhaRule() {
		return getAnd_expression_linhaAccess().getRule();
	}
	
	//exclusive_or_expression:
	//	and_expression=and_expression exclusive_or_expression_linha=exclusive_or_expression_linha;
	public Exclusive_or_expressionElements getExclusive_or_expressionAccess() {
		return pExclusive_or_expression;
	}
	
	public ParserRule getExclusive_or_expressionRule() {
		return getExclusive_or_expressionAccess().getRule();
	}
	
	//exclusive_or_expression_linha:
	//	('^' and_expression=and_expression exclusive_or_expression_linha=exclusive_or_expression_linha)?;
	public Exclusive_or_expression_linhaElements getExclusive_or_expression_linhaAccess() {
		return pExclusive_or_expression_linha;
	}
	
	public ParserRule getExclusive_or_expression_linhaRule() {
		return getExclusive_or_expression_linhaAccess().getRule();
	}
	
	//inclusive_or_expression:
	//	exclusive_or_expression=exclusive_or_expression inclusive_or_expression_linha=inclusive_or_expression_linha;
	public Inclusive_or_expressionElements getInclusive_or_expressionAccess() {
		return pInclusive_or_expression;
	}
	
	public ParserRule getInclusive_or_expressionRule() {
		return getInclusive_or_expressionAccess().getRule();
	}
	
	//inclusive_or_expression_linha:
	//	('|' exclusive_or_expression=exclusive_or_expression inclusive_or_expression_linha=inclusive_or_expression_linha)?;
	public Inclusive_or_expression_linhaElements getInclusive_or_expression_linhaAccess() {
		return pInclusive_or_expression_linha;
	}
	
	public ParserRule getInclusive_or_expression_linhaRule() {
		return getInclusive_or_expression_linhaAccess().getRule();
	}
	
	//logical_and_expression:
	//	inclusive_or_expression=inclusive_or_expression logical_and_expression_linha=logical_and_expression_linha;
	public Logical_and_expressionElements getLogical_and_expressionAccess() {
		return pLogical_and_expression;
	}
	
	public ParserRule getLogical_and_expressionRule() {
		return getLogical_and_expressionAccess().getRule();
	}
	
	//logical_and_expression_linha:
	//	('and' inclusive_or_expression=inclusive_or_expression logical_and_expression_linha=logical_and_expression_linha)?;
	public Logical_and_expression_linhaElements getLogical_and_expression_linhaAccess() {
		return pLogical_and_expression_linha;
	}
	
	public ParserRule getLogical_and_expression_linhaRule() {
		return getLogical_and_expression_linhaAccess().getRule();
	}
	
	//logical_or_expression:
	//	logical_and_expression=logical_and_expression logical_or_expression_linha=logical_or_expression_linha;
	public Logical_or_expressionElements getLogical_or_expressionAccess() {
		return pLogical_or_expression;
	}
	
	public ParserRule getLogical_or_expressionRule() {
		return getLogical_or_expressionAccess().getRule();
	}
	
	//logical_or_expression_linha:
	//	('or' logical_and_expression=logical_and_expression logical_or_expression_linha=logical_or_expression_linha)?;
	public Logical_or_expression_linhaElements getLogical_or_expression_linhaAccess() {
		return pLogical_or_expression_linha;
	}
	
	public ParserRule getLogical_or_expression_linhaRule() {
		return getLogical_or_expression_linhaAccess().getRule();
	}
	
	//conditional_expression:
	//	logical_or_expression=logical_or_expression conditional_expression_linha=conditional_expression_linha;
	public Conditional_expressionElements getConditional_expressionAccess() {
		return pConditional_expression;
	}
	
	public ParserRule getConditional_expressionRule() {
		return getConditional_expressionAccess().getRule();
	}
	
	//conditional_expression_linha:
	//	('?' expression=expression ':' conditional_expression=conditional_expression
	//	conditional_expression_linha=conditional_expression_linha)?;
	public Conditional_expression_linhaElements getConditional_expression_linhaAccess() {
		return pConditional_expression_linha;
	}
	
	public ParserRule getConditional_expression_linhaRule() {
		return getConditional_expression_linhaAccess().getRule();
	}
	
	//assignment_expression:
	//	conditional_expression=conditional_expression
	//	| unary_expression=unary_expression assignment_operator=assignment_operator
	//	assignment_expression=assignment_expression;
	public Assignment_expressionElements getAssignment_expressionAccess() {
		return pAssignment_expression;
	}
	
	public ParserRule getAssignment_expressionRule() {
		return getAssignment_expressionAccess().getRule();
	}
	
	//assignment_operator:
	//	'='
	//	| '*='
	//	| '/='
	//	| '%='
	//	| '+='
	//	| '-='
	//	| '<<='
	//	| '>>='
	//	| '&='
	//	| '^='
	//	| '|=';
	public Assignment_operatorElements getAssignment_operatorAccess() {
		return pAssignment_operator;
	}
	
	public ParserRule getAssignment_operatorRule() {
		return getAssignment_operatorAccess().getRule();
	}
	
	//unary_operator:
	//	'&'
	//	| '*'
	//	| '+'
	//	| '-'
	//	| '~'
	//	| '!';
	public Unary_operatorElements getUnary_operatorAccess() {
		return pUnary_operator;
	}
	
	public ParserRule getUnary_operatorRule() {
		return getUnary_operatorAccess().getRule();
	}
	
	//type_name:
	//	specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator
	//	| specifier_qualifier_list=specifier_qualifier_list;
	public Type_nameElements getType_nameAccess() {
		return pType_name;
	}
	
	public ParserRule getType_nameRule() {
		return getType_nameAccess().getRule();
	}
	
	//expression:
	//	assignment_expression=assignment_expression expression_linha=expression_linha;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//expression_linha:
	//	(',' assignment_expression=assignment_expression expression_linha=expression_linha)?;
	public Expression_linhaElements getExpression_linhaAccess() {
		return pExpression_linha;
	}
	
	public ParserRule getExpression_linhaRule() {
		return getExpression_linhaAccess().getRule();
	}
	
	//constant_expression:
	//	conditional_expression=conditional_expression /* with constraints */;
	public Constant_expressionElements getConstant_expressionAccess() {
		return pConstant_expression;
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}
	
	//init_declarator_list:
	//	init_declarator=init_declarator init_declarator_list_linha=init_declarator_list_linha;
	public Init_declarator_listElements getInit_declarator_listAccess() {
		return pInit_declarator_list;
	}
	
	public ParserRule getInit_declarator_listRule() {
		return getInit_declarator_listAccess().getRule();
	}
	
	//init_declarator_list_linha:
	//	{InitDecclaratorListLinhaAction} (',' init_declarator=init_declarator
	//	init_declarator_list_linha=init_declarator_list_linha)?;
	public Init_declarator_list_linhaElements getInit_declarator_list_linhaAccess() {
		return pInit_declarator_list_linha;
	}
	
	public ParserRule getInit_declarator_list_linhaRule() {
		return getInit_declarator_list_linhaAccess().getRule();
	}
	
	//init_declarator:
	//	declarator=declarator '=' initializer=initializer
	//	| declarator=declarator;
	public Init_declaratorElements getInit_declaratorAccess() {
		return pInit_declarator;
	}
	
	public ParserRule getInit_declaratorRule() {
		return getInit_declaratorAccess().getRule();
	}
	
	//string_ufcg:
	//	string_literal=STRING_LITERAL
	//	| __func__='__func__';
	public String_ufcgElements getString_ufcgAccess() {
		return pString_ufcg;
	}
	
	public ParserRule getString_ufcgRule() {
		return getString_ufcgAccess().getRule();
	}
	
	//constant:
	//	i_constant=INT /* includes character_constant */
	//	| f_constant=FLOAT
	//	| char=CHAR
	//	| enumz='enum' /* after it has been defined as such */;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//terminal IDz:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '1'..'9')*;
	public TerminalRule getIDzRule() {
		return tIDz;
	}
	
	//terminal CHAR:
	//	'\'' . '\'';
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal FLOAT:
	//	'0'..'9'+ '.' '0'..'9'*;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal O:
	//	'0'..'7';
	public TerminalRule getORule() {
		return tO;
	}
	
	//terminal D:
	//	'0'..'9';
	public TerminalRule getDRule() {
		return tD;
	}
	
	//terminal NZ:
	//	'1'..'9';
	public TerminalRule getNZRule() {
		return tNZ;
	}
	
	//terminal A:
	//	'a'..'z' | 'A'..'Z' | '_' | '0' '..' '9';
	public TerminalRule getARule() {
		return tA;
	}
	
	//terminal H:
	//	'a'..'f' | 'A'..'F' | '0' '..' '9';
	public TerminalRule getHRule() {
		return tH;
	}
	
	//terminal HP:
	//	'0' ('x' | 'X');
	public TerminalRule getHPRule() {
		return tHP;
	}
	
	//terminal E:
	//	('E' | 'e') ('+' | '-')? D '+';
	public TerminalRule getERule() {
		return tE;
	}
	
	//terminal P:
	//	('P' | 'p') ('+' | '-')? '{' D '}' '+';
	public TerminalRule getPRule() {
		return tP;
	}
	
	//terminal FS:
	//	'f' | 'F' | 'l' | 'L';
	public TerminalRule getFSRule() {
		return tFS;
	}
	
	//terminal ES:
	//	A;
	public TerminalRule getESRule() {
		return tES;
	}
	
	//terminal IS:
	//	('u' | 'U') ('l' | 'L' | 'l' 'l' | 'L' 'L')? | ('l' | 'L' | 'l' 'l' | 'L' 'L') ('u' | 'U')?;
	public TerminalRule getISRule() {
		return tIS;
	}
	
	//terminal CP:
	//	'u' | 'U' | 'L';
	public TerminalRule getCPRule() {
		return tCP;
	}
	
	//terminal SP:
	//	'u' '8' | 'u' | 'U' | 'L';
	public TerminalRule getSPRule() {
		return tSP;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n' | '\f'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal I_CONSTANT:
	//	HP H '+' IS? | NZ D '*' IS? |
	//	"0" O '*' IS? | CP? "'" (('^' | '\'' | '\\' | '\n') | ES)+ "'";
	public TerminalRule getI_CONSTANTRule() {
		return tI_CONSTANT;
	}
	
	//terminal F_CONSTANT:
	//	D '+' E FS? | D '*' "." D '+' E? FS? | D '+' "." E? FS? | HP H '+' P FS?
	//	HP H '*' "." H '+' P FS? | HP H '+' "." P FS?;
	public TerminalRule getF_CONSTANTRule() {
		return tF_CONSTANT;
	}
	
	//terminal STRING_LITERAL:
	//	SP? '"' (('^' | '\'' | '\\' | '\n') | ES)* '"' WS*+;
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
